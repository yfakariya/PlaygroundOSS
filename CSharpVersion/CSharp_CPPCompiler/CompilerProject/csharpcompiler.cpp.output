

Terminals which are not used:

   STRING
   OBJECT


Conflict in state 632 between rule 232 and token ELSE resolved as shift.
State 569 contains 1 reduce/reduce conflict.

Grammar
rule 1    literal -> boolean_literal
rule 2    literal -> INTEGER_LITERAL
rule 3    literal -> REAL_LITERAL
rule 4    literal -> CHARACTER_LITERAL
rule 5    literal -> STRING_LITERAL
rule 6    literal -> NULL_LITERAL
rule 7    boolean_literal -> TRUE
rule 8    boolean_literal -> FALSE
rule 9    namespace_name -> qualified_identifier
rule 10   type_name -> qualified_identifier_opt_generic
rule 11   opt_generic ->		/* empty */
rule 12   @1 ->		/* empty */
rule 13   opt_generic -> GEN_LT @1 genericlist GEN_GT
rule 14   @2 ->		/* empty */
rule 15   qualified_identifier_opt_generic -> qualified_identifier @2 opt_generic
rule 16   genericlist -> type
rule 17   @3 ->		/* empty */
rule 18   genericlist -> type COMMA @3 genericlist
rule 19   type -> non_array_type
rule 20   type -> array_type
rule 21   non_array_type -> simple_type
rule 22   non_array_type -> type_name
rule 23   simple_type -> primitive_type
rule 24   simple_type -> pointer_type
rule 25   primitive_type -> numeric_type
rule 26   primitive_type -> BOOL
rule 27   numeric_type -> integral_type
rule 28   numeric_type -> floating_point_type
rule 29   numeric_type -> DECIMAL
rule 30   integral_type -> SBYTE
rule 31   integral_type -> BYTE
rule 32   integral_type -> SHORT
rule 33   integral_type -> USHORT
rule 34   integral_type -> INT
rule 35   integral_type -> UINT
rule 36   integral_type -> LONG
rule 37   integral_type -> ULONG
rule 38   integral_type -> CHAR
rule 39   floating_point_type -> FLOAT
rule 40   floating_point_type -> DOUBLE
rule 41   pointer_type -> type '*'
rule 42   pointer_type -> VOID '*'
rule 43   array_type -> array_type rank_specifier
rule 44   array_type -> simple_type rank_specifier
rule 45   array_type -> qualified_identifier rank_specifier
rule 46   rank_specifiers_opt ->		/* empty */
rule 47   rank_specifiers_opt -> rank_specifier rank_specifiers_opt
rule 48   rank_specifier -> RANK_SPECIFIER
rule 49   variable_reference -> expression
rule 50   argument_list -> argument
rule 51   argument_list -> argument_list COMMA argument
rule 52   argument -> expression
rule 53   argument -> REF variable_reference
rule 54   argument -> OUT variable_reference
rule 55   argument -> IDENTIFIER ':' argument
rule 56   primary_expression -> parenthesized_expression
rule 57   primary_expression -> primary_expression_no_parenthesis
rule 58   primary_expression_no_parenthesis -> literal
rule 59   primary_expression_no_parenthesis -> array_creation_expression
rule 60   primary_expression_no_parenthesis -> member_access
rule 61   primary_expression_no_parenthesis -> invocation_expression
rule 62   primary_expression_no_parenthesis -> element_access
rule 63   primary_expression_no_parenthesis -> this_access
rule 64   primary_expression_no_parenthesis -> base_access
rule 65   primary_expression_no_parenthesis -> new_expression
rule 66   primary_expression_no_parenthesis -> delegate_expression
rule 67   primary_expression_no_parenthesis -> typeof_expression
rule 68   primary_expression_no_parenthesis -> sizeof_expression
rule 69   primary_expression_no_parenthesis -> checked_expression
rule 70   primary_expression_no_parenthesis -> unchecked_expression
rule 71   delegate_expression -> DELEGATE '(' formal_parameter_list_opt ')' block
rule 72   parenthesized_expression -> '(' expression ')'
rule 73   member_access -> primary_expression '.' IDENTIFIER
rule 74   member_access -> primitive_type '.' IDENTIFIER
rule 75   @4 ->		/* empty */
rule 76   invocation_expression -> primary_expression_no_parenthesis opt_generic '(' @4 argument_list_opt ')'
rule 77   invocation_expression -> qualified_identifier_opt_generic '(' argument_list_opt ')'
rule 78   argument_list_opt ->		/* empty */
rule 79   argument_list_opt -> argument_list
rule 80   element_access -> primary_expression LEFT_BRACKET expression_list RIGHT_BRACKET
rule 81   element_access -> qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET
rule 82   expression_list_opt ->		/* empty */
rule 83   expression_list_opt -> expression_list
rule 84   expression_list -> expression
rule 85   expression_list -> expression_list COMMA expression
rule 86   this_access -> THIS
rule 87   base_access -> BASE '.' IDENTIFIER
rule 88   base_access -> BASE LEFT_BRACKET expression_list RIGHT_BRACKET
rule 89   post_increment_expression -> postfix_expression PLUSPLUS
rule 90   post_decrement_expression -> postfix_expression MINUSMINUS
rule 91   new_expression -> object_creation_expression
rule 92   object_creation_expression -> NEW type '(' argument_list_opt ')'
rule 93   array_creation_expression -> NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt
rule 94   array_creation_expression -> NEW array_type array_initializer
rule 95   array_initializer_opt ->		/* empty */
rule 96   array_initializer_opt -> array_initializer
rule 97   typeof_expression -> TYPEOF '(' type ')'
rule 98   typeof_expression -> TYPEOF '(' VOID ')'
rule 99   checked_expression -> CHECKED '(' expression ')'
rule 100  unchecked_expression -> UNCHECKED '(' expression ')'
rule 101  pointer_member_access -> postfix_expression ARROW IDENTIFIER
rule 102  addressof_expression -> '&' unary_expression
rule 103  sizeof_expression -> SIZEOF '(' type ')'
rule 104  postfix_expression -> primary_expression
rule 105  postfix_expression -> qualified_identifier
rule 106  postfix_expression -> post_increment_expression
rule 107  postfix_expression -> post_decrement_expression
rule 108  postfix_expression -> pointer_member_access
rule 109  unary_expression_not_plusminus -> postfix_expression
rule 110  unary_expression_not_plusminus -> '!' unary_expression
rule 111  unary_expression_not_plusminus -> '~' unary_expression
rule 112  unary_expression_not_plusminus -> cast_expression
rule 113  pre_increment_expression -> PLUSPLUS unary_expression
rule 114  pre_decrement_expression -> MINUSMINUS unary_expression
rule 115  unary_expression -> unary_expression_not_plusminus
rule 116  unary_expression -> '+' unary_expression
rule 117  unary_expression -> '-' unary_expression
rule 118  unary_expression -> '*' unary_expression
rule 119  unary_expression -> pre_increment_expression
rule 120  unary_expression -> pre_decrement_expression
rule 121  unary_expression -> addressof_expression
rule 122  cast_expression -> '(' expression ')' unary_expression_not_plusminus
rule 123  cast_expression -> '(' multiplicative_expression '*' ')' unary_expression
rule 124  cast_expression -> '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression
rule 125  cast_expression -> '(' primitive_type type_quals_opt ')' unary_expression
rule 126  cast_expression -> '(' VOID type_quals_opt ')' unary_expression
rule 127  type_quals_opt ->		/* empty */
rule 128  type_quals_opt -> type_quals
rule 129  type_quals -> type_qual
rule 130  type_quals -> type_quals type_qual
rule 131  type_qual -> rank_specifier
rule 132  type_qual -> '*'
rule 133  multiplicative_expression -> unary_expression
rule 134  multiplicative_expression -> multiplicative_expression '*' unary_expression
rule 135  multiplicative_expression -> multiplicative_expression '/' unary_expression
rule 136  multiplicative_expression -> multiplicative_expression '%' unary_expression
rule 137  additive_expression -> multiplicative_expression
rule 138  additive_expression -> additive_expression '+' multiplicative_expression
rule 139  additive_expression -> additive_expression '-' multiplicative_expression
rule 140  shift_expression -> additive_expression
rule 141  shift_expression -> shift_expression LTLT additive_expression
rule 142  shift_expression -> shift_expression GTGT additive_expression
rule 143  relational_expression -> shift_expression
rule 144  relational_expression -> relational_expression LT shift_expression
rule 145  relational_expression -> relational_expression GT shift_expression
rule 146  relational_expression -> relational_expression LEQ shift_expression
rule 147  relational_expression -> relational_expression GEQ shift_expression
rule 148  relational_expression -> relational_expression IS type
rule 149  relational_expression -> relational_expression AS type
rule 150  equality_expression -> relational_expression
rule 151  equality_expression -> equality_expression EQEQ relational_expression
rule 152  equality_expression -> equality_expression NOTEQ relational_expression
rule 153  and_expression -> equality_expression
rule 154  and_expression -> and_expression '&' equality_expression
rule 155  exclusive_or_expression -> and_expression
rule 156  exclusive_or_expression -> exclusive_or_expression '^' and_expression
rule 157  inclusive_or_expression -> exclusive_or_expression
rule 158  inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression
rule 159  conditional_and_expression -> inclusive_or_expression
rule 160  conditional_and_expression -> conditional_and_expression ANDAND inclusive_or_expression
rule 161  conditional_or_expression -> conditional_and_expression
rule 162  conditional_or_expression -> conditional_or_expression OROR conditional_and_expression
rule 163  conditional_expression -> conditional_or_expression
rule 164  conditional_expression -> conditional_or_expression '?' expression ':' expression
rule 165  assignment -> unary_expression assignment_operator expression
rule 166  assignment_operator -> '='
rule 167  assignment_operator -> PLUSEQ
rule 168  assignment_operator -> MINUSEQ
rule 169  assignment_operator -> STAREQ
rule 170  assignment_operator -> DIVEQ
rule 171  assignment_operator -> MODEQ
rule 172  assignment_operator -> XOREQ
rule 173  assignment_operator -> ANDEQ
rule 174  assignment_operator -> OREQ
rule 175  assignment_operator -> GTGTEQ
rule 176  assignment_operator -> LTLTEQ
rule 177  expression -> conditional_expression
rule 178  expression -> assignment
rule 179  constant_expression -> expression
rule 180  boolean_expression -> expression
rule 181  statement -> labeled_statement
rule 182  statement -> declaration_statement
rule 183  statement -> embedded_statement
rule 184  embedded_statement -> block
rule 185  embedded_statement -> empty_statement
rule 186  embedded_statement -> expression_statement
rule 187  embedded_statement -> selection_statement
rule 188  embedded_statement -> iteration_statement
rule 189  embedded_statement -> jump_statement
rule 190  embedded_statement -> try_statement
rule 191  embedded_statement -> checked_statement
rule 192  embedded_statement -> unchecked_statement
rule 193  embedded_statement -> lock_statement
rule 194  embedded_statement -> using_statement
rule 195  embedded_statement -> unsafe_statement
rule 196  embedded_statement -> fixed_statement
rule 197  block -> '{' statement_list_opt '}'
rule 198  statement_list_opt ->		/* empty */
rule 199  statement_list_opt -> statement_list
rule 200  statement_list -> statement
rule 201  statement_list -> statement_list statement
rule 202  empty_statement -> ';'
rule 203  labeled_statement -> IDENTIFIER ':' statement
rule 204  declaration_statement -> local_variable_declaration ';'
rule 205  declaration_statement -> local_constant_declaration ';'
rule 206  local_variable_declaration -> type variable_declarators
rule 207  variable_declarators -> variable_declarator
rule 208  variable_declarators -> variable_declarators COMMA variable_declarator
rule 209  variable_declarator -> IDENTIFIER
rule 210  variable_declarator -> IDENTIFIER '=' variable_initializer
rule 211  variable_initializer -> expression
rule 212  variable_initializer -> array_initializer
rule 213  variable_initializer -> stackalloc_initializer
rule 214  stackalloc_initializer -> STACKALLOC type LEFT_BRACKET expression RIGHT_BRACKET
rule 215  local_constant_declaration -> CONST type constant_declarators
rule 216  constant_declarators -> constant_declarator
rule 217  constant_declarators -> constant_declarators COMMA constant_declarator
rule 218  constant_declarator -> IDENTIFIER '=' constant_expression
rule 219  expression_statement -> statement_expression ';'
rule 220  statement_expression -> invocation_expression
rule 221  statement_expression -> object_creation_expression
rule 222  statement_expression -> assignment
rule 223  statement_expression -> post_increment_expression
rule 224  statement_expression -> post_decrement_expression
rule 225  statement_expression -> pre_increment_expression
rule 226  statement_expression -> pre_decrement_expression
rule 227  selection_statement -> if_statement
rule 228  selection_statement -> switch_statement
rule 229  if_statement -> IF ifpart opt_else
rule 230  ifpart -> '(' boolean_expression ')' embedded_statement
rule 231  opt_else -> ELSE embedded_statement
rule 232  opt_else ->		/* empty */
rule 233  switch_statement -> SWITCH '(' expression ')' switch_block
rule 234  switch_block -> '{' switch_sections_opt '}'
rule 235  switch_sections_opt ->		/* empty */
rule 236  switch_sections_opt -> switch_sections
rule 237  switch_sections -> switch_section
rule 238  switch_sections -> switch_sections switch_section
rule 239  switch_section -> switch_labels statement_list
rule 240  switch_labels -> switch_label
rule 241  switch_labels -> switch_labels switch_label
rule 242  switch_label -> CASE constant_expression ':'
rule 243  switch_label -> DEFAULT ':'
rule 244  iteration_statement -> while_statement
rule 245  iteration_statement -> do_statement
rule 246  iteration_statement -> for_statement
rule 247  iteration_statement -> foreach_statement
rule 248  unsafe_statement -> UNSAFE block
rule 249  while_statement -> WHILE '(' boolean_expression ')' embedded_statement
rule 250  do_statement -> DO embedded_statement WHILE '(' boolean_expression ')' ';'
rule 251  for_statement -> FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement
rule 252  for_initializer_opt ->		/* empty */
rule 253  for_initializer_opt -> for_initializer
rule 254  for_condition_opt ->		/* empty */
rule 255  for_condition_opt -> for_condition
rule 256  for_iterator_opt ->		/* empty */
rule 257  for_iterator_opt -> for_iterator
rule 258  for_initializer -> local_variable_declaration
rule 259  for_initializer -> statement_expression_list
rule 260  for_condition -> boolean_expression
rule 261  for_iterator -> statement_expression_list
rule 262  statement_expression_list -> statement_expression
rule 263  statement_expression_list -> statement_expression_list COMMA statement_expression
rule 264  foreach_statement -> FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement
rule 265  jump_statement -> break_statement
rule 266  jump_statement -> continue_statement
rule 267  jump_statement -> goto_statement
rule 268  jump_statement -> return_statement
rule 269  jump_statement -> throw_statement
rule 270  break_statement -> BREAK ';'
rule 271  continue_statement -> CONTINUE ';'
rule 272  goto_statement -> GOTO IDENTIFIER ';'
rule 273  goto_statement -> GOTO CASE constant_expression ';'
rule 274  goto_statement -> GOTO DEFAULT ';'
rule 275  return_statement -> RETURN expression_opt ';'
rule 276  expression_opt ->		/* empty */
rule 277  expression_opt -> expression
rule 278  throw_statement -> THROW expression_opt ';'
rule 279  try_statement -> TRY block catch_clauses
rule 280  try_statement -> TRY block finally_clause
rule 281  try_statement -> TRY block catch_clauses finally_clause
rule 282  catch_clauses -> catch_clause
rule 283  catch_clauses -> catch_clauses catch_clause
rule 284  catch_clause -> CATCH '(' type_name identifier_opt ')' block
rule 285  catch_clause -> CATCH block
rule 286  identifier_opt ->		/* empty */
rule 287  identifier_opt -> IDENTIFIER
rule 288  finally_clause -> FINALLY block
rule 289  checked_statement -> CHECKED block
rule 290  unchecked_statement -> UNCHECKED block
rule 291  lock_statement -> LOCK '(' expression ')' embedded_statement
rule 292  using_statement -> USING '(' resource_acquisition ')' embedded_statement
rule 293  resource_acquisition -> local_variable_declaration
rule 294  resource_acquisition -> expression
rule 295  fixed_statement -> FIXED '(' type fixed_pointer_declarators ')' embedded_statement
rule 296  fixed_pointer_declarators -> fixed_pointer_declarator
rule 297  fixed_pointer_declarators -> fixed_pointer_declarators COMMA fixed_pointer_declarator
rule 298  fixed_pointer_declarator -> IDENTIFIER '=' expression
rule 299  compilation_unit -> using_directives_opt attributes_opt
rule 300  compilation_unit -> using_directives_opt namespace_member_declarations
rule 301  using_directives_opt ->		/* empty */
rule 302  using_directives_opt -> using_directives
rule 303  attributes_opt ->		/* empty */
rule 304  attributes_opt -> attributes
rule 305  namespace_member_declarations_opt ->		/* empty */
rule 306  namespace_member_declarations_opt -> namespace_member_declarations
rule 307  @5 ->		/* empty */
rule 308  namespace_declaration -> attributes_opt NAMESPACE qualified_identifier @5 namespace_body comma_opt
rule 309  comma_opt ->		/* empty */
rule 310  comma_opt -> ';'
rule 311  qualified_identifier -> IDENTIFIER
rule 312  qualified_identifier -> qualifier IDENTIFIER
rule 313  qualifier -> IDENTIFIER '.'
rule 314  qualifier -> qualifier IDENTIFIER '.'
rule 315  namespace_body -> '{' using_directives_opt namespace_member_declarations_opt '}'
rule 316  using_directives -> using_directive
rule 317  using_directives -> using_directives using_directive
rule 318  using_directive -> using_alias_directive
rule 319  using_directive -> using_namespace_directive
rule 320  using_alias_directive -> USING IDENTIFIER '=' qualified_identifier ';'
rule 321  using_namespace_directive -> USING namespace_name ';'
rule 322  namespace_member_declarations -> namespace_member_declaration
rule 323  namespace_member_declarations -> namespace_member_declarations namespace_member_declaration
rule 324  namespace_member_declaration -> namespace_declaration
rule 325  namespace_member_declaration -> type_declaration
rule 326  type_declaration -> class_declaration
rule 327  type_declaration -> struct_declaration
rule 328  type_declaration -> interface_declaration
rule 329  type_declaration -> enum_declaration
rule 330  type_declaration -> delegate_declaration
rule 331  modifiers_opt ->		/* empty */
rule 332  modifiers_opt -> modifiers
rule 333  modifiers -> modifier
rule 334  modifiers -> modifiers modifier
rule 335  modifier -> ABSTRACT
rule 336  modifier -> EXTERN
rule 337  modifier -> INTERNAL
rule 338  modifier -> NEW
rule 339  modifier -> OVERRIDE
rule 340  modifier -> PRIVATE
rule 341  modifier -> PROTECTED
rule 342  modifier -> PUBLIC
rule 343  modifier -> READONLY
rule 344  modifier -> SEALED
rule 345  modifier -> STATIC
rule 346  modifier -> UNSAFE
rule 347  modifier -> VIRTUAL
rule 348  modifier -> VOLATILE
rule 349  modifier -> PARTIAL
rule 350  @6 ->		/* empty */
rule 351  class_declaration -> attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt
rule 352  class_base_opt ->		/* empty */
rule 353  class_base_opt -> class_base
rule 354  class_base -> ':' interface_type_list
rule 355  interface_type_list -> type_name
rule 356  interface_type_list -> interface_type_list COMMA type_name
rule 357  class_body -> '{' class_member_declarations_opt '}'
rule 358  class_member_declarations_opt ->		/* empty */
rule 359  class_member_declarations_opt -> class_member_declarations
rule 360  class_member_declarations -> class_member_declaration
rule 361  class_member_declarations -> class_member_declarations class_member_declaration
rule 362  class_member_declaration -> constant_declaration
rule 363  class_member_declaration -> field_declaration
rule 364  class_member_declaration -> method_declaration
rule 365  class_member_declaration -> property_declaration
rule 366  class_member_declaration -> event_declaration
rule 367  class_member_declaration -> indexer_declaration
rule 368  class_member_declaration -> operator_declaration
rule 369  class_member_declaration -> constructor_declaration
rule 370  class_member_declaration -> destructor_declaration
rule 371  class_member_declaration -> type_declaration
rule 372  constant_declaration -> attributes_opt modifiers_opt CONST type constant_declarators ';'
rule 373  field_declaration -> attributes_opt modifiers_opt type variable_declarators ';'
rule 374  method_declaration -> method_header method_body
rule 375  method_header -> attributes_opt modifiers_opt type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'
rule 376  method_header -> attributes_opt modifiers_opt VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'
rule 377  name_list -> IDENTIFIER
rule 378  name_list -> name_list COMMA IDENTIFIER
rule 379  opt_generic_fct ->		/* empty */
rule 380  opt_generic_fct -> GEN_LT name_list GEN_GT
rule 381  formal_parameter_list_opt ->		/* empty */
rule 382  formal_parameter_list_opt -> formal_parameter_list
rule 383  return_type -> type
rule 384  return_type -> VOID
rule 385  method_body -> block
rule 386  method_body -> ';'
rule 387  formal_parameter_list -> formal_parameter
rule 388  formal_parameter_list -> formal_parameter_list COMMA formal_parameter
rule 389  formal_parameter -> fixed_parameter
rule 390  formal_parameter -> parameter_array
rule 391  fixed_parameter -> attributes_opt parameter_modifier_opt type IDENTIFIER fixed_parameter_opt_default
rule 392  fixed_parameter_opt_default ->		/* empty */
rule 393  fixed_parameter_opt_default -> '=' expression
rule 394  parameter_modifier_opt ->		/* empty */
rule 395  parameter_modifier_opt -> REF
rule 396  parameter_modifier_opt -> OUT
rule 397  parameter_array -> attributes_opt PARAMS type IDENTIFIER
rule 398  property_declaration -> attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset
rule 399  accessor_declarations -> get_accessor_declaration set_accessor_declaration_opt
rule 400  accessor_declarations -> set_accessor_declaration get_accessor_declaration_opt
rule 401  accessor_declarations ->		/* empty */
rule 402  set_accessor_declaration_opt ->		/* empty */
rule 403  set_accessor_declaration_opt -> set_accessor_declaration
rule 404  get_accessor_declaration_opt ->		/* empty */
rule 405  get_accessor_declaration_opt -> get_accessor_declaration
rule 406  get_accessor_declaration -> attributes_opt GET EXIT_getset accessor_body ENTER_getset
rule 407  set_accessor_declaration -> attributes_opt SET EXIT_getset accessor_body ENTER_getset
rule 408  accessor_body -> block
rule 409  accessor_body -> ';'
rule 410  event_declaration -> attributes_opt modifiers_opt EVENT type variable_declarators ';'
rule 411  event_declaration -> attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl
rule 412  event_accessor_declarations -> add_accessor_declaration remove_accessor_declaration
rule 413  event_accessor_declarations -> remove_accessor_declaration add_accessor_declaration
rule 414  add_accessor_declaration -> attributes_opt ADD EXIT_accessor_decl block ENTER_accessor_decl
rule 415  remove_accessor_declaration -> attributes_opt REMOVE EXIT_accessor_decl block ENTER_accessor_decl
rule 416  indexer_declaration -> attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset
rule 417  indexer_declarator -> type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET
rule 418  indexer_declarator -> type qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET
rule 419  qualified_this -> qualifier THIS
rule 420  operator_declaration -> attributes_opt modifiers_opt operator_declarator operator_body
rule 421  operator_declarator -> overloadable_operator_declarator
rule 422  operator_declarator -> conversion_operator_declarator
rule 423  overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' type IDENTIFIER ')'
rule 424  overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'
rule 425  overloadable_operator -> '+'
rule 426  overloadable_operator -> '-'
rule 427  overloadable_operator -> '!'
rule 428  overloadable_operator -> '~'
rule 429  overloadable_operator -> PLUSPLUS
rule 430  overloadable_operator -> MINUSMINUS
rule 431  overloadable_operator -> TRUE
rule 432  overloadable_operator -> FALSE
rule 433  overloadable_operator -> '*'
rule 434  overloadable_operator -> '/'
rule 435  overloadable_operator -> '%'
rule 436  overloadable_operator -> '&'
rule 437  overloadable_operator -> '|'
rule 438  overloadable_operator -> '^'
rule 439  overloadable_operator -> LTLT
rule 440  overloadable_operator -> GTGT
rule 441  overloadable_operator -> EQEQ
rule 442  overloadable_operator -> NOTEQ
rule 443  overloadable_operator -> GT
rule 444  overloadable_operator -> LT
rule 445  overloadable_operator -> GEQ
rule 446  overloadable_operator -> LEQ
rule 447  conversion_operator_declarator -> IMPLICIT OPERATOR type '(' type IDENTIFIER ')'
rule 448  conversion_operator_declarator -> EXPLICIT OPERATOR type '(' type IDENTIFIER ')'
rule 449  constructor_declaration -> attributes_opt modifiers_opt constructor_declarator constructor_body
rule 450  constructor_declarator -> IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt
rule 451  constructor_initializer_opt ->		/* empty */
rule 452  constructor_initializer_opt -> constructor_initializer
rule 453  constructor_initializer -> ':' BASE '(' argument_list_opt ')'
rule 454  constructor_initializer -> ':' THIS '(' argument_list_opt ')'
rule 455  destructor_declaration -> attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block
rule 456  operator_body -> block
rule 457  operator_body -> ';'
rule 458  constructor_body -> block
rule 459  constructor_body -> ';'
rule 460  @7 ->		/* empty */
rule 461  struct_declaration -> attributes_opt modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt
rule 462  struct_interfaces_opt ->		/* empty */
rule 463  struct_interfaces_opt -> struct_interfaces
rule 464  struct_interfaces -> ':' interface_type_list
rule 465  struct_body -> '{' struct_member_declarations_opt '}'
rule 466  struct_member_declarations_opt ->		/* empty */
rule 467  struct_member_declarations_opt -> struct_member_declarations
rule 468  struct_member_declarations -> struct_member_declaration
rule 469  struct_member_declarations -> struct_member_declarations struct_member_declaration
rule 470  struct_member_declaration -> constant_declaration
rule 471  struct_member_declaration -> field_declaration
rule 472  struct_member_declaration -> method_declaration
rule 473  struct_member_declaration -> property_declaration
rule 474  struct_member_declaration -> event_declaration
rule 475  struct_member_declaration -> indexer_declaration
rule 476  struct_member_declaration -> operator_declaration
rule 477  struct_member_declaration -> constructor_declaration
rule 478  struct_member_declaration -> type_declaration
rule 479  @8 ->		/* empty */
rule 480  array_initializer -> '{' @8 variable_initializer_list_opt '}'
rule 481  variable_initializer_list_opt ->		/* empty */
rule 482  variable_initializer_list_opt -> variable_initializer_list opt_comma
rule 483  opt_comma -> COMMA
rule 484  opt_comma ->		/* empty */
rule 485  variable_initializer_list -> variable_initializer
rule 486  variable_initializer_list -> variable_initializer_list COMMA variable_initializer
rule 487  @9 ->		/* empty */
rule 488  interface_declaration -> attributes_opt modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt
rule 489  interface_base_opt ->		/* empty */
rule 490  interface_base_opt -> interface_base
rule 491  interface_base -> ':' interface_type_list
rule 492  interface_body -> '{' interface_member_declarations_opt '}'
rule 493  interface_member_declarations_opt ->		/* empty */
rule 494  interface_member_declarations_opt -> interface_member_declarations
rule 495  interface_member_declarations -> interface_member_declaration
rule 496  interface_member_declarations -> interface_member_declarations interface_member_declaration
rule 497  interface_member_declaration -> interface_method_declaration
rule 498  interface_member_declaration -> interface_property_declaration
rule 499  interface_member_declaration -> interface_event_declaration
rule 500  interface_member_declaration -> interface_indexer_declaration
rule 501  interface_method_declaration -> attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body
rule 502  interface_method_declaration -> attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body
rule 503  new_opt ->		/* empty */
rule 504  new_opt -> NEW
rule 505  interface_property_declaration -> attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset
rule 506  interface_indexer_declaration -> attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset
rule 507  interface_accessors -> attributes_opt GET interface_empty_body
rule 508  interface_accessors -> attributes_opt SET interface_empty_body
rule 509  interface_accessors -> attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body
rule 510  interface_accessors -> attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body
rule 511  interface_event_declaration -> attributes_opt new_opt EVENT type IDENTIFIER interface_empty_body
rule 512  interface_empty_body -> ';'
rule 513  interface_empty_body -> '{' '}'
rule 514  @10 ->		/* empty */
rule 515  enum_declaration -> attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt
rule 516  enum_base_opt ->		/* empty */
rule 517  enum_base_opt -> enum_base
rule 518  enum_base -> ':' integral_type
rule 519  enum_body -> '{' enum_member_declarations_opt '}'
rule 520  enum_body -> '{' enum_member_declarations COMMA '}'
rule 521  enum_member_declarations_opt ->		/* empty */
rule 522  enum_member_declarations_opt -> enum_member_declarations
rule 523  enum_member_declarations -> enum_member_declaration
rule 524  enum_member_declarations -> enum_member_declarations COMMA enum_member_declaration
rule 525  enum_member_declaration -> attributes_opt IDENTIFIER
rule 526  enum_member_declaration -> attributes_opt IDENTIFIER '=' constant_expression
rule 527  delegate_declaration -> attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'
rule 528  attributes -> attribute_sections
rule 529  attribute_sections -> attribute_section
rule 530  attribute_sections -> attribute_sections attribute_section
rule 531  attribute_section -> ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib
rule 532  attribute_section -> ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib
rule 533  attribute_target_specifier_opt ->		/* empty */
rule 534  attribute_target_specifier_opt -> attribute_target_specifier
rule 535  attribute_target_specifier -> attribute_target ':'
rule 536  attribute_target -> ASSEMBLY
rule 537  attribute_target -> FIELD
rule 538  attribute_target -> EVENT
rule 539  attribute_target -> METHOD
rule 540  attribute_target -> MODULE
rule 541  attribute_target -> PARAM
rule 542  attribute_target -> PROPERTY
rule 543  attribute_target -> RETURN
rule 544  attribute_target -> TYPE
rule 545  attribute_list -> attribute
rule 546  attribute_list -> attribute_list COMMA attribute
rule 547  attribute -> attribute_name attribute_arguments_opt
rule 548  attribute_arguments_opt ->		/* empty */
rule 549  attribute_arguments_opt -> attribute_arguments
rule 550  attribute_name -> type_name
rule 551  attribute_arguments -> '(' expression_list_opt ')'
rule 552  ENTER_attrib ->		/* empty */
rule 553  EXIT_attrib ->		/* empty */
rule 554  ENTER_accessor_decl ->		/* empty */
rule 555  EXIT_accessor_decl ->		/* empty */
rule 556  ENTER_getset ->		/* empty */
rule 557  EXIT_getset ->		/* empty */

Terminals, with rules where they appear

$ (-1)
'!' (33) 110 427
'%' (37) 136 435
'&' (38) 102 154 436
'(' (40) 71 72 76 77 92 97 98 99 100 103 122 123 124 125 126 230 233
    249 250 251 264 284 291 292 295 375 376 423 424 447 448 450 453
    454 455 501 502 527 551
')' (41) 71 72 76 77 92 97 98 99 100 103 122 123 124 125 126 230 233
    249 250 251 264 284 291 292 295 375 376 423 424 447 448 450 453
    454 455 501 502 527 551
'*' (42) 41 42 118 123 132 134 433
'+' (43) 116 138 425
'-' (45) 117 139 426
'.' (46) 73 74 87 313 314
'/' (47) 135 434
':' (58) 55 164 203 242 243 354 453 454 464 491 518 535
';' (59) 202 204 205 219 250 251 270 271 272 273 274 275 278 310 320
    321 372 373 386 409 410 457 459 512 527
'=' (61) 166 210 218 298 320 393 526
'?' (63) 164
'^' (94) 156 438
'{' (123) 197 234 315 357 398 411 416 465 480 492 505 506 513 519 520
'|' (124) 158 437
'}' (125) 197 234 315 357 398 411 416 465 480 492 505 506 513 519 520
'~' (126) 111 428 455
error (256)
THEN (258)
ELSE (259) 231
RANK_SPECIFIER (260) 48
IDENTIFIER (261) 55 73 74 87 101 203 209 210 218 264 272 287 298 311
    312 313 314 320 351 377 378 391 397 423 424 447 448 450 455 461
    488 501 502 505 511 515 525 526 527
INTEGER_LITERAL (262) 2
REAL_LITERAL (263) 3
CHARACTER_LITERAL (264) 4
STRING_LITERAL (265) 5
ABSTRACT (266) 335
AS (267) 149
BASE (268) 87 88 453
BOOL (269) 26
BREAK (270) 270
BYTE (271) 31
CASE (272) 242 273
CATCH (273) 284 285
CHAR (274) 38
CHECKED (275) 99 289
CLASS (276) 351
CONST (277) 215 372
CONTINUE (278) 271
DECIMAL (279) 29
DEFAULT (280) 243 274
DELEGATE (281) 71 527
DO (282) 250
DOUBLE (283) 40
ENUM (284) 515
EVENT (285) 410 411 511 538
EXPLICIT (286) 448
EXTERN (287) 336
FALSE (288) 8 432
FINALLY (289) 288
FIXED (290) 295
FLOAT (291) 39
FOR (292) 251
FOREACH (293) 264
GOTO (294) 272 273 274
IF (295) 229
IMPLICIT (296) 447
IN (297) 264
INT (298) 34
INTERFACE (299) 488
INTERNAL (300) 337
IS (301) 148
LOCK (302) 291
LONG (303) 36
NAMESPACE (304) 308
NEW (305) 92 93 94 338 504
NULL_LITERAL (306) 6
OPERATOR (307) 423 424 447 448
OUT (308) 54 396
OVERRIDE (309) 339
PARAMS (310) 397
PARTIAL (311) 349
PRIVATE (312) 340
PROTECTED (313) 341
PUBLIC (314) 342
READONLY (315) 343
REF (316) 53 395
RETURN (317) 275 543
SBYTE (318) 30
SEALED (319) 344
SHORT (320) 32
SIZEOF (321) 103
STACKALLOC (322) 214
STATIC (323) 345
STRUCT (324) 461
SWITCH (325) 233
THIS (326) 86 417 419 454 506
THROW (327) 278
TRUE (328) 7 431
TRY (329) 279 280 281
TYPEOF (330) 97 98
UINT (331) 35
ULONG (332) 37
UNCHECKED (333) 100 290
UNSAFE (334) 248 346
USHORT (335) 33
USING (336) 292 320 321
VIRTUAL (337) 347
VOID (338) 42 98 126 376 384 502
VOLATILE (339) 348
WHILE (340) 249 250
STRING (341)
OBJECT (342)
GEN_LT (343) 13 380
GEN_GT (344) 13 380
ASSEMBLY (345) 536
FIELD (346) 537
METHOD (347) 539
MODULE (348) 540
PARAM (349) 541
PROPERTY (350) 542
TYPE (351) 544
GET (352) 406 507 509 510
SET (353) 407 508 509 510
ADD (354) 414
REMOVE (355) 415
COMMA (356) 18 51 85 208 217 263 297 356 378 388 424 483 486 520 524
    532 546
LEFT_BRACKET (357) 80 81 88 93 214 417 418 506 531 532
RIGHT_BRACKET (358) 80 81 88 93 214 417 418 506 531 532
GT (359) 145 443
GTGT (360) 142 440
LT (361) 144 444
PLUSEQ (362) 167
MINUSEQ (363) 168
STAREQ (364) 169
DIVEQ (365) 170
MODEQ (366) 171
XOREQ (367) 172
ANDEQ (368) 173
OREQ (369) 174
LTLT (370) 141 439
GTGTEQ (371) 175
LTLTEQ (372) 176
EQEQ (373) 151 441
NOTEQ (374) 152 442
LEQ (375) 146 446
GEQ (376) 147 445
ANDAND (377) 160
OROR (378) 162
PLUSPLUS (379) 89 113 429
MINUSMINUS (380) 90 114 430
ARROW (381) 101

Nonterminals, with rules where they appear

literal (146)
    on left: 1 2 3 4 5 6, on right: 58
boolean_literal (147)
    on left: 7 8, on right: 1
namespace_name (148)
    on left: 9, on right: 321
type_name (149)
    on left: 10, on right: 22 284 355 356 550
opt_generic (150)
    on left: 11 13, on right: 15 76
@1 (151)
    on left: 12, on right: 13
qualified_identifier_opt_generic (152)
    on left: 15, on right: 10 77
@2 (153)
    on left: 14, on right: 15
genericlist (154)
    on left: 16 18, on right: 13 18
@3 (155)
    on left: 17, on right: 18
type (156)
    on left: 19 20, on right: 16 18 41 92 97 103 148 149 206 214 215
    264 295 372 373 375 383 391 397 398 410 411 417 418 423 424 447
    448 501 505 506 511
non_array_type (157)
    on left: 21 22, on right: 19 93
simple_type (158)
    on left: 23 24, on right: 21 44
primitive_type (159)
    on left: 25 26, on right: 23 74 125
numeric_type (160)
    on left: 27 28 29, on right: 25
integral_type (161)
    on left: 30 31 32 33 34 35 36 37 38, on right: 27 518
floating_point_type (162)
    on left: 39 40, on right: 28
pointer_type (163)
    on left: 41 42, on right: 24
array_type (164)
    on left: 43 44 45, on right: 20 43 94
rank_specifiers_opt (165)
    on left: 46 47, on right: 47 93
rank_specifier (166)
    on left: 48, on right: 43 44 45 47 124 131
variable_reference (167)
    on left: 49, on right: 53 54
argument_list (168)
    on left: 50 51, on right: 51 79
argument (169)
    on left: 52 53 54 55, on right: 50 51 55
primary_expression (170)
    on left: 56 57, on right: 73 80 104
primary_expression_no_parenthesis (171)
    on left: 58 59 60 61 62 63 64 65 66 67 68 69 70,
    on right: 57 76
delegate_expression (172)
    on left: 71, on right: 66
parenthesized_expression (173)
    on left: 72, on right: 56
member_access (174)
    on left: 73 74, on right: 60
invocation_expression (175)
    on left: 76 77, on right: 61 220
@4 (176)
    on left: 75, on right: 76
argument_list_opt (177)
    on left: 78 79, on right: 76 77 92 453 454
element_access (178)
    on left: 80 81, on right: 62
expression_list_opt (179)
    on left: 82 83, on right: 551
expression_list (180)
    on left: 84 85, on right: 80 81 83 85 88 93
this_access (181)
    on left: 86, on right: 63
base_access (182)
    on left: 87 88, on right: 64
post_increment_expression (183)
    on left: 89, on right: 106 223
post_decrement_expression (184)
    on left: 90, on right: 107 224
new_expression (185)
    on left: 91, on right: 65
object_creation_expression (186)
    on left: 92, on right: 91 221
array_creation_expression (187)
    on left: 93 94, on right: 59
array_initializer_opt (188)
    on left: 95 96, on right: 93
typeof_expression (189)
    on left: 97 98, on right: 67
checked_expression (190)
    on left: 99, on right: 69
unchecked_expression (191)
    on left: 100, on right: 70
pointer_member_access (192)
    on left: 101, on right: 108
addressof_expression (193)
    on left: 102, on right: 121
sizeof_expression (194)
    on left: 103, on right: 68
postfix_expression (195)
    on left: 104 105 106 107 108, on right: 89 90 101 109
unary_expression_not_plusminus (196)
    on left: 109 110 111 112, on right: 115 122
pre_increment_expression (197)
    on left: 113, on right: 119 225
pre_decrement_expression (198)
    on left: 114, on right: 120 226
unary_expression (199)
    on left: 115 116 117 118 119 120 121, on right: 102 110 111 113
    114 116 117 118 123 124 125 126 133 134 135 136 165
cast_expression (200)
    on left: 122 123 124 125 126, on right: 112
type_quals_opt (201)
    on left: 127 128, on right: 124 125 126
type_quals (202)
    on left: 129 130, on right: 128 130
type_qual (203)
    on left: 131 132, on right: 129 130
multiplicative_expression (204)
    on left: 133 134 135 136, on right: 123 134 135 136 137 138 139
additive_expression (205)
    on left: 137 138 139, on right: 138 139 140 141 142
shift_expression (206)
    on left: 140 141 142, on right: 141 142 143 144 145 146 147
relational_expression (207)
    on left: 143 144 145 146 147 148 149, on right: 144 145 146 147
    148 149 150 151 152
equality_expression (208)
    on left: 150 151 152, on right: 151 152 153 154
and_expression (209)
    on left: 153 154, on right: 154 155 156
exclusive_or_expression (210)
    on left: 155 156, on right: 156 157 158
inclusive_or_expression (211)
    on left: 157 158, on right: 158 159 160
conditional_and_expression (212)
    on left: 159 160, on right: 160 161 162
conditional_or_expression (213)
    on left: 161 162, on right: 162 163 164
conditional_expression (214)
    on left: 163 164, on right: 177
assignment (215)
    on left: 165, on right: 178 222
assignment_operator (216)
    on left: 166 167 168 169 170 171 172 173 174 175 176,
    on right: 165
expression (217)
    on left: 177 178, on right: 49 52 72 84 85 99 100 122 164 165 179
    180 211 214 233 264 277 291 294 298 393
constant_expression (218)
    on left: 179, on right: 218 242 273 526
boolean_expression (219)
    on left: 180, on right: 230 249 250 260
statement (220)
    on left: 181 182 183, on right: 200 201 203
embedded_statement (221)
    on left: 184 185 186 187 188 189 190 191 192 193 194 195 196,
    on right: 183 230 231 249 250 251 264 291 292 295
block (222)
    on left: 197, on right: 71 184 248 279 280 281 284 285 288 289
    290 385 408 414 415 455 456 458
statement_list_opt (223)
    on left: 198 199, on right: 197
statement_list (224)
    on left: 200 201, on right: 199 201 239
empty_statement (225)
    on left: 202, on right: 185
labeled_statement (226)
    on left: 203, on right: 181
declaration_statement (227)
    on left: 204 205, on right: 182
local_variable_declaration (228)
    on left: 206, on right: 204 258 293
variable_declarators (229)
    on left: 207 208, on right: 206 208 373 410
variable_declarator (230)
    on left: 209 210, on right: 207 208
variable_initializer (231)
    on left: 211 212 213, on right: 210 485 486
stackalloc_initializer (232)
    on left: 214, on right: 213
local_constant_declaration (233)
    on left: 215, on right: 205
constant_declarators (234)
    on left: 216 217, on right: 215 217 372
constant_declarator (235)
    on left: 218, on right: 216 217
expression_statement (236)
    on left: 219, on right: 186
statement_expression (237)
    on left: 220 221 222 223 224 225 226, on right: 219 262 263
selection_statement (238)
    on left: 227 228, on right: 187
if_statement (239)
    on left: 229, on right: 227
ifpart (240)
    on left: 230, on right: 229
opt_else (241)
    on left: 231 232, on right: 229
switch_statement (242)
    on left: 233, on right: 228
switch_block (243)
    on left: 234, on right: 233
switch_sections_opt (244)
    on left: 235 236, on right: 234
switch_sections (245)
    on left: 237 238, on right: 236 238
switch_section (246)
    on left: 239, on right: 237 238
switch_labels (247)
    on left: 240 241, on right: 239 241
switch_label (248)
    on left: 242 243, on right: 240 241
iteration_statement (249)
    on left: 244 245 246 247, on right: 188
unsafe_statement (250)
    on left: 248, on right: 195
while_statement (251)
    on left: 249, on right: 244
do_statement (252)
    on left: 250, on right: 245
for_statement (253)
    on left: 251, on right: 246
for_initializer_opt (254)
    on left: 252 253, on right: 251
for_condition_opt (255)
    on left: 254 255, on right: 251
for_iterator_opt (256)
    on left: 256 257, on right: 251
for_initializer (257)
    on left: 258 259, on right: 253
for_condition (258)
    on left: 260, on right: 255
for_iterator (259)
    on left: 261, on right: 257
statement_expression_list (260)
    on left: 262 263, on right: 259 261 263
foreach_statement (261)
    on left: 264, on right: 247
jump_statement (262)
    on left: 265 266 267 268 269, on right: 189
break_statement (263)
    on left: 270, on right: 265
continue_statement (264)
    on left: 271, on right: 266
goto_statement (265)
    on left: 272 273 274, on right: 267
return_statement (266)
    on left: 275, on right: 268
expression_opt (267)
    on left: 276 277, on right: 275 278
throw_statement (268)
    on left: 278, on right: 269
try_statement (269)
    on left: 279 280 281, on right: 190
catch_clauses (270)
    on left: 282 283, on right: 279 281 283
catch_clause (271)
    on left: 284 285, on right: 282 283
identifier_opt (272)
    on left: 286 287, on right: 284
finally_clause (273)
    on left: 288, on right: 280 281
checked_statement (274)
    on left: 289, on right: 191
unchecked_statement (275)
    on left: 290, on right: 192
lock_statement (276)
    on left: 291, on right: 193
using_statement (277)
    on left: 292, on right: 194
resource_acquisition (278)
    on left: 293 294, on right: 292
fixed_statement (279)
    on left: 295, on right: 196
fixed_pointer_declarators (280)
    on left: 296 297, on right: 295 297
fixed_pointer_declarator (281)
    on left: 298, on right: 296 297
compilation_unit (282)
    on left: 299 300
using_directives_opt (283)
    on left: 301 302, on right: 299 300 315
attributes_opt (284)
    on left: 303 304, on right: 299 308 351 372 373 375 376 391 397
    398 406 407 410 411 414 415 416 420 449 455 461 488 501 502 505
    506 507 508 509 510 511 515 525 526 527
namespace_member_declarations_opt (285)
    on left: 305 306, on right: 315
namespace_declaration (286)
    on left: 308, on right: 324
@5 (287)
    on left: 307, on right: 308
comma_opt (288)
    on left: 309 310, on right: 308 351 461 488 515
qualified_identifier (289)
    on left: 311 312, on right: 9 15 45 81 105 124 308 320 375 376
    398 411
qualifier (290)
    on left: 313 314, on right: 312 314 419
namespace_body (291)
    on left: 315, on right: 308
using_directives (292)
    on left: 316 317, on right: 302 317
using_directive (293)
    on left: 318 319, on right: 316 317
using_alias_directive (294)
    on left: 320, on right: 318
using_namespace_directive (295)
    on left: 321, on right: 319
namespace_member_declarations (296)
    on left: 322 323, on right: 300 306 323
namespace_member_declaration (297)
    on left: 324 325, on right: 322 323
type_declaration (298)
    on left: 326 327 328 329 330, on right: 325 371 478
modifiers_opt (299)
    on left: 331 332, on right: 351 372 373 375 376 398 410 411 416
    420 449 455 461 488 515 527
modifiers (300)
    on left: 333 334, on right: 332 334
modifier (301)
    on left: 335 336 337 338 339 340 341 342 343 344 345 346 347 348
    349, on right: 333 334
class_declaration (302)
    on left: 351, on right: 326
@6 (303)
    on left: 350, on right: 351
class_base_opt (304)
    on left: 352 353, on right: 351
class_base (305)
    on left: 354, on right: 353
interface_type_list (306)
    on left: 355 356, on right: 354 356 464 491
class_body (307)
    on left: 357, on right: 351
class_member_declarations_opt (308)
    on left: 358 359, on right: 357
class_member_declarations (309)
    on left: 360 361, on right: 359 361
class_member_declaration (310)
    on left: 362 363 364 365 366 367 368 369 370 371,
    on right: 360 361
constant_declaration (311)
    on left: 372, on right: 362 470
field_declaration (312)
    on left: 373, on right: 363 471
method_declaration (313)
    on left: 374, on right: 364 472
method_header (314)
    on left: 375 376, on right: 374
name_list (315)
    on left: 377 378, on right: 378 380
opt_generic_fct (316)
    on left: 379 380, on right: 351 375 376 527
formal_parameter_list_opt (317)
    on left: 381 382, on right: 71 375 376 450 501 502 527
return_type (318)
    on left: 383 384, on right: 527
method_body (319)
    on left: 385 386, on right: 374
formal_parameter_list (320)
    on left: 387 388, on right: 382 388 417 418 506
formal_parameter (321)
    on left: 389 390, on right: 387 388
fixed_parameter (322)
    on left: 391, on right: 389
fixed_parameter_opt_default (323)
    on left: 392 393, on right: 391
parameter_modifier_opt (324)
    on left: 394 395 396, on right: 391
parameter_array (325)
    on left: 397, on right: 390
property_declaration (326)
    on left: 398, on right: 365 473
accessor_declarations (327)
    on left: 399 400 401, on right: 398 416
set_accessor_declaration_opt (328)
    on left: 402 403, on right: 399
get_accessor_declaration_opt (329)
    on left: 404 405, on right: 400
get_accessor_declaration (330)
    on left: 406, on right: 399 405
set_accessor_declaration (331)
    on left: 407, on right: 400 403
accessor_body (332)
    on left: 408 409, on right: 406 407
event_declaration (333)
    on left: 410 411, on right: 366 474
event_accessor_declarations (334)
    on left: 412 413, on right: 411
add_accessor_declaration (335)
    on left: 414, on right: 412 413
remove_accessor_declaration (336)
    on left: 415, on right: 412 413
indexer_declaration (337)
    on left: 416, on right: 367 475
indexer_declarator (338)
    on left: 417 418, on right: 416
qualified_this (339)
    on left: 419, on right: 418
operator_declaration (340)
    on left: 420, on right: 368 476
operator_declarator (341)
    on left: 421 422, on right: 420
overloadable_operator_declarator (342)
    on left: 423 424, on right: 421
overloadable_operator (343)
    on left: 425 426 427 428 429 430 431 432 433 434 435 436 437 438
    439 440 441 442 443 444 445 446, on right: 423 424
conversion_operator_declarator (344)
    on left: 447 448, on right: 422
constructor_declaration (345)
    on left: 449, on right: 369 477
constructor_declarator (346)
    on left: 450, on right: 449
constructor_initializer_opt (347)
    on left: 451 452, on right: 450
constructor_initializer (348)
    on left: 453 454, on right: 452
destructor_declaration (349)
    on left: 455, on right: 370
operator_body (350)
    on left: 456 457, on right: 420
constructor_body (351)
    on left: 458 459, on right: 449
struct_declaration (352)
    on left: 461, on right: 327
@7 (353)
    on left: 460, on right: 461
struct_interfaces_opt (354)
    on left: 462 463, on right: 461
struct_interfaces (355)
    on left: 464, on right: 463
struct_body (356)
    on left: 465, on right: 461
struct_member_declarations_opt (357)
    on left: 466 467, on right: 465
struct_member_declarations (358)
    on left: 468 469, on right: 467 469
struct_member_declaration (359)
    on left: 470 471 472 473 474 475 476 477 478, on right: 468 469
array_initializer (360)
    on left: 480, on right: 94 96 212
@8 (361)
    on left: 479, on right: 480
variable_initializer_list_opt (362)
    on left: 481 482, on right: 480
opt_comma (363)
    on left: 483 484, on right: 482
variable_initializer_list (364)
    on left: 485 486, on right: 482 486
interface_declaration (365)
    on left: 488, on right: 328
@9 (366)
    on left: 487, on right: 488
interface_base_opt (367)
    on left: 489 490, on right: 488
interface_base (368)
    on left: 491, on right: 490
interface_body (369)
    on left: 492, on right: 488
interface_member_declarations_opt (370)
    on left: 493 494, on right: 492
interface_member_declarations (371)
    on left: 495 496, on right: 494 496
interface_member_declaration (372)
    on left: 497 498 499 500, on right: 495 496
interface_method_declaration (373)
    on left: 501 502, on right: 497
new_opt (374)
    on left: 503 504, on right: 501 502 505 506 511
interface_property_declaration (375)
    on left: 505, on right: 498
interface_indexer_declaration (376)
    on left: 506, on right: 500
interface_accessors (377)
    on left: 507 508 509 510, on right: 505 506
interface_event_declaration (378)
    on left: 511, on right: 499
interface_empty_body (379)
    on left: 512 513, on right: 501 502 507 508 509 510 511
enum_declaration (380)
    on left: 515, on right: 329
@10 (381)
    on left: 514, on right: 515
enum_base_opt (382)
    on left: 516 517, on right: 515
enum_base (383)
    on left: 518, on right: 517
enum_body (384)
    on left: 519 520, on right: 515
enum_member_declarations_opt (385)
    on left: 521 522, on right: 519
enum_member_declarations (386)
    on left: 523 524, on right: 520 522 524
enum_member_declaration (387)
    on left: 525 526, on right: 523 524
delegate_declaration (388)
    on left: 527, on right: 330
attributes (389)
    on left: 528, on right: 304
attribute_sections (390)
    on left: 529 530, on right: 528 530
attribute_section (391)
    on left: 531 532, on right: 529 530
attribute_target_specifier_opt (392)
    on left: 533 534, on right: 531 532
attribute_target_specifier (393)
    on left: 535, on right: 534
attribute_target (394)
    on left: 536 537 538 539 540 541 542 543 544, on right: 535
attribute_list (395)
    on left: 545 546, on right: 531 532 546
attribute (396)
    on left: 547, on right: 545 546
attribute_arguments_opt (397)
    on left: 548 549, on right: 547
attribute_name (398)
    on left: 550, on right: 547
attribute_arguments (399)
    on left: 551, on right: 549
ENTER_attrib (400)
    on left: 552, on right: 531 532
EXIT_attrib (401)
    on left: 553, on right: 531 532
ENTER_accessor_decl (402)
    on left: 554, on right: 411 414 415
EXIT_accessor_decl (403)
    on left: 555, on right: 411 414 415
ENTER_getset (404)
    on left: 556, on right: 398 406 407 416 505 506
EXIT_getset (405)
    on left: 557, on right: 398 406 407 416 505 506


state 0

    USING	shift, and go to state 1

    $default	reduce using rule 301 (using_directives_opt)

    compilation_unit	go to state 939
    using_directives_opt	go to state 2
    using_directives	go to state 3
    using_directive	go to state 4
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 1

    using_alias_directive  ->  USING . IDENTIFIER '=' qualified_identifier ';'   (rule 320)
    using_namespace_directive  ->  USING . namespace_name ';'   (rule 321)

    IDENTIFIER	shift, and go to state 7

    namespace_name	go to state 8
    qualified_identifier	go to state 9
    qualifier	go to state 10



state 2

    compilation_unit  ->  using_directives_opt . attributes_opt   (rule 299)
    compilation_unit  ->  using_directives_opt . namespace_member_declarations   (rule 300)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 11
    namespace_declaration	go to state 12
    namespace_member_declarations	go to state 13
    namespace_member_declaration	go to state 14
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 3

    using_directives_opt  ->  using_directives .   (rule 302)
    using_directives  ->  using_directives . using_directive   (rule 317)

    USING	shift, and go to state 1

    $default	reduce using rule 302 (using_directives_opt)

    using_directive	go to state 25
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 4

    using_directives  ->  using_directive .   (rule 316)

    $default	reduce using rule 316 (using_directives)



state 5

    using_directive  ->  using_alias_directive .   (rule 318)

    $default	reduce using rule 318 (using_directive)



state 6

    using_directive  ->  using_namespace_directive .   (rule 319)

    $default	reduce using rule 319 (using_directive)



state 7

    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)
    using_alias_directive  ->  USING IDENTIFIER . '=' qualified_identifier ';'   (rule 320)

    '.' 	shift, and go to state 26
    '=' 	shift, and go to state 27

    $default	reduce using rule 311 (qualified_identifier)



state 8

    using_namespace_directive  ->  USING namespace_name . ';'   (rule 321)

    ';' 	shift, and go to state 28



state 9

    namespace_name  ->  qualified_identifier .   (rule 9)

    $default	reduce using rule 9 (namespace_name)



state 10

    qualified_identifier  ->  qualifier . IDENTIFIER   (rule 312)
    qualifier  ->  qualifier . IDENTIFIER '.'   (rule 314)

    IDENTIFIER	shift, and go to state 29



state 11

    compilation_unit  ->  using_directives_opt attributes_opt .   (rule 299)
    namespace_declaration  ->  attributes_opt . NAMESPACE qualified_identifier @5 namespace_body comma_opt   (rule 308)
    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NAMESPACE	shift, and go to state 33
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PARTIAL	shift, and go to state 36
    PRIVATE	shift, and go to state 37
    PROTECTED	shift, and go to state 38
    PUBLIC	shift, and go to state 39
    READONLY	shift, and go to state 40
    SEALED	shift, and go to state 41
    STATIC	shift, and go to state 42
    UNSAFE	shift, and go to state 43
    VIRTUAL	shift, and go to state 44
    VOLATILE	shift, and go to state 45

    $   	reduce using rule 299 (compilation_unit)
    $default	reduce using rule 331 (modifiers_opt)

    modifiers_opt	go to state 46
    modifiers	go to state 47
    modifier	go to state 48



state 12

    namespace_member_declaration  ->  namespace_declaration .   (rule 324)

    $default	reduce using rule 324 (namespace_member_declaration)



state 13

    compilation_unit  ->  using_directives_opt namespace_member_declarations .   (rule 300)
    namespace_member_declarations  ->  namespace_member_declarations . namespace_member_declaration   (rule 323)

    $   	reduce using rule 300 (compilation_unit)
    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 49
    namespace_declaration	go to state 12
    namespace_member_declaration	go to state 50
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 14

    namespace_member_declarations  ->  namespace_member_declaration .   (rule 322)

    $default	reduce using rule 322 (namespace_member_declarations)



state 15

    namespace_member_declaration  ->  type_declaration .   (rule 325)

    $default	reduce using rule 325 (namespace_member_declaration)



state 16

    type_declaration  ->  class_declaration .   (rule 326)

    $default	reduce using rule 326 (type_declaration)



state 17

    type_declaration  ->  struct_declaration .   (rule 327)

    $default	reduce using rule 327 (type_declaration)



state 18

    type_declaration  ->  interface_declaration .   (rule 328)

    $default	reduce using rule 328 (type_declaration)



state 19

    type_declaration  ->  enum_declaration .   (rule 329)

    $default	reduce using rule 329 (type_declaration)



state 20

    type_declaration  ->  delegate_declaration .   (rule 330)

    $default	reduce using rule 330 (type_declaration)



state 21

    attributes_opt  ->  attributes .   (rule 304)

    $default	reduce using rule 304 (attributes_opt)



state 22

    attributes  ->  attribute_sections .   (rule 528)
    attribute_sections  ->  attribute_sections . attribute_section   (rule 530)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 528 (attributes)

    attribute_section	go to state 51
    ENTER_attrib	go to state 24



state 23

    attribute_sections  ->  attribute_section .   (rule 529)

    $default	reduce using rule 529 (attribute_sections)



state 24

    attribute_section  ->  ENTER_attrib . LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib   (rule 531)
    attribute_section  ->  ENTER_attrib . LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 532)

    LEFT_BRACKET	shift, and go to state 52



state 25

    using_directives  ->  using_directives using_directive .   (rule 317)

    $default	reduce using rule 317 (using_directives)



state 26

    qualifier  ->  IDENTIFIER '.' .   (rule 313)

    $default	reduce using rule 313 (qualifier)



state 27

    using_alias_directive  ->  USING IDENTIFIER '=' . qualified_identifier ';'   (rule 320)

    IDENTIFIER	shift, and go to state 53

    qualified_identifier	go to state 54
    qualifier	go to state 10



state 28

    using_namespace_directive  ->  USING namespace_name ';' .   (rule 321)

    $default	reduce using rule 321 (using_namespace_directive)



state 29

    qualified_identifier  ->  qualifier IDENTIFIER .   (rule 312)
    qualifier  ->  qualifier IDENTIFIER . '.'   (rule 314)

    '.' 	shift, and go to state 55

    $default	reduce using rule 312 (qualified_identifier)



state 30

    modifier  ->  ABSTRACT .   (rule 335)

    $default	reduce using rule 335 (modifier)



state 31

    modifier  ->  EXTERN .   (rule 336)

    $default	reduce using rule 336 (modifier)



state 32

    modifier  ->  INTERNAL .   (rule 337)

    $default	reduce using rule 337 (modifier)



state 33

    namespace_declaration  ->  attributes_opt NAMESPACE . qualified_identifier @5 namespace_body comma_opt   (rule 308)

    IDENTIFIER	shift, and go to state 53

    qualified_identifier	go to state 56
    qualifier	go to state 10



state 34

    modifier  ->  NEW .   (rule 338)

    $default	reduce using rule 338 (modifier)



state 35

    modifier  ->  OVERRIDE .   (rule 339)

    $default	reduce using rule 339 (modifier)



state 36

    modifier  ->  PARTIAL .   (rule 349)

    $default	reduce using rule 349 (modifier)



state 37

    modifier  ->  PRIVATE .   (rule 340)

    $default	reduce using rule 340 (modifier)



state 38

    modifier  ->  PROTECTED .   (rule 341)

    $default	reduce using rule 341 (modifier)



state 39

    modifier  ->  PUBLIC .   (rule 342)

    $default	reduce using rule 342 (modifier)



state 40

    modifier  ->  READONLY .   (rule 343)

    $default	reduce using rule 343 (modifier)



state 41

    modifier  ->  SEALED .   (rule 344)

    $default	reduce using rule 344 (modifier)



state 42

    modifier  ->  STATIC .   (rule 345)

    $default	reduce using rule 345 (modifier)



state 43

    modifier  ->  UNSAFE .   (rule 346)

    $default	reduce using rule 346 (modifier)



state 44

    modifier  ->  VIRTUAL .   (rule 347)

    $default	reduce using rule 347 (modifier)



state 45

    modifier  ->  VOLATILE .   (rule 348)

    $default	reduce using rule 348 (modifier)



state 46

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    CLASS	shift, and go to state 57
    DELEGATE	shift, and go to state 58
    ENUM	shift, and go to state 59
    INTERFACE	shift, and go to state 60
    STRUCT	shift, and go to state 61



state 47

    modifiers_opt  ->  modifiers .   (rule 332)
    modifiers  ->  modifiers . modifier   (rule 334)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PARTIAL	shift, and go to state 36
    PRIVATE	shift, and go to state 37
    PROTECTED	shift, and go to state 38
    PUBLIC	shift, and go to state 39
    READONLY	shift, and go to state 40
    SEALED	shift, and go to state 41
    STATIC	shift, and go to state 42
    UNSAFE	shift, and go to state 43
    VIRTUAL	shift, and go to state 44
    VOLATILE	shift, and go to state 45

    $default	reduce using rule 332 (modifiers_opt)

    modifier	go to state 62



state 48

    modifiers  ->  modifier .   (rule 333)

    $default	reduce using rule 333 (modifiers)



state 49

    namespace_declaration  ->  attributes_opt . NAMESPACE qualified_identifier @5 namespace_body comma_opt   (rule 308)
    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NAMESPACE	shift, and go to state 33
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PARTIAL	shift, and go to state 36
    PRIVATE	shift, and go to state 37
    PROTECTED	shift, and go to state 38
    PUBLIC	shift, and go to state 39
    READONLY	shift, and go to state 40
    SEALED	shift, and go to state 41
    STATIC	shift, and go to state 42
    UNSAFE	shift, and go to state 43
    VIRTUAL	shift, and go to state 44
    VOLATILE	shift, and go to state 45

    $default	reduce using rule 331 (modifiers_opt)

    modifiers_opt	go to state 46
    modifiers	go to state 47
    modifier	go to state 48



state 50

    namespace_member_declarations  ->  namespace_member_declarations namespace_member_declaration .   (rule 323)

    $default	reduce using rule 323 (namespace_member_declarations)



state 51

    attribute_sections  ->  attribute_sections attribute_section .   (rule 530)

    $default	reduce using rule 530 (attribute_sections)



state 52

    attribute_section  ->  ENTER_attrib LEFT_BRACKET . attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib   (rule 531)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET . attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 532)

    EVENT	shift, and go to state 63
    RETURN	shift, and go to state 64
    ASSEMBLY	shift, and go to state 65
    FIELD	shift, and go to state 66
    METHOD	shift, and go to state 67
    MODULE	shift, and go to state 68
    PARAM	shift, and go to state 69
    PROPERTY	shift, and go to state 70
    TYPE	shift, and go to state 71

    $default	reduce using rule 533 (attribute_target_specifier_opt)

    attribute_target_specifier_opt	go to state 72
    attribute_target_specifier	go to state 73
    attribute_target	go to state 74



state 53

    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)

    '.' 	shift, and go to state 26

    $default	reduce using rule 311 (qualified_identifier)



state 54

    using_alias_directive  ->  USING IDENTIFIER '=' qualified_identifier . ';'   (rule 320)

    ';' 	shift, and go to state 75



state 55

    qualifier  ->  qualifier IDENTIFIER '.' .   (rule 314)

    $default	reduce using rule 314 (qualifier)



state 56

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier . @5 namespace_body comma_opt   (rule 308)

    $default	reduce using rule 307 (@5)

    @5  	go to state 76



state 57

    class_declaration  ->  attributes_opt modifiers_opt CLASS . IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)

    IDENTIFIER	shift, and go to state 77



state 58

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE . return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 91

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 94
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10
    return_type	go to state 104



state 59

    enum_declaration  ->  attributes_opt modifiers_opt ENUM . IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)

    IDENTIFIER	shift, and go to state 105



state 60

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE . IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)

    IDENTIFIER	shift, and go to state 106



state 61

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT . IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)

    IDENTIFIER	shift, and go to state 107



state 62

    modifiers  ->  modifiers modifier .   (rule 334)

    $default	reduce using rule 334 (modifiers)



state 63

    attribute_target  ->  EVENT .   (rule 538)

    $default	reduce using rule 538 (attribute_target)



state 64

    attribute_target  ->  RETURN .   (rule 543)

    $default	reduce using rule 543 (attribute_target)



state 65

    attribute_target  ->  ASSEMBLY .   (rule 536)

    $default	reduce using rule 536 (attribute_target)



state 66

    attribute_target  ->  FIELD .   (rule 537)

    $default	reduce using rule 537 (attribute_target)



state 67

    attribute_target  ->  METHOD .   (rule 539)

    $default	reduce using rule 539 (attribute_target)



state 68

    attribute_target  ->  MODULE .   (rule 540)

    $default	reduce using rule 540 (attribute_target)



state 69

    attribute_target  ->  PARAM .   (rule 541)

    $default	reduce using rule 541 (attribute_target)



state 70

    attribute_target  ->  PROPERTY .   (rule 542)

    $default	reduce using rule 542 (attribute_target)



state 71

    attribute_target  ->  TYPE .   (rule 544)

    $default	reduce using rule 544 (attribute_target)



state 72

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt . attribute_list RIGHT_BRACKET EXIT_attrib   (rule 531)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt . attribute_list COMMA RIGHT_BRACKET EXIT_attrib   (rule 532)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 108
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10
    attribute_list	go to state 110
    attribute	go to state 111
    attribute_name	go to state 112



state 73

    attribute_target_specifier_opt  ->  attribute_target_specifier .   (rule 534)

    $default	reduce using rule 534 (attribute_target_specifier_opt)



state 74

    attribute_target_specifier  ->  attribute_target . ':'   (rule 535)

    ':' 	shift, and go to state 113



state 75

    using_alias_directive  ->  USING IDENTIFIER '=' qualified_identifier ';' .   (rule 320)

    $default	reduce using rule 320 (using_alias_directive)



state 76

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier @5 . namespace_body comma_opt   (rule 308)

    '{' 	shift, and go to state 114

    namespace_body	go to state 115



state 77

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER . opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)

    GEN_LT	shift, and go to state 116

    $default	reduce using rule 379 (opt_generic_fct)

    opt_generic_fct	go to state 117



state 78

    primitive_type  ->  BOOL .   (rule 26)

    $default	reduce using rule 26 (primitive_type)



state 79

    integral_type  ->  BYTE .   (rule 31)

    $default	reduce using rule 31 (integral_type)



state 80

    integral_type  ->  CHAR .   (rule 38)

    $default	reduce using rule 38 (integral_type)



state 81

    numeric_type  ->  DECIMAL .   (rule 29)

    $default	reduce using rule 29 (numeric_type)



state 82

    floating_point_type  ->  DOUBLE .   (rule 40)

    $default	reduce using rule 40 (floating_point_type)



state 83

    floating_point_type  ->  FLOAT .   (rule 39)

    $default	reduce using rule 39 (floating_point_type)



state 84

    integral_type  ->  INT .   (rule 34)

    $default	reduce using rule 34 (integral_type)



state 85

    integral_type  ->  LONG .   (rule 36)

    $default	reduce using rule 36 (integral_type)



state 86

    integral_type  ->  SBYTE .   (rule 30)

    $default	reduce using rule 30 (integral_type)



state 87

    integral_type  ->  SHORT .   (rule 32)

    $default	reduce using rule 32 (integral_type)



state 88

    integral_type  ->  UINT .   (rule 35)

    $default	reduce using rule 35 (integral_type)



state 89

    integral_type  ->  ULONG .   (rule 37)

    $default	reduce using rule 37 (integral_type)



state 90

    integral_type  ->  USHORT .   (rule 33)

    $default	reduce using rule 33 (integral_type)



state 91

    pointer_type  ->  VOID . '*'   (rule 42)
    return_type  ->  VOID .   (rule 384)

    '*' 	shift, and go to state 118

    $default	reduce using rule 384 (return_type)



state 92

    non_array_type  ->  type_name .   (rule 22)

    $default	reduce using rule 22 (non_array_type)



state 93

    type_name  ->  qualified_identifier_opt_generic .   (rule 10)

    $default	reduce using rule 10 (type_name)



state 94

    pointer_type  ->  type . '*'   (rule 41)
    return_type  ->  type .   (rule 383)

    '*' 	shift, and go to state 119

    $default	reduce using rule 383 (return_type)



state 95

    type  ->  non_array_type .   (rule 19)

    $default	reduce using rule 19 (type)



state 96

    non_array_type  ->  simple_type .   (rule 21)
    array_type  ->  simple_type . rank_specifier   (rule 44)

    RANK_SPECIFIER	shift, and go to state 120

    $default	reduce using rule 21 (non_array_type)

    rank_specifier	go to state 121



state 97

    simple_type  ->  primitive_type .   (rule 23)

    $default	reduce using rule 23 (simple_type)



state 98

    primitive_type  ->  numeric_type .   (rule 25)

    $default	reduce using rule 25 (primitive_type)



state 99

    numeric_type  ->  integral_type .   (rule 27)

    $default	reduce using rule 27 (numeric_type)



state 100

    numeric_type  ->  floating_point_type .   (rule 28)

    $default	reduce using rule 28 (numeric_type)



state 101

    simple_type  ->  pointer_type .   (rule 24)

    $default	reduce using rule 24 (simple_type)



state 102

    type  ->  array_type .   (rule 20)
    array_type  ->  array_type . rank_specifier   (rule 43)

    RANK_SPECIFIER	shift, and go to state 120

    $default	reduce using rule 20 (type)

    rank_specifier	go to state 122



state 103

    qualified_identifier_opt_generic  ->  qualified_identifier . @2 opt_generic   (rule 15)
    array_type  ->  qualified_identifier . rank_specifier   (rule 45)

    RANK_SPECIFIER	shift, and go to state 120

    $default	reduce using rule 14 (@2)

    @2  	go to state 123
    rank_specifier	go to state 124



state 104

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type . IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    IDENTIFIER	shift, and go to state 125



state 105

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER . enum_base_opt @10 enum_body comma_opt   (rule 515)

    ':' 	shift, and go to state 126

    $default	reduce using rule 516 (enum_base_opt)

    enum_base_opt	go to state 127
    enum_base	go to state 128



state 106

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER . @9 interface_base_opt interface_body comma_opt   (rule 488)

    $default	reduce using rule 487 (@9)

    @9  	go to state 129



state 107

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER . @7 struct_interfaces_opt struct_body comma_opt   (rule 461)

    $default	reduce using rule 460 (@7)

    @7  	go to state 130



state 108

    attribute_name  ->  type_name .   (rule 550)

    $default	reduce using rule 550 (attribute_name)



state 109

    qualified_identifier_opt_generic  ->  qualified_identifier . @2 opt_generic   (rule 15)

    $default	reduce using rule 14 (@2)

    @2  	go to state 123



state 110

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list . RIGHT_BRACKET EXIT_attrib   (rule 531)
    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list . COMMA RIGHT_BRACKET EXIT_attrib   (rule 532)
    attribute_list  ->  attribute_list . COMMA attribute   (rule 546)

    COMMA	shift, and go to state 131
    RIGHT_BRACKET	shift, and go to state 132



state 111

    attribute_list  ->  attribute .   (rule 545)

    $default	reduce using rule 545 (attribute_list)



state 112

    attribute  ->  attribute_name . attribute_arguments_opt   (rule 547)

    '(' 	shift, and go to state 133

    $default	reduce using rule 548 (attribute_arguments_opt)

    attribute_arguments_opt	go to state 134
    attribute_arguments	go to state 135



state 113

    attribute_target_specifier  ->  attribute_target ':' .   (rule 535)

    $default	reduce using rule 535 (attribute_target_specifier)



state 114

    namespace_body  ->  '{' . using_directives_opt namespace_member_declarations_opt '}'   (rule 315)

    USING	shift, and go to state 1

    $default	reduce using rule 301 (using_directives_opt)

    using_directives_opt	go to state 136
    using_directives	go to state 3
    using_directive	go to state 4
    using_alias_directive	go to state 5
    using_namespace_directive	go to state 6



state 115

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier @5 namespace_body . comma_opt   (rule 308)

    ';' 	shift, and go to state 137

    $default	reduce using rule 309 (comma_opt)

    comma_opt	go to state 138



state 116

    opt_generic_fct  ->  GEN_LT . name_list GEN_GT   (rule 380)

    IDENTIFIER	shift, and go to state 139

    name_list	go to state 140



state 117

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct . @6 class_base_opt class_body comma_opt   (rule 351)

    $default	reduce using rule 350 (@6)

    @6  	go to state 141



state 118

    pointer_type  ->  VOID '*' .   (rule 42)

    $default	reduce using rule 42 (pointer_type)



state 119

    pointer_type  ->  type '*' .   (rule 41)

    $default	reduce using rule 41 (pointer_type)



state 120

    rank_specifier  ->  RANK_SPECIFIER .   (rule 48)

    $default	reduce using rule 48 (rank_specifier)



state 121

    array_type  ->  simple_type rank_specifier .   (rule 44)

    $default	reduce using rule 44 (array_type)



state 122

    array_type  ->  array_type rank_specifier .   (rule 43)

    $default	reduce using rule 43 (array_type)



state 123

    qualified_identifier_opt_generic  ->  qualified_identifier @2 . opt_generic   (rule 15)

    GEN_LT	shift, and go to state 142

    $default	reduce using rule 11 (opt_generic)

    opt_generic	go to state 143



state 124

    array_type  ->  qualified_identifier rank_specifier .   (rule 45)

    $default	reduce using rule 45 (array_type)



state 125

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER . opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    GEN_LT	shift, and go to state 116

    $default	reduce using rule 379 (opt_generic_fct)

    opt_generic_fct	go to state 144



state 126

    enum_base  ->  ':' . integral_type   (rule 518)

    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90

    integral_type	go to state 145



state 127

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt . @10 enum_body comma_opt   (rule 515)

    $default	reduce using rule 514 (@10)

    @10 	go to state 146



state 128

    enum_base_opt  ->  enum_base .   (rule 517)

    $default	reduce using rule 517 (enum_base_opt)



state 129

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER @9 . interface_base_opt interface_body comma_opt   (rule 488)

    ':' 	shift, and go to state 147

    $default	reduce using rule 489 (interface_base_opt)

    interface_base_opt	go to state 148
    interface_base	go to state 149



state 130

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER @7 . struct_interfaces_opt struct_body comma_opt   (rule 461)

    ':' 	shift, and go to state 150

    $default	reduce using rule 462 (struct_interfaces_opt)

    struct_interfaces_opt	go to state 151
    struct_interfaces	go to state 152



state 131

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA . RIGHT_BRACKET EXIT_attrib   (rule 532)
    attribute_list  ->  attribute_list COMMA . attribute   (rule 546)

    IDENTIFIER	shift, and go to state 53
    RIGHT_BRACKET	shift, and go to state 153

    type_name	go to state 108
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10
    attribute	go to state 154
    attribute_name	go to state 112



state 132

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET . EXIT_attrib   (rule 531)

    $default	reduce using rule 553 (EXIT_attrib)

    EXIT_attrib	go to state 155



state 133

    attribute_arguments  ->  '(' . expression_list_opt ')'   (rule 551)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 82 (expression_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    expression_list_opt	go to state 191
    expression_list	go to state 192
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 224
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 134

    attribute  ->  attribute_name attribute_arguments_opt .   (rule 547)

    $default	reduce using rule 547 (attribute)



state 135

    attribute_arguments_opt  ->  attribute_arguments .   (rule 549)

    $default	reduce using rule 549 (attribute_arguments_opt)



state 136

    namespace_body  ->  '{' using_directives_opt . namespace_member_declarations_opt '}'   (rule 315)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 305 (namespace_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 49
    namespace_member_declarations_opt	go to state 226
    namespace_declaration	go to state 12
    namespace_member_declarations	go to state 227
    namespace_member_declaration	go to state 14
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 137

    comma_opt  ->  ';' .   (rule 310)

    $default	reduce using rule 310 (comma_opt)



state 138

    namespace_declaration  ->  attributes_opt NAMESPACE qualified_identifier @5 namespace_body comma_opt .   (rule 308)

    $default	reduce using rule 308 (namespace_declaration)



state 139

    name_list  ->  IDENTIFIER .   (rule 377)

    $default	reduce using rule 377 (name_list)



state 140

    name_list  ->  name_list . COMMA IDENTIFIER   (rule 378)
    opt_generic_fct  ->  GEN_LT name_list . GEN_GT   (rule 380)

    GEN_GT	shift, and go to state 228
    COMMA	shift, and go to state 229



state 141

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 . class_base_opt class_body comma_opt   (rule 351)

    ':' 	shift, and go to state 230

    $default	reduce using rule 352 (class_base_opt)

    class_base_opt	go to state 231
    class_base	go to state 232



state 142

    opt_generic  ->  GEN_LT . @1 genericlist GEN_GT   (rule 13)

    $default	reduce using rule 12 (@1)

    @1  	go to state 233



state 143

    qualified_identifier_opt_generic  ->  qualified_identifier @2 opt_generic .   (rule 15)

    $default	reduce using rule 15 (qualified_identifier_opt_generic)



state 144

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct . '(' formal_parameter_list_opt ')' ';'   (rule 527)

    '(' 	shift, and go to state 234



state 145

    enum_base  ->  ':' integral_type .   (rule 518)

    $default	reduce using rule 518 (enum_base)



state 146

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt @10 . enum_body comma_opt   (rule 515)

    '{' 	shift, and go to state 235

    enum_body	go to state 236



state 147

    interface_base  ->  ':' . interface_type_list   (rule 491)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 237
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10
    interface_type_list	go to state 238



state 148

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt . interface_body comma_opt   (rule 488)

    '{' 	shift, and go to state 239

    interface_body	go to state 240



state 149

    interface_base_opt  ->  interface_base .   (rule 490)

    $default	reduce using rule 490 (interface_base_opt)



state 150

    struct_interfaces  ->  ':' . interface_type_list   (rule 464)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 237
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10
    interface_type_list	go to state 241



state 151

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt . struct_body comma_opt   (rule 461)

    '{' 	shift, and go to state 242

    struct_body	go to state 243



state 152

    struct_interfaces_opt  ->  struct_interfaces .   (rule 463)

    $default	reduce using rule 463 (struct_interfaces_opt)



state 153

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET . EXIT_attrib   (rule 532)

    $default	reduce using rule 553 (EXIT_attrib)

    EXIT_attrib	go to state 244



state 154

    attribute_list  ->  attribute_list COMMA attribute .   (rule 546)

    $default	reduce using rule 546 (attribute_list)



state 155

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list RIGHT_BRACKET EXIT_attrib .   (rule 531)

    $default	reduce using rule 531 (attribute_section)



state 156

    literal  ->  INTEGER_LITERAL .   (rule 2)

    $default	reduce using rule 2 (literal)



state 157

    literal  ->  REAL_LITERAL .   (rule 3)

    $default	reduce using rule 3 (literal)



state 158

    literal  ->  CHARACTER_LITERAL .   (rule 4)

    $default	reduce using rule 4 (literal)



state 159

    literal  ->  STRING_LITERAL .   (rule 5)

    $default	reduce using rule 5 (literal)



state 160

    base_access  ->  BASE . '.' IDENTIFIER   (rule 87)
    base_access  ->  BASE . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 88)

    LEFT_BRACKET	shift, and go to state 245
    '.' 	shift, and go to state 246



state 161

    checked_expression  ->  CHECKED . '(' expression ')'   (rule 99)

    '(' 	shift, and go to state 247



state 162

    delegate_expression  ->  DELEGATE . '(' formal_parameter_list_opt ')' block   (rule 71)

    '(' 	shift, and go to state 248



state 163

    boolean_literal  ->  FALSE .   (rule 8)

    $default	reduce using rule 8 (boolean_literal)



state 164

    object_creation_expression  ->  NEW . type '(' argument_list_opt ')'   (rule 92)
    array_creation_expression  ->  NEW . non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 93)
    array_creation_expression  ->  NEW . array_type array_initializer   (rule 94)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 250
    non_array_type	go to state 251
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 252
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 165

    literal  ->  NULL_LITERAL .   (rule 6)

    $default	reduce using rule 6 (literal)



state 166

    sizeof_expression  ->  SIZEOF . '(' type ')'   (rule 103)

    '(' 	shift, and go to state 253



state 167

    this_access  ->  THIS .   (rule 86)

    $default	reduce using rule 86 (this_access)



state 168

    boolean_literal  ->  TRUE .   (rule 7)

    $default	reduce using rule 7 (boolean_literal)



state 169

    typeof_expression  ->  TYPEOF . '(' type ')'   (rule 97)
    typeof_expression  ->  TYPEOF . '(' VOID ')'   (rule 98)

    '(' 	shift, and go to state 254



state 170

    unchecked_expression  ->  UNCHECKED . '(' expression ')'   (rule 100)

    '(' 	shift, and go to state 255



state 171

    pre_increment_expression  ->  PLUSPLUS . unary_expression   (rule 113)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 256
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 172

    pre_decrement_expression  ->  MINUSMINUS . unary_expression   (rule 114)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 257
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 173

    unary_expression  ->  '*' . unary_expression   (rule 118)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 258
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 174

    parenthesized_expression  ->  '(' . expression ')'   (rule 72)
    cast_expression  ->  '(' . expression ')' unary_expression_not_plusminus   (rule 122)
    cast_expression  ->  '(' . multiplicative_expression '*' ')' unary_expression   (rule 123)
    cast_expression  ->  '(' . qualified_identifier rank_specifier type_quals_opt ')' unary_expression   (rule 124)
    cast_expression  ->  '(' . primitive_type type_quals_opt ')' unary_expression   (rule 125)
    cast_expression  ->  '(' . VOID type_quals_opt ')' unary_expression   (rule 126)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 259
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 260
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 261
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 262
    qualified_identifier	go to state 263
    qualifier	go to state 10



state 175

    addressof_expression  ->  '&' . unary_expression   (rule 102)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 264
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 176

    unary_expression_not_plusminus  ->  '!' . unary_expression   (rule 110)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 265
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 177

    unary_expression_not_plusminus  ->  '~' . unary_expression   (rule 111)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 266
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 178

    unary_expression  ->  '+' . unary_expression   (rule 116)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 267
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 179

    unary_expression  ->  '-' . unary_expression   (rule 117)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 268
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 180

    primary_expression_no_parenthesis  ->  literal .   (rule 58)

    $default	reduce using rule 58 (primary_expression_no_parenthesis)



state 181

    literal  ->  boolean_literal .   (rule 1)

    $default	reduce using rule 1 (literal)



state 182

    invocation_expression  ->  qualified_identifier_opt_generic . '(' argument_list_opt ')'   (rule 77)

    '(' 	shift, and go to state 269



state 183

    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 74)

    '.' 	shift, and go to state 270



state 184

    member_access  ->  primary_expression . '.' IDENTIFIER   (rule 73)
    element_access  ->  primary_expression . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 80)
    postfix_expression  ->  primary_expression .   (rule 104)

    LEFT_BRACKET	shift, and go to state 271
    '.' 	shift, and go to state 272

    $default	reduce using rule 104 (postfix_expression)



state 185

    primary_expression  ->  primary_expression_no_parenthesis .   (rule 57)
    invocation_expression  ->  primary_expression_no_parenthesis . opt_generic '(' @4 argument_list_opt ')'   (rule 76)

    GEN_LT	shift, and go to state 142

    '(' 	reduce using rule 11 (opt_generic)
    $default	reduce using rule 57 (primary_expression)

    opt_generic	go to state 273



state 186

    primary_expression_no_parenthesis  ->  delegate_expression .   (rule 66)

    $default	reduce using rule 66 (primary_expression_no_parenthesis)



state 187

    primary_expression  ->  parenthesized_expression .   (rule 56)

    $default	reduce using rule 56 (primary_expression)



state 188

    primary_expression_no_parenthesis  ->  member_access .   (rule 60)

    $default	reduce using rule 60 (primary_expression_no_parenthesis)



state 189

    primary_expression_no_parenthesis  ->  invocation_expression .   (rule 61)

    $default	reduce using rule 61 (primary_expression_no_parenthesis)



state 190

    primary_expression_no_parenthesis  ->  element_access .   (rule 62)

    $default	reduce using rule 62 (primary_expression_no_parenthesis)



state 191

    attribute_arguments  ->  '(' expression_list_opt . ')'   (rule 551)

    ')' 	shift, and go to state 274



state 192

    expression_list_opt  ->  expression_list .   (rule 83)
    expression_list  ->  expression_list . COMMA expression   (rule 85)

    COMMA	shift, and go to state 275

    $default	reduce using rule 83 (expression_list_opt)



state 193

    primary_expression_no_parenthesis  ->  this_access .   (rule 63)

    $default	reduce using rule 63 (primary_expression_no_parenthesis)



state 194

    primary_expression_no_parenthesis  ->  base_access .   (rule 64)

    $default	reduce using rule 64 (primary_expression_no_parenthesis)



state 195

    postfix_expression  ->  post_increment_expression .   (rule 106)

    $default	reduce using rule 106 (postfix_expression)



state 196

    postfix_expression  ->  post_decrement_expression .   (rule 107)

    $default	reduce using rule 107 (postfix_expression)



state 197

    primary_expression_no_parenthesis  ->  new_expression .   (rule 65)

    $default	reduce using rule 65 (primary_expression_no_parenthesis)



state 198

    new_expression  ->  object_creation_expression .   (rule 91)

    $default	reduce using rule 91 (new_expression)



state 199

    primary_expression_no_parenthesis  ->  array_creation_expression .   (rule 59)

    $default	reduce using rule 59 (primary_expression_no_parenthesis)



state 200

    primary_expression_no_parenthesis  ->  typeof_expression .   (rule 67)

    $default	reduce using rule 67 (primary_expression_no_parenthesis)



state 201

    primary_expression_no_parenthesis  ->  checked_expression .   (rule 69)

    $default	reduce using rule 69 (primary_expression_no_parenthesis)



state 202

    primary_expression_no_parenthesis  ->  unchecked_expression .   (rule 70)

    $default	reduce using rule 70 (primary_expression_no_parenthesis)



state 203

    postfix_expression  ->  pointer_member_access .   (rule 108)

    $default	reduce using rule 108 (postfix_expression)



state 204

    unary_expression  ->  addressof_expression .   (rule 121)

    $default	reduce using rule 121 (unary_expression)



state 205

    primary_expression_no_parenthesis  ->  sizeof_expression .   (rule 68)

    $default	reduce using rule 68 (primary_expression_no_parenthesis)



state 206

    post_increment_expression  ->  postfix_expression . PLUSPLUS   (rule 89)
    post_decrement_expression  ->  postfix_expression . MINUSMINUS   (rule 90)
    pointer_member_access  ->  postfix_expression . ARROW IDENTIFIER   (rule 101)
    unary_expression_not_plusminus  ->  postfix_expression .   (rule 109)

    PLUSPLUS	shift, and go to state 276
    MINUSMINUS	shift, and go to state 277
    ARROW	shift, and go to state 278

    $default	reduce using rule 109 (unary_expression_not_plusminus)



state 207

    unary_expression  ->  unary_expression_not_plusminus .   (rule 115)

    $default	reduce using rule 115 (unary_expression)



state 208

    unary_expression  ->  pre_increment_expression .   (rule 119)

    $default	reduce using rule 119 (unary_expression)



state 209

    unary_expression  ->  pre_decrement_expression .   (rule 120)

    $default	reduce using rule 120 (unary_expression)



state 210

    multiplicative_expression  ->  unary_expression .   (rule 133)
    assignment  ->  unary_expression . assignment_operator expression   (rule 165)

    PLUSEQ	shift, and go to state 279
    MINUSEQ	shift, and go to state 280
    STAREQ	shift, and go to state 281
    DIVEQ	shift, and go to state 282
    MODEQ	shift, and go to state 283
    XOREQ	shift, and go to state 284
    ANDEQ	shift, and go to state 285
    OREQ	shift, and go to state 286
    GTGTEQ	shift, and go to state 287
    LTLTEQ	shift, and go to state 288
    '=' 	shift, and go to state 289

    $default	reduce using rule 133 (multiplicative_expression)

    assignment_operator	go to state 290



state 211

    unary_expression_not_plusminus  ->  cast_expression .   (rule 112)

    $default	reduce using rule 112 (unary_expression_not_plusminus)



state 212

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 134)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 135)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 136)
    additive_expression  ->  multiplicative_expression .   (rule 137)

    '*' 	shift, and go to state 291
    '/' 	shift, and go to state 292
    '%' 	shift, and go to state 293

    $default	reduce using rule 137 (additive_expression)



state 213

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 138)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 139)
    shift_expression  ->  additive_expression .   (rule 140)

    '+' 	shift, and go to state 294
    '-' 	shift, and go to state 295

    $default	reduce using rule 140 (shift_expression)



state 214

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 141)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 142)
    relational_expression  ->  shift_expression .   (rule 143)

    GTGT	shift, and go to state 296
    LTLT	shift, and go to state 297

    $default	reduce using rule 143 (relational_expression)



state 215

    relational_expression  ->  relational_expression . LT shift_expression   (rule 144)
    relational_expression  ->  relational_expression . GT shift_expression   (rule 145)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 146)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 147)
    relational_expression  ->  relational_expression . IS type   (rule 148)
    relational_expression  ->  relational_expression . AS type   (rule 149)
    equality_expression  ->  relational_expression .   (rule 150)

    AS  	shift, and go to state 298
    IS  	shift, and go to state 299
    GT  	shift, and go to state 300
    LT  	shift, and go to state 301
    LEQ 	shift, and go to state 302
    GEQ 	shift, and go to state 303

    $default	reduce using rule 150 (equality_expression)



state 216

    equality_expression  ->  equality_expression . EQEQ relational_expression   (rule 151)
    equality_expression  ->  equality_expression . NOTEQ relational_expression   (rule 152)
    and_expression  ->  equality_expression .   (rule 153)

    EQEQ	shift, and go to state 304
    NOTEQ	shift, and go to state 305

    $default	reduce using rule 153 (and_expression)



state 217

    and_expression  ->  and_expression . '&' equality_expression   (rule 154)
    exclusive_or_expression  ->  and_expression .   (rule 155)

    '&' 	shift, and go to state 306

    $default	reduce using rule 155 (exclusive_or_expression)



state 218

    exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 156)
    inclusive_or_expression  ->  exclusive_or_expression .   (rule 157)

    '^' 	shift, and go to state 307

    $default	reduce using rule 157 (inclusive_or_expression)



state 219

    inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 158)
    conditional_and_expression  ->  inclusive_or_expression .   (rule 159)

    '|' 	shift, and go to state 308

    $default	reduce using rule 159 (conditional_and_expression)



state 220

    conditional_and_expression  ->  conditional_and_expression . ANDAND inclusive_or_expression   (rule 160)
    conditional_or_expression  ->  conditional_and_expression .   (rule 161)

    ANDAND	shift, and go to state 309

    $default	reduce using rule 161 (conditional_or_expression)



state 221

    conditional_or_expression  ->  conditional_or_expression . OROR conditional_and_expression   (rule 162)
    conditional_expression  ->  conditional_or_expression .   (rule 163)
    conditional_expression  ->  conditional_or_expression . '?' expression ':' expression   (rule 164)

    OROR	shift, and go to state 310
    '?' 	shift, and go to state 311

    $default	reduce using rule 163 (conditional_expression)



state 222

    expression  ->  conditional_expression .   (rule 177)

    $default	reduce using rule 177 (expression)



state 223

    expression  ->  assignment .   (rule 178)

    $default	reduce using rule 178 (expression)



state 224

    expression_list  ->  expression .   (rule 84)

    $default	reduce using rule 84 (expression_list)



state 225

    qualified_identifier_opt_generic  ->  qualified_identifier . @2 opt_generic   (rule 15)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 81)
    postfix_expression  ->  qualified_identifier .   (rule 105)

    LEFT_BRACKET	shift, and go to state 312

    GEN_LT	reduce using rule 14 (@2)
    '(' 	reduce using rule 14 (@2)
    $default	reduce using rule 105 (postfix_expression)

    @2  	go to state 123



state 226

    namespace_body  ->  '{' using_directives_opt namespace_member_declarations_opt . '}'   (rule 315)

    '}' 	shift, and go to state 313



state 227

    namespace_member_declarations_opt  ->  namespace_member_declarations .   (rule 306)
    namespace_member_declarations  ->  namespace_member_declarations . namespace_member_declaration   (rule 323)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 306 (namespace_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 49
    namespace_declaration	go to state 12
    namespace_member_declaration	go to state 50
    type_declaration	go to state 15
    class_declaration	go to state 16
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 228

    opt_generic_fct  ->  GEN_LT name_list GEN_GT .   (rule 380)

    $default	reduce using rule 380 (opt_generic_fct)



state 229

    name_list  ->  name_list COMMA . IDENTIFIER   (rule 378)

    IDENTIFIER	shift, and go to state 314



state 230

    class_base  ->  ':' . interface_type_list   (rule 354)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 237
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10
    interface_type_list	go to state 315



state 231

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt . class_body comma_opt   (rule 351)

    '{' 	shift, and go to state 316

    class_body	go to state 317



state 232

    class_base_opt  ->  class_base .   (rule 353)

    $default	reduce using rule 353 (class_base_opt)



state 233

    opt_generic  ->  GEN_LT @1 . genericlist GEN_GT   (rule 13)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    genericlist	go to state 318
    type	go to state 319
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 234

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' . formal_parameter_list_opt ')' ';'   (rule 527)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 321
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 235

    enum_body  ->  '{' . enum_member_declarations_opt '}'   (rule 519)
    enum_body  ->  '{' . enum_member_declarations COMMA '}'   (rule 520)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 521 (enum_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 326
    enum_member_declarations_opt	go to state 327
    enum_member_declarations	go to state 328
    enum_member_declaration	go to state 329
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 236

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body . comma_opt   (rule 515)

    ';' 	shift, and go to state 137

    $default	reduce using rule 309 (comma_opt)

    comma_opt	go to state 330



state 237

    interface_type_list  ->  type_name .   (rule 355)

    $default	reduce using rule 355 (interface_type_list)



state 238

    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 356)
    interface_base  ->  ':' interface_type_list .   (rule 491)

    COMMA	shift, and go to state 331

    $default	reduce using rule 491 (interface_base)



state 239

    interface_body  ->  '{' . interface_member_declarations_opt '}'   (rule 492)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 493 (interface_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 332
    interface_member_declarations_opt	go to state 333
    interface_member_declarations	go to state 334
    interface_member_declaration	go to state 335
    interface_method_declaration	go to state 336
    interface_property_declaration	go to state 337
    interface_indexer_declaration	go to state 338
    interface_event_declaration	go to state 339
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 240

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body . comma_opt   (rule 488)

    ';' 	shift, and go to state 137

    $default	reduce using rule 309 (comma_opt)

    comma_opt	go to state 340



state 241

    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 356)
    struct_interfaces  ->  ':' interface_type_list .   (rule 464)

    COMMA	shift, and go to state 331

    $default	reduce using rule 464 (struct_interfaces)



state 242

    struct_body  ->  '{' . struct_member_declarations_opt '}'   (rule 465)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 466 (struct_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 341
    type_declaration	go to state 342
    class_declaration	go to state 16
    constant_declaration	go to state 343
    field_declaration	go to state 344
    method_declaration	go to state 345
    method_header	go to state 346
    property_declaration	go to state 347
    event_declaration	go to state 348
    indexer_declaration	go to state 349
    operator_declaration	go to state 350
    constructor_declaration	go to state 351
    struct_declaration	go to state 17
    struct_member_declarations_opt	go to state 352
    struct_member_declarations	go to state 353
    struct_member_declaration	go to state 354
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 243

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body . comma_opt   (rule 461)

    ';' 	shift, and go to state 137

    $default	reduce using rule 309 (comma_opt)

    comma_opt	go to state 355



state 244

    attribute_section  ->  ENTER_attrib LEFT_BRACKET attribute_target_specifier_opt attribute_list COMMA RIGHT_BRACKET EXIT_attrib .   (rule 532)

    $default	reduce using rule 532 (attribute_section)



state 245

    base_access  ->  BASE LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 88)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    expression_list	go to state 356
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 224
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 246

    base_access  ->  BASE '.' . IDENTIFIER   (rule 87)

    IDENTIFIER	shift, and go to state 357



state 247

    checked_expression  ->  CHECKED '(' . expression ')'   (rule 99)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 358
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 248

    delegate_expression  ->  DELEGATE '(' . formal_parameter_list_opt ')' block   (rule 71)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 359
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 249

    pointer_type  ->  VOID . '*'   (rule 42)

    '*' 	shift, and go to state 118



state 250

    pointer_type  ->  type . '*'   (rule 41)
    object_creation_expression  ->  NEW type . '(' argument_list_opt ')'   (rule 92)

    '*' 	shift, and go to state 119
    '(' 	shift, and go to state 360



state 251

    type  ->  non_array_type .   (rule 19)
    array_creation_expression  ->  NEW non_array_type . LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 93)

    LEFT_BRACKET	shift, and go to state 361

    $default	reduce using rule 19 (type)



state 252

    type  ->  array_type .   (rule 20)
    array_type  ->  array_type . rank_specifier   (rule 43)
    array_creation_expression  ->  NEW array_type . array_initializer   (rule 94)

    RANK_SPECIFIER	shift, and go to state 120
    '{' 	shift, and go to state 362

    $default	reduce using rule 20 (type)

    rank_specifier	go to state 122
    array_initializer	go to state 363



state 253

    sizeof_expression  ->  SIZEOF '(' . type ')'   (rule 103)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 364
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 254

    typeof_expression  ->  TYPEOF '(' . type ')'   (rule 97)
    typeof_expression  ->  TYPEOF '(' . VOID ')'   (rule 98)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 365

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 366
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 255

    unchecked_expression  ->  UNCHECKED '(' . expression ')'   (rule 100)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 367
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 256

    pre_increment_expression  ->  PLUSPLUS unary_expression .   (rule 113)

    $default	reduce using rule 113 (pre_increment_expression)



state 257

    pre_decrement_expression  ->  MINUSMINUS unary_expression .   (rule 114)

    $default	reduce using rule 114 (pre_decrement_expression)



state 258

    unary_expression  ->  '*' unary_expression .   (rule 118)

    $default	reduce using rule 118 (unary_expression)



state 259

    cast_expression  ->  '(' VOID . type_quals_opt ')' unary_expression   (rule 126)

    RANK_SPECIFIER	shift, and go to state 120
    '*' 	shift, and go to state 368

    $default	reduce using rule 127 (type_quals_opt)

    rank_specifier	go to state 369
    type_quals_opt	go to state 370
    type_quals	go to state 371
    type_qual	go to state 372



state 260

    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 74)
    cast_expression  ->  '(' primitive_type . type_quals_opt ')' unary_expression   (rule 125)

    RANK_SPECIFIER	shift, and go to state 120
    '*' 	shift, and go to state 368
    '.' 	shift, and go to state 270

    $default	reduce using rule 127 (type_quals_opt)

    rank_specifier	go to state 369
    type_quals_opt	go to state 373
    type_quals	go to state 371
    type_qual	go to state 372



state 261

    cast_expression  ->  '(' multiplicative_expression . '*' ')' unary_expression   (rule 123)
    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 134)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 135)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 136)
    additive_expression  ->  multiplicative_expression .   (rule 137)

    '*' 	shift, and go to state 374
    '/' 	shift, and go to state 292
    '%' 	shift, and go to state 293

    $default	reduce using rule 137 (additive_expression)



state 262

    parenthesized_expression  ->  '(' expression . ')'   (rule 72)
    cast_expression  ->  '(' expression . ')' unary_expression_not_plusminus   (rule 122)

    ')' 	shift, and go to state 375



state 263

    qualified_identifier_opt_generic  ->  qualified_identifier . @2 opt_generic   (rule 15)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 81)
    postfix_expression  ->  qualified_identifier .   (rule 105)
    cast_expression  ->  '(' qualified_identifier . rank_specifier type_quals_opt ')' unary_expression   (rule 124)

    RANK_SPECIFIER	shift, and go to state 120
    LEFT_BRACKET	shift, and go to state 312

    GEN_LT	reduce using rule 14 (@2)
    '(' 	reduce using rule 14 (@2)
    $default	reduce using rule 105 (postfix_expression)

    @2  	go to state 123
    rank_specifier	go to state 376



state 264

    addressof_expression  ->  '&' unary_expression .   (rule 102)

    $default	reduce using rule 102 (addressof_expression)



state 265

    unary_expression_not_plusminus  ->  '!' unary_expression .   (rule 110)

    $default	reduce using rule 110 (unary_expression_not_plusminus)



state 266

    unary_expression_not_plusminus  ->  '~' unary_expression .   (rule 111)

    $default	reduce using rule 111 (unary_expression_not_plusminus)



state 267

    unary_expression  ->  '+' unary_expression .   (rule 116)

    $default	reduce using rule 116 (unary_expression)



state 268

    unary_expression  ->  '-' unary_expression .   (rule 117)

    $default	reduce using rule 117 (unary_expression)



state 269

    invocation_expression  ->  qualified_identifier_opt_generic '(' . argument_list_opt ')'   (rule 77)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 78 (argument_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument_list	go to state 380
    argument	go to state 381
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    argument_list_opt	go to state 382
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 270

    member_access  ->  primitive_type '.' . IDENTIFIER   (rule 74)

    IDENTIFIER	shift, and go to state 384



state 271

    element_access  ->  primary_expression LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 80)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    expression_list	go to state 385
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 224
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 272

    member_access  ->  primary_expression '.' . IDENTIFIER   (rule 73)

    IDENTIFIER	shift, and go to state 386



state 273

    invocation_expression  ->  primary_expression_no_parenthesis opt_generic . '(' @4 argument_list_opt ')'   (rule 76)

    '(' 	shift, and go to state 387



state 274

    attribute_arguments  ->  '(' expression_list_opt ')' .   (rule 551)

    $default	reduce using rule 551 (attribute_arguments)



state 275

    expression_list  ->  expression_list COMMA . expression   (rule 85)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 388
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 276

    post_increment_expression  ->  postfix_expression PLUSPLUS .   (rule 89)

    $default	reduce using rule 89 (post_increment_expression)



state 277

    post_decrement_expression  ->  postfix_expression MINUSMINUS .   (rule 90)

    $default	reduce using rule 90 (post_decrement_expression)



state 278

    pointer_member_access  ->  postfix_expression ARROW . IDENTIFIER   (rule 101)

    IDENTIFIER	shift, and go to state 389



state 279

    assignment_operator  ->  PLUSEQ .   (rule 167)

    $default	reduce using rule 167 (assignment_operator)



state 280

    assignment_operator  ->  MINUSEQ .   (rule 168)

    $default	reduce using rule 168 (assignment_operator)



state 281

    assignment_operator  ->  STAREQ .   (rule 169)

    $default	reduce using rule 169 (assignment_operator)



state 282

    assignment_operator  ->  DIVEQ .   (rule 170)

    $default	reduce using rule 170 (assignment_operator)



state 283

    assignment_operator  ->  MODEQ .   (rule 171)

    $default	reduce using rule 171 (assignment_operator)



state 284

    assignment_operator  ->  XOREQ .   (rule 172)

    $default	reduce using rule 172 (assignment_operator)



state 285

    assignment_operator  ->  ANDEQ .   (rule 173)

    $default	reduce using rule 173 (assignment_operator)



state 286

    assignment_operator  ->  OREQ .   (rule 174)

    $default	reduce using rule 174 (assignment_operator)



state 287

    assignment_operator  ->  GTGTEQ .   (rule 175)

    $default	reduce using rule 175 (assignment_operator)



state 288

    assignment_operator  ->  LTLTEQ .   (rule 176)

    $default	reduce using rule 176 (assignment_operator)



state 289

    assignment_operator  ->  '=' .   (rule 166)

    $default	reduce using rule 166 (assignment_operator)



state 290

    assignment  ->  unary_expression assignment_operator . expression   (rule 165)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 390
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 291

    multiplicative_expression  ->  multiplicative_expression '*' . unary_expression   (rule 134)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 391
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 292

    multiplicative_expression  ->  multiplicative_expression '/' . unary_expression   (rule 135)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 392
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 293

    multiplicative_expression  ->  multiplicative_expression '%' . unary_expression   (rule 136)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 393
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 294

    additive_expression  ->  additive_expression '+' . multiplicative_expression   (rule 138)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 395
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 295

    additive_expression  ->  additive_expression '-' . multiplicative_expression   (rule 139)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 396
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 296

    shift_expression  ->  shift_expression GTGT . additive_expression   (rule 142)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 397
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 297

    shift_expression  ->  shift_expression LTLT . additive_expression   (rule 141)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 398
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 298

    relational_expression  ->  relational_expression AS . type   (rule 149)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 399
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 299

    relational_expression  ->  relational_expression IS . type   (rule 148)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 400
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 300

    relational_expression  ->  relational_expression GT . shift_expression   (rule 145)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 401
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 301

    relational_expression  ->  relational_expression LT . shift_expression   (rule 144)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 402
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 302

    relational_expression  ->  relational_expression LEQ . shift_expression   (rule 146)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 403
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 303

    relational_expression  ->  relational_expression GEQ . shift_expression   (rule 147)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 404
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 304

    equality_expression  ->  equality_expression EQEQ . relational_expression   (rule 151)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 405
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 305

    equality_expression  ->  equality_expression NOTEQ . relational_expression   (rule 152)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 406
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 306

    and_expression  ->  and_expression '&' . equality_expression   (rule 154)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 407
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 307

    exclusive_or_expression  ->  exclusive_or_expression '^' . and_expression   (rule 156)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 408
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 308

    inclusive_or_expression  ->  inclusive_or_expression '|' . exclusive_or_expression   (rule 158)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 409
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 309

    conditional_and_expression  ->  conditional_and_expression ANDAND . inclusive_or_expression   (rule 160)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 410
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 310

    conditional_or_expression  ->  conditional_or_expression OROR . conditional_and_expression   (rule 162)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 394
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 411
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 311

    conditional_expression  ->  conditional_or_expression '?' . expression ':' expression   (rule 164)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 412
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 312

    element_access  ->  qualified_identifier LEFT_BRACKET . expression_list RIGHT_BRACKET   (rule 81)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    expression_list	go to state 413
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 224
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 313

    namespace_body  ->  '{' using_directives_opt namespace_member_declarations_opt '}' .   (rule 315)

    $default	reduce using rule 315 (namespace_body)



state 314

    name_list  ->  name_list COMMA IDENTIFIER .   (rule 378)

    $default	reduce using rule 378 (name_list)



state 315

    class_base  ->  ':' interface_type_list .   (rule 354)
    interface_type_list  ->  interface_type_list . COMMA type_name   (rule 356)

    COMMA	shift, and go to state 331

    $default	reduce using rule 354 (class_base)



state 316

    class_body  ->  '{' . class_member_declarations_opt '}'   (rule 357)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 358 (class_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 414
    type_declaration	go to state 415
    class_declaration	go to state 16
    class_member_declarations_opt	go to state 416
    class_member_declarations	go to state 417
    class_member_declaration	go to state 418
    constant_declaration	go to state 419
    field_declaration	go to state 420
    method_declaration	go to state 421
    method_header	go to state 346
    property_declaration	go to state 422
    event_declaration	go to state 423
    indexer_declaration	go to state 424
    operator_declaration	go to state 425
    constructor_declaration	go to state 426
    destructor_declaration	go to state 427
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 317

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body . comma_opt   (rule 351)

    ';' 	shift, and go to state 137

    $default	reduce using rule 309 (comma_opt)

    comma_opt	go to state 428



state 318

    opt_generic  ->  GEN_LT @1 genericlist . GEN_GT   (rule 13)

    GEN_GT	shift, and go to state 429



state 319

    genericlist  ->  type .   (rule 16)
    genericlist  ->  type . COMMA @3 genericlist   (rule 18)
    pointer_type  ->  type . '*'   (rule 41)

    COMMA	shift, and go to state 430
    '*' 	shift, and go to state 119

    $default	reduce using rule 16 (genericlist)



state 320

    fixed_parameter  ->  attributes_opt . parameter_modifier_opt type IDENTIFIER fixed_parameter_opt_default   (rule 391)
    parameter_array  ->  attributes_opt . PARAMS type IDENTIFIER   (rule 397)

    OUT 	shift, and go to state 431
    PARAMS	shift, and go to state 432
    REF 	shift, and go to state 433

    $default	reduce using rule 394 (parameter_modifier_opt)

    parameter_modifier_opt	go to state 434



state 321

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt . ')' ';'   (rule 527)

    ')' 	shift, and go to state 435



state 322

    formal_parameter_list_opt  ->  formal_parameter_list .   (rule 382)
    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 388)

    COMMA	shift, and go to state 436

    $default	reduce using rule 382 (formal_parameter_list_opt)



state 323

    formal_parameter_list  ->  formal_parameter .   (rule 387)

    $default	reduce using rule 387 (formal_parameter_list)



state 324

    formal_parameter  ->  fixed_parameter .   (rule 389)

    $default	reduce using rule 389 (formal_parameter)



state 325

    formal_parameter  ->  parameter_array .   (rule 390)

    $default	reduce using rule 390 (formal_parameter)



state 326

    enum_member_declaration  ->  attributes_opt . IDENTIFIER   (rule 525)
    enum_member_declaration  ->  attributes_opt . IDENTIFIER '=' constant_expression   (rule 526)

    IDENTIFIER	shift, and go to state 437



state 327

    enum_body  ->  '{' enum_member_declarations_opt . '}'   (rule 519)

    '}' 	shift, and go to state 438



state 328

    enum_body  ->  '{' enum_member_declarations . COMMA '}'   (rule 520)
    enum_member_declarations_opt  ->  enum_member_declarations .   (rule 522)
    enum_member_declarations  ->  enum_member_declarations . COMMA enum_member_declaration   (rule 524)

    COMMA	shift, and go to state 439

    $default	reduce using rule 522 (enum_member_declarations_opt)



state 329

    enum_member_declarations  ->  enum_member_declaration .   (rule 523)

    $default	reduce using rule 523 (enum_member_declarations)



state 330

    enum_declaration  ->  attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt .   (rule 515)

    $default	reduce using rule 515 (enum_declaration)



state 331

    interface_type_list  ->  interface_type_list COMMA . type_name   (rule 356)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 440
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10



state 332

    interface_method_declaration  ->  attributes_opt . new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 501)
    interface_method_declaration  ->  attributes_opt . new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 502)
    interface_property_declaration  ->  attributes_opt . new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 505)
    interface_indexer_declaration  ->  attributes_opt . new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)
    interface_event_declaration  ->  attributes_opt . new_opt EVENT type IDENTIFIER interface_empty_body   (rule 511)

    NEW 	shift, and go to state 441

    $default	reduce using rule 503 (new_opt)

    new_opt	go to state 442



state 333

    interface_body  ->  '{' interface_member_declarations_opt . '}'   (rule 492)

    '}' 	shift, and go to state 443



state 334

    interface_member_declarations_opt  ->  interface_member_declarations .   (rule 494)
    interface_member_declarations  ->  interface_member_declarations . interface_member_declaration   (rule 496)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 494 (interface_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 332
    interface_member_declaration	go to state 444
    interface_method_declaration	go to state 336
    interface_property_declaration	go to state 337
    interface_indexer_declaration	go to state 338
    interface_event_declaration	go to state 339
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 335

    interface_member_declarations  ->  interface_member_declaration .   (rule 495)

    $default	reduce using rule 495 (interface_member_declarations)



state 336

    interface_member_declaration  ->  interface_method_declaration .   (rule 497)

    $default	reduce using rule 497 (interface_member_declaration)



state 337

    interface_member_declaration  ->  interface_property_declaration .   (rule 498)

    $default	reduce using rule 498 (interface_member_declaration)



state 338

    interface_member_declaration  ->  interface_indexer_declaration .   (rule 500)

    $default	reduce using rule 500 (interface_member_declaration)



state 339

    interface_member_declaration  ->  interface_event_declaration .   (rule 499)

    $default	reduce using rule 499 (interface_member_declaration)



state 340

    interface_declaration  ->  attributes_opt modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt .   (rule 488)

    $default	reduce using rule 488 (interface_declaration)



state 341

    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    constant_declaration  ->  attributes_opt . modifiers_opt CONST type constant_declarators ';'   (rule 372)
    field_declaration  ->  attributes_opt . modifiers_opt type variable_declarators ';'   (rule 373)
    method_header  ->  attributes_opt . modifiers_opt type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    method_header  ->  attributes_opt . modifiers_opt VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)
    property_declaration  ->  attributes_opt . modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)
    indexer_declaration  ->  attributes_opt . modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 416)
    operator_declaration  ->  attributes_opt . modifiers_opt operator_declarator operator_body   (rule 420)
    constructor_declaration  ->  attributes_opt . modifiers_opt constructor_declarator constructor_body   (rule 449)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PARTIAL	shift, and go to state 36
    PRIVATE	shift, and go to state 37
    PROTECTED	shift, and go to state 38
    PUBLIC	shift, and go to state 39
    READONLY	shift, and go to state 40
    SEALED	shift, and go to state 41
    STATIC	shift, and go to state 42
    UNSAFE	shift, and go to state 43
    VIRTUAL	shift, and go to state 44
    VOLATILE	shift, and go to state 45

    $default	reduce using rule 331 (modifiers_opt)

    modifiers_opt	go to state 445
    modifiers	go to state 47
    modifier	go to state 48



state 342

    struct_member_declaration  ->  type_declaration .   (rule 478)

    $default	reduce using rule 478 (struct_member_declaration)



state 343

    struct_member_declaration  ->  constant_declaration .   (rule 470)

    $default	reduce using rule 470 (struct_member_declaration)



state 344

    struct_member_declaration  ->  field_declaration .   (rule 471)

    $default	reduce using rule 471 (struct_member_declaration)



state 345

    struct_member_declaration  ->  method_declaration .   (rule 472)

    $default	reduce using rule 472 (struct_member_declaration)



state 346

    method_declaration  ->  method_header . method_body   (rule 374)

    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 447

    block	go to state 448
    method_body	go to state 449



state 347

    struct_member_declaration  ->  property_declaration .   (rule 473)

    $default	reduce using rule 473 (struct_member_declaration)



state 348

    struct_member_declaration  ->  event_declaration .   (rule 474)

    $default	reduce using rule 474 (struct_member_declaration)



state 349

    struct_member_declaration  ->  indexer_declaration .   (rule 475)

    $default	reduce using rule 475 (struct_member_declaration)



state 350

    struct_member_declaration  ->  operator_declaration .   (rule 476)

    $default	reduce using rule 476 (struct_member_declaration)



state 351

    struct_member_declaration  ->  constructor_declaration .   (rule 477)

    $default	reduce using rule 477 (struct_member_declaration)



state 352

    struct_body  ->  '{' struct_member_declarations_opt . '}'   (rule 465)

    '}' 	shift, and go to state 450



state 353

    struct_member_declarations_opt  ->  struct_member_declarations .   (rule 467)
    struct_member_declarations  ->  struct_member_declarations . struct_member_declaration   (rule 469)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 467 (struct_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 341
    type_declaration	go to state 342
    class_declaration	go to state 16
    constant_declaration	go to state 343
    field_declaration	go to state 344
    method_declaration	go to state 345
    method_header	go to state 346
    property_declaration	go to state 347
    event_declaration	go to state 348
    indexer_declaration	go to state 349
    operator_declaration	go to state 350
    constructor_declaration	go to state 351
    struct_declaration	go to state 17
    struct_member_declaration	go to state 451
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 354

    struct_member_declarations  ->  struct_member_declaration .   (rule 468)

    $default	reduce using rule 468 (struct_member_declarations)



state 355

    struct_declaration  ->  attributes_opt modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt .   (rule 461)

    $default	reduce using rule 461 (struct_declaration)



state 356

    expression_list  ->  expression_list . COMMA expression   (rule 85)
    base_access  ->  BASE LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 88)

    COMMA	shift, and go to state 275
    RIGHT_BRACKET	shift, and go to state 452



state 357

    base_access  ->  BASE '.' IDENTIFIER .   (rule 87)

    $default	reduce using rule 87 (base_access)



state 358

    checked_expression  ->  CHECKED '(' expression . ')'   (rule 99)

    ')' 	shift, and go to state 453



state 359

    delegate_expression  ->  DELEGATE '(' formal_parameter_list_opt . ')' block   (rule 71)

    ')' 	shift, and go to state 454



state 360

    object_creation_expression  ->  NEW type '(' . argument_list_opt ')'   (rule 92)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 78 (argument_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument_list	go to state 380
    argument	go to state 381
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    argument_list_opt	go to state 455
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 361

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET . expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 93)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    expression_list	go to state 456
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 224
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 362

    array_initializer  ->  '{' . @8 variable_initializer_list_opt '}'   (rule 480)

    $default	reduce using rule 479 (@8)

    @8  	go to state 457



state 363

    array_creation_expression  ->  NEW array_type array_initializer .   (rule 94)

    $default	reduce using rule 94 (array_creation_expression)



state 364

    pointer_type  ->  type . '*'   (rule 41)
    sizeof_expression  ->  SIZEOF '(' type . ')'   (rule 103)

    '*' 	shift, and go to state 119
    ')' 	shift, and go to state 458



state 365

    pointer_type  ->  VOID . '*'   (rule 42)
    typeof_expression  ->  TYPEOF '(' VOID . ')'   (rule 98)

    '*' 	shift, and go to state 118
    ')' 	shift, and go to state 459



state 366

    pointer_type  ->  type . '*'   (rule 41)
    typeof_expression  ->  TYPEOF '(' type . ')'   (rule 97)

    '*' 	shift, and go to state 119
    ')' 	shift, and go to state 460



state 367

    unchecked_expression  ->  UNCHECKED '(' expression . ')'   (rule 100)

    ')' 	shift, and go to state 461



state 368

    type_qual  ->  '*' .   (rule 132)

    $default	reduce using rule 132 (type_qual)



state 369

    type_qual  ->  rank_specifier .   (rule 131)

    $default	reduce using rule 131 (type_qual)



state 370

    cast_expression  ->  '(' VOID type_quals_opt . ')' unary_expression   (rule 126)

    ')' 	shift, and go to state 462



state 371

    type_quals_opt  ->  type_quals .   (rule 128)
    type_quals  ->  type_quals . type_qual   (rule 130)

    RANK_SPECIFIER	shift, and go to state 120
    '*' 	shift, and go to state 368

    $default	reduce using rule 128 (type_quals_opt)

    rank_specifier	go to state 369
    type_qual	go to state 463



state 372

    type_quals  ->  type_qual .   (rule 129)

    $default	reduce using rule 129 (type_quals)



state 373

    cast_expression  ->  '(' primitive_type type_quals_opt . ')' unary_expression   (rule 125)

    ')' 	shift, and go to state 464



state 374

    cast_expression  ->  '(' multiplicative_expression '*' . ')' unary_expression   (rule 123)
    multiplicative_expression  ->  multiplicative_expression '*' . unary_expression   (rule 134)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    ')' 	shift, and go to state 465
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 391
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 375

    parenthesized_expression  ->  '(' expression ')' .   (rule 72)
    cast_expression  ->  '(' expression ')' . unary_expression_not_plusminus   (rule 122)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    '(' 	shift, and go to state 174
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177

    $default	reduce using rule 72 (parenthesized_expression)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 466
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 376

    cast_expression  ->  '(' qualified_identifier rank_specifier . type_quals_opt ')' unary_expression   (rule 124)

    RANK_SPECIFIER	shift, and go to state 120
    '*' 	shift, and go to state 368

    $default	reduce using rule 127 (type_quals_opt)

    rank_specifier	go to state 369
    type_quals_opt	go to state 467
    type_quals	go to state 371
    type_qual	go to state 372



state 377

    argument  ->  IDENTIFIER . ':' argument   (rule 55)
    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)

    ':' 	shift, and go to state 468
    '.' 	shift, and go to state 26

    $default	reduce using rule 311 (qualified_identifier)



state 378

    argument  ->  OUT . variable_reference   (rule 54)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    variable_reference	go to state 469
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 470
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 379

    argument  ->  REF . variable_reference   (rule 53)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    variable_reference	go to state 471
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 470
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 380

    argument_list  ->  argument_list . COMMA argument   (rule 51)
    argument_list_opt  ->  argument_list .   (rule 79)

    COMMA	shift, and go to state 472

    $default	reduce using rule 79 (argument_list_opt)



state 381

    argument_list  ->  argument .   (rule 50)

    $default	reduce using rule 50 (argument_list)



state 382

    invocation_expression  ->  qualified_identifier_opt_generic '(' argument_list_opt . ')'   (rule 77)

    ')' 	shift, and go to state 473



state 383

    argument  ->  expression .   (rule 52)

    $default	reduce using rule 52 (argument)



state 384

    member_access  ->  primitive_type '.' IDENTIFIER .   (rule 74)

    $default	reduce using rule 74 (member_access)



state 385

    element_access  ->  primary_expression LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 80)
    expression_list  ->  expression_list . COMMA expression   (rule 85)

    COMMA	shift, and go to state 275
    RIGHT_BRACKET	shift, and go to state 474



state 386

    member_access  ->  primary_expression '.' IDENTIFIER .   (rule 73)

    $default	reduce using rule 73 (member_access)



state 387

    invocation_expression  ->  primary_expression_no_parenthesis opt_generic '(' . @4 argument_list_opt ')'   (rule 76)

    $default	reduce using rule 75 (@4)

    @4  	go to state 475



state 388

    expression_list  ->  expression_list COMMA expression .   (rule 85)

    $default	reduce using rule 85 (expression_list)



state 389

    pointer_member_access  ->  postfix_expression ARROW IDENTIFIER .   (rule 101)

    $default	reduce using rule 101 (pointer_member_access)



state 390

    assignment  ->  unary_expression assignment_operator expression .   (rule 165)

    $default	reduce using rule 165 (assignment)



state 391

    multiplicative_expression  ->  multiplicative_expression '*' unary_expression .   (rule 134)

    $default	reduce using rule 134 (multiplicative_expression)



state 392

    multiplicative_expression  ->  multiplicative_expression '/' unary_expression .   (rule 135)

    $default	reduce using rule 135 (multiplicative_expression)



state 393

    multiplicative_expression  ->  multiplicative_expression '%' unary_expression .   (rule 136)

    $default	reduce using rule 136 (multiplicative_expression)



state 394

    multiplicative_expression  ->  unary_expression .   (rule 133)

    $default	reduce using rule 133 (multiplicative_expression)



state 395

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 134)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 135)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 136)
    additive_expression  ->  additive_expression '+' multiplicative_expression .   (rule 138)

    '*' 	shift, and go to state 291
    '/' 	shift, and go to state 292
    '%' 	shift, and go to state 293

    $default	reduce using rule 138 (additive_expression)



state 396

    multiplicative_expression  ->  multiplicative_expression . '*' unary_expression   (rule 134)
    multiplicative_expression  ->  multiplicative_expression . '/' unary_expression   (rule 135)
    multiplicative_expression  ->  multiplicative_expression . '%' unary_expression   (rule 136)
    additive_expression  ->  additive_expression '-' multiplicative_expression .   (rule 139)

    '*' 	shift, and go to state 291
    '/' 	shift, and go to state 292
    '%' 	shift, and go to state 293

    $default	reduce using rule 139 (additive_expression)



state 397

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 138)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 139)
    shift_expression  ->  shift_expression GTGT additive_expression .   (rule 142)

    '+' 	shift, and go to state 294
    '-' 	shift, and go to state 295

    $default	reduce using rule 142 (shift_expression)



state 398

    additive_expression  ->  additive_expression . '+' multiplicative_expression   (rule 138)
    additive_expression  ->  additive_expression . '-' multiplicative_expression   (rule 139)
    shift_expression  ->  shift_expression LTLT additive_expression .   (rule 141)

    '+' 	shift, and go to state 294
    '-' 	shift, and go to state 295

    $default	reduce using rule 141 (shift_expression)



state 399

    pointer_type  ->  type . '*'   (rule 41)
    relational_expression  ->  relational_expression AS type .   (rule 149)

    '*' 	shift, and go to state 119

    $default	reduce using rule 149 (relational_expression)



state 400

    pointer_type  ->  type . '*'   (rule 41)
    relational_expression  ->  relational_expression IS type .   (rule 148)

    '*' 	shift, and go to state 119

    $default	reduce using rule 148 (relational_expression)



state 401

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 141)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 142)
    relational_expression  ->  relational_expression GT shift_expression .   (rule 145)

    GTGT	shift, and go to state 296
    LTLT	shift, and go to state 297

    $default	reduce using rule 145 (relational_expression)



state 402

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 141)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 142)
    relational_expression  ->  relational_expression LT shift_expression .   (rule 144)

    GTGT	shift, and go to state 296
    LTLT	shift, and go to state 297

    $default	reduce using rule 144 (relational_expression)



state 403

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 141)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 142)
    relational_expression  ->  relational_expression LEQ shift_expression .   (rule 146)

    GTGT	shift, and go to state 296
    LTLT	shift, and go to state 297

    $default	reduce using rule 146 (relational_expression)



state 404

    shift_expression  ->  shift_expression . LTLT additive_expression   (rule 141)
    shift_expression  ->  shift_expression . GTGT additive_expression   (rule 142)
    relational_expression  ->  relational_expression GEQ shift_expression .   (rule 147)

    GTGT	shift, and go to state 296
    LTLT	shift, and go to state 297

    $default	reduce using rule 147 (relational_expression)



state 405

    relational_expression  ->  relational_expression . LT shift_expression   (rule 144)
    relational_expression  ->  relational_expression . GT shift_expression   (rule 145)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 146)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 147)
    relational_expression  ->  relational_expression . IS type   (rule 148)
    relational_expression  ->  relational_expression . AS type   (rule 149)
    equality_expression  ->  equality_expression EQEQ relational_expression .   (rule 151)

    AS  	shift, and go to state 298
    IS  	shift, and go to state 299
    GT  	shift, and go to state 300
    LT  	shift, and go to state 301
    LEQ 	shift, and go to state 302
    GEQ 	shift, and go to state 303

    $default	reduce using rule 151 (equality_expression)



state 406

    relational_expression  ->  relational_expression . LT shift_expression   (rule 144)
    relational_expression  ->  relational_expression . GT shift_expression   (rule 145)
    relational_expression  ->  relational_expression . LEQ shift_expression   (rule 146)
    relational_expression  ->  relational_expression . GEQ shift_expression   (rule 147)
    relational_expression  ->  relational_expression . IS type   (rule 148)
    relational_expression  ->  relational_expression . AS type   (rule 149)
    equality_expression  ->  equality_expression NOTEQ relational_expression .   (rule 152)

    AS  	shift, and go to state 298
    IS  	shift, and go to state 299
    GT  	shift, and go to state 300
    LT  	shift, and go to state 301
    LEQ 	shift, and go to state 302
    GEQ 	shift, and go to state 303

    $default	reduce using rule 152 (equality_expression)



state 407

    equality_expression  ->  equality_expression . EQEQ relational_expression   (rule 151)
    equality_expression  ->  equality_expression . NOTEQ relational_expression   (rule 152)
    and_expression  ->  and_expression '&' equality_expression .   (rule 154)

    EQEQ	shift, and go to state 304
    NOTEQ	shift, and go to state 305

    $default	reduce using rule 154 (and_expression)



state 408

    and_expression  ->  and_expression . '&' equality_expression   (rule 154)
    exclusive_or_expression  ->  exclusive_or_expression '^' and_expression .   (rule 156)

    '&' 	shift, and go to state 306

    $default	reduce using rule 156 (exclusive_or_expression)



state 409

    exclusive_or_expression  ->  exclusive_or_expression . '^' and_expression   (rule 156)
    inclusive_or_expression  ->  inclusive_or_expression '|' exclusive_or_expression .   (rule 158)

    '^' 	shift, and go to state 307

    $default	reduce using rule 158 (inclusive_or_expression)



state 410

    inclusive_or_expression  ->  inclusive_or_expression . '|' exclusive_or_expression   (rule 158)
    conditional_and_expression  ->  conditional_and_expression ANDAND inclusive_or_expression .   (rule 160)

    '|' 	shift, and go to state 308

    $default	reduce using rule 160 (conditional_and_expression)



state 411

    conditional_and_expression  ->  conditional_and_expression . ANDAND inclusive_or_expression   (rule 160)
    conditional_or_expression  ->  conditional_or_expression OROR conditional_and_expression .   (rule 162)

    ANDAND	shift, and go to state 309

    $default	reduce using rule 162 (conditional_or_expression)



state 412

    conditional_expression  ->  conditional_or_expression '?' expression . ':' expression   (rule 164)

    ':' 	shift, and go to state 476



state 413

    element_access  ->  qualified_identifier LEFT_BRACKET expression_list . RIGHT_BRACKET   (rule 81)
    expression_list  ->  expression_list . COMMA expression   (rule 85)

    COMMA	shift, and go to state 275
    RIGHT_BRACKET	shift, and go to state 477



state 414

    class_declaration  ->  attributes_opt . modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    constant_declaration  ->  attributes_opt . modifiers_opt CONST type constant_declarators ';'   (rule 372)
    field_declaration  ->  attributes_opt . modifiers_opt type variable_declarators ';'   (rule 373)
    method_header  ->  attributes_opt . modifiers_opt type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    method_header  ->  attributes_opt . modifiers_opt VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)
    property_declaration  ->  attributes_opt . modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt . modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)
    indexer_declaration  ->  attributes_opt . modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 416)
    operator_declaration  ->  attributes_opt . modifiers_opt operator_declarator operator_body   (rule 420)
    constructor_declaration  ->  attributes_opt . modifiers_opt constructor_declarator constructor_body   (rule 449)
    destructor_declaration  ->  attributes_opt . modifiers_opt '~' IDENTIFIER '(' ')' block   (rule 455)
    struct_declaration  ->  attributes_opt . modifiers_opt STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt . modifiers_opt INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt . modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    ABSTRACT	shift, and go to state 30
    EXTERN	shift, and go to state 31
    INTERNAL	shift, and go to state 32
    NEW 	shift, and go to state 34
    OVERRIDE	shift, and go to state 35
    PARTIAL	shift, and go to state 36
    PRIVATE	shift, and go to state 37
    PROTECTED	shift, and go to state 38
    PUBLIC	shift, and go to state 39
    READONLY	shift, and go to state 40
    SEALED	shift, and go to state 41
    STATIC	shift, and go to state 42
    UNSAFE	shift, and go to state 43
    VIRTUAL	shift, and go to state 44
    VOLATILE	shift, and go to state 45

    $default	reduce using rule 331 (modifiers_opt)

    modifiers_opt	go to state 478
    modifiers	go to state 47
    modifier	go to state 48



state 415

    class_member_declaration  ->  type_declaration .   (rule 371)

    $default	reduce using rule 371 (class_member_declaration)



state 416

    class_body  ->  '{' class_member_declarations_opt . '}'   (rule 357)

    '}' 	shift, and go to state 479



state 417

    class_member_declarations_opt  ->  class_member_declarations .   (rule 359)
    class_member_declarations  ->  class_member_declarations . class_member_declaration   (rule 361)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 359 (class_member_declarations_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 414
    type_declaration	go to state 415
    class_declaration	go to state 16
    class_member_declaration	go to state 480
    constant_declaration	go to state 419
    field_declaration	go to state 420
    method_declaration	go to state 421
    method_header	go to state 346
    property_declaration	go to state 422
    event_declaration	go to state 423
    indexer_declaration	go to state 424
    operator_declaration	go to state 425
    constructor_declaration	go to state 426
    destructor_declaration	go to state 427
    struct_declaration	go to state 17
    interface_declaration	go to state 18
    enum_declaration	go to state 19
    delegate_declaration	go to state 20
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 418

    class_member_declarations  ->  class_member_declaration .   (rule 360)

    $default	reduce using rule 360 (class_member_declarations)



state 419

    class_member_declaration  ->  constant_declaration .   (rule 362)

    $default	reduce using rule 362 (class_member_declaration)



state 420

    class_member_declaration  ->  field_declaration .   (rule 363)

    $default	reduce using rule 363 (class_member_declaration)



state 421

    class_member_declaration  ->  method_declaration .   (rule 364)

    $default	reduce using rule 364 (class_member_declaration)



state 422

    class_member_declaration  ->  property_declaration .   (rule 365)

    $default	reduce using rule 365 (class_member_declaration)



state 423

    class_member_declaration  ->  event_declaration .   (rule 366)

    $default	reduce using rule 366 (class_member_declaration)



state 424

    class_member_declaration  ->  indexer_declaration .   (rule 367)

    $default	reduce using rule 367 (class_member_declaration)



state 425

    class_member_declaration  ->  operator_declaration .   (rule 368)

    $default	reduce using rule 368 (class_member_declaration)



state 426

    class_member_declaration  ->  constructor_declaration .   (rule 369)

    $default	reduce using rule 369 (class_member_declaration)



state 427

    class_member_declaration  ->  destructor_declaration .   (rule 370)

    $default	reduce using rule 370 (class_member_declaration)



state 428

    class_declaration  ->  attributes_opt modifiers_opt CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt .   (rule 351)

    $default	reduce using rule 351 (class_declaration)



state 429

    opt_generic  ->  GEN_LT @1 genericlist GEN_GT .   (rule 13)

    $default	reduce using rule 13 (opt_generic)



state 430

    genericlist  ->  type COMMA . @3 genericlist   (rule 18)

    $default	reduce using rule 17 (@3)

    @3  	go to state 481



state 431

    parameter_modifier_opt  ->  OUT .   (rule 396)

    $default	reduce using rule 396 (parameter_modifier_opt)



state 432

    parameter_array  ->  attributes_opt PARAMS . type IDENTIFIER   (rule 397)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 482
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 433

    parameter_modifier_opt  ->  REF .   (rule 395)

    $default	reduce using rule 395 (parameter_modifier_opt)



state 434

    fixed_parameter  ->  attributes_opt parameter_modifier_opt . type IDENTIFIER fixed_parameter_opt_default   (rule 391)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 483
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 435

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' . ';'   (rule 527)

    ';' 	shift, and go to state 484



state 436

    formal_parameter_list  ->  formal_parameter_list COMMA . formal_parameter   (rule 388)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter	go to state 485
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 437

    enum_member_declaration  ->  attributes_opt IDENTIFIER .   (rule 525)
    enum_member_declaration  ->  attributes_opt IDENTIFIER . '=' constant_expression   (rule 526)

    '=' 	shift, and go to state 486

    $default	reduce using rule 525 (enum_member_declaration)



state 438

    enum_body  ->  '{' enum_member_declarations_opt '}' .   (rule 519)

    $default	reduce using rule 519 (enum_body)



state 439

    enum_body  ->  '{' enum_member_declarations COMMA . '}'   (rule 520)
    enum_member_declarations  ->  enum_member_declarations COMMA . enum_member_declaration   (rule 524)

    '}' 	shift, and go to state 487

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 326
    enum_member_declaration	go to state 488
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 440

    interface_type_list  ->  interface_type_list COMMA type_name .   (rule 356)

    $default	reduce using rule 356 (interface_type_list)



state 441

    new_opt  ->  NEW .   (rule 504)

    $default	reduce using rule 504 (new_opt)



state 442

    interface_method_declaration  ->  attributes_opt new_opt . type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 501)
    interface_method_declaration  ->  attributes_opt new_opt . VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 502)
    interface_property_declaration  ->  attributes_opt new_opt . type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 505)
    interface_indexer_declaration  ->  attributes_opt new_opt . type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)
    interface_event_declaration  ->  attributes_opt new_opt . EVENT type IDENTIFIER interface_empty_body   (rule 511)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    EVENT	shift, and go to state 489
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 490

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 491
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 443

    interface_body  ->  '{' interface_member_declarations_opt '}' .   (rule 492)

    $default	reduce using rule 492 (interface_body)



state 444

    interface_member_declarations  ->  interface_member_declarations interface_member_declaration .   (rule 496)

    $default	reduce using rule 496 (interface_member_declarations)



state 445

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    constant_declaration  ->  attributes_opt modifiers_opt . CONST type constant_declarators ';'   (rule 372)
    field_declaration  ->  attributes_opt modifiers_opt . type variable_declarators ';'   (rule 373)
    method_header  ->  attributes_opt modifiers_opt . type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    method_header  ->  attributes_opt modifiers_opt . VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)
    property_declaration  ->  attributes_opt modifiers_opt . type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)
    indexer_declaration  ->  attributes_opt modifiers_opt . indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 416)
    operator_declaration  ->  attributes_opt modifiers_opt . operator_declarator operator_body   (rule 420)
    constructor_declaration  ->  attributes_opt modifiers_opt . constructor_declarator constructor_body   (rule 449)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    IDENTIFIER	shift, and go to state 492
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CLASS	shift, and go to state 57
    CONST	shift, and go to state 493
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 58
    DOUBLE	shift, and go to state 82
    ENUM	shift, and go to state 59
    EVENT	shift, and go to state 494
    EXPLICIT	shift, and go to state 495
    FLOAT	shift, and go to state 83
    IMPLICIT	shift, and go to state 496
    INT 	shift, and go to state 84
    INTERFACE	shift, and go to state 60
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    STRUCT	shift, and go to state 61
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 497

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 498
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10
    indexer_declarator	go to state 499
    operator_declarator	go to state 500
    overloadable_operator_declarator	go to state 501
    conversion_operator_declarator	go to state 502
    constructor_declarator	go to state 503



state 446

    block  ->  '{' . statement_list_opt '}'   (rule 197)

    IDENTIFIER	shift, and go to state 504
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONST	shift, and go to state 507
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    VOID	shift, and go to state 249
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    $default	reduce using rule 198 (statement_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement	go to state 536
    embedded_statement	go to state 537
    block	go to state 538
    statement_list_opt	go to state 539
    statement_list	go to state 540
    empty_statement	go to state 541
    labeled_statement	go to state 542
    declaration_statement	go to state 543
    local_variable_declaration	go to state 544
    local_constant_declaration	go to state 545
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 447

    method_body  ->  ';' .   (rule 386)

    $default	reduce using rule 386 (method_body)



state 448

    method_body  ->  block .   (rule 385)

    $default	reduce using rule 385 (method_body)



state 449

    method_declaration  ->  method_header method_body .   (rule 374)

    $default	reduce using rule 374 (method_declaration)



state 450

    struct_body  ->  '{' struct_member_declarations_opt '}' .   (rule 465)

    $default	reduce using rule 465 (struct_body)



state 451

    struct_member_declarations  ->  struct_member_declarations struct_member_declaration .   (rule 469)

    $default	reduce using rule 469 (struct_member_declarations)



state 452

    base_access  ->  BASE LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 88)

    $default	reduce using rule 88 (base_access)



state 453

    checked_expression  ->  CHECKED '(' expression ')' .   (rule 99)

    $default	reduce using rule 99 (checked_expression)



state 454

    delegate_expression  ->  DELEGATE '(' formal_parameter_list_opt ')' . block   (rule 71)

    '{' 	shift, and go to state 446

    block	go to state 570



state 455

    object_creation_expression  ->  NEW type '(' argument_list_opt . ')'   (rule 92)

    ')' 	shift, and go to state 571



state 456

    expression_list  ->  expression_list . COMMA expression   (rule 85)
    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list . RIGHT_BRACKET rank_specifiers_opt array_initializer_opt   (rule 93)

    COMMA	shift, and go to state 275
    RIGHT_BRACKET	shift, and go to state 572



state 457

    array_initializer  ->  '{' @8 . variable_initializer_list_opt '}'   (rule 480)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    STACKALLOC	shift, and go to state 573
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 362

    $default	reduce using rule 481 (variable_initializer_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 574
    variable_initializer	go to state 575
    stackalloc_initializer	go to state 576
    qualified_identifier	go to state 225
    qualifier	go to state 10
    array_initializer	go to state 577
    variable_initializer_list_opt	go to state 578
    variable_initializer_list	go to state 579



state 458

    sizeof_expression  ->  SIZEOF '(' type ')' .   (rule 103)

    $default	reduce using rule 103 (sizeof_expression)



state 459

    typeof_expression  ->  TYPEOF '(' VOID ')' .   (rule 98)

    $default	reduce using rule 98 (typeof_expression)



state 460

    typeof_expression  ->  TYPEOF '(' type ')' .   (rule 97)

    $default	reduce using rule 97 (typeof_expression)



state 461

    unchecked_expression  ->  UNCHECKED '(' expression ')' .   (rule 100)

    $default	reduce using rule 100 (unchecked_expression)



state 462

    cast_expression  ->  '(' VOID type_quals_opt ')' . unary_expression   (rule 126)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 580
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 463

    type_quals  ->  type_quals type_qual .   (rule 130)

    $default	reduce using rule 130 (type_quals)



state 464

    cast_expression  ->  '(' primitive_type type_quals_opt ')' . unary_expression   (rule 125)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 581
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 465

    cast_expression  ->  '(' multiplicative_expression '*' ')' . unary_expression   (rule 123)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 582
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 466

    cast_expression  ->  '(' expression ')' unary_expression_not_plusminus .   (rule 122)

    $default	reduce using rule 122 (cast_expression)



state 467

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt . ')' unary_expression   (rule 124)

    ')' 	shift, and go to state 583



state 468

    argument  ->  IDENTIFIER ':' . argument   (rule 55)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument	go to state 584
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 469

    argument  ->  OUT variable_reference .   (rule 54)

    $default	reduce using rule 54 (argument)



state 470

    variable_reference  ->  expression .   (rule 49)

    $default	reduce using rule 49 (variable_reference)



state 471

    argument  ->  REF variable_reference .   (rule 53)

    $default	reduce using rule 53 (argument)



state 472

    argument_list  ->  argument_list COMMA . argument   (rule 51)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument	go to state 585
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 473

    invocation_expression  ->  qualified_identifier_opt_generic '(' argument_list_opt ')' .   (rule 77)

    $default	reduce using rule 77 (invocation_expression)



state 474

    element_access  ->  primary_expression LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 80)

    $default	reduce using rule 80 (element_access)



state 475

    invocation_expression  ->  primary_expression_no_parenthesis opt_generic '(' @4 . argument_list_opt ')'   (rule 76)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 78 (argument_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument_list	go to state 380
    argument	go to state 381
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    argument_list_opt	go to state 586
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 476

    conditional_expression  ->  conditional_or_expression '?' expression ':' . expression   (rule 164)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 587
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 477

    element_access  ->  qualified_identifier LEFT_BRACKET expression_list RIGHT_BRACKET .   (rule 81)

    $default	reduce using rule 81 (element_access)



state 478

    class_declaration  ->  attributes_opt modifiers_opt . CLASS IDENTIFIER opt_generic_fct @6 class_base_opt class_body comma_opt   (rule 351)
    constant_declaration  ->  attributes_opt modifiers_opt . CONST type constant_declarators ';'   (rule 372)
    field_declaration  ->  attributes_opt modifiers_opt . type variable_declarators ';'   (rule 373)
    method_header  ->  attributes_opt modifiers_opt . type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    method_header  ->  attributes_opt modifiers_opt . VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)
    property_declaration  ->  attributes_opt modifiers_opt . type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt modifiers_opt . EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)
    indexer_declaration  ->  attributes_opt modifiers_opt . indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 416)
    operator_declaration  ->  attributes_opt modifiers_opt . operator_declarator operator_body   (rule 420)
    constructor_declaration  ->  attributes_opt modifiers_opt . constructor_declarator constructor_body   (rule 449)
    destructor_declaration  ->  attributes_opt modifiers_opt . '~' IDENTIFIER '(' ')' block   (rule 455)
    struct_declaration  ->  attributes_opt modifiers_opt . STRUCT IDENTIFIER @7 struct_interfaces_opt struct_body comma_opt   (rule 461)
    interface_declaration  ->  attributes_opt modifiers_opt . INTERFACE IDENTIFIER @9 interface_base_opt interface_body comma_opt   (rule 488)
    enum_declaration  ->  attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt @10 enum_body comma_opt   (rule 515)
    delegate_declaration  ->  attributes_opt modifiers_opt . DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';'   (rule 527)

    IDENTIFIER	shift, and go to state 492
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CLASS	shift, and go to state 57
    CONST	shift, and go to state 493
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 58
    DOUBLE	shift, and go to state 82
    ENUM	shift, and go to state 59
    EVENT	shift, and go to state 494
    EXPLICIT	shift, and go to state 495
    FLOAT	shift, and go to state 83
    IMPLICIT	shift, and go to state 496
    INT 	shift, and go to state 84
    INTERFACE	shift, and go to state 60
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    STRUCT	shift, and go to state 61
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 497
    '~' 	shift, and go to state 588

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 498
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10
    indexer_declarator	go to state 499
    operator_declarator	go to state 500
    overloadable_operator_declarator	go to state 501
    conversion_operator_declarator	go to state 502
    constructor_declarator	go to state 503



state 479

    class_body  ->  '{' class_member_declarations_opt '}' .   (rule 357)

    $default	reduce using rule 357 (class_body)



state 480

    class_member_declarations  ->  class_member_declarations class_member_declaration .   (rule 361)

    $default	reduce using rule 361 (class_member_declarations)



state 481

    genericlist  ->  type COMMA @3 . genericlist   (rule 18)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    genericlist	go to state 589
    type	go to state 319
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 482

    pointer_type  ->  type . '*'   (rule 41)
    parameter_array  ->  attributes_opt PARAMS type . IDENTIFIER   (rule 397)

    IDENTIFIER	shift, and go to state 590
    '*' 	shift, and go to state 119



state 483

    pointer_type  ->  type . '*'   (rule 41)
    fixed_parameter  ->  attributes_opt parameter_modifier_opt type . IDENTIFIER fixed_parameter_opt_default   (rule 391)

    IDENTIFIER	shift, and go to state 591
    '*' 	shift, and go to state 119



state 484

    delegate_declaration  ->  attributes_opt modifiers_opt DELEGATE return_type IDENTIFIER opt_generic_fct '(' formal_parameter_list_opt ')' ';' .   (rule 527)

    $default	reduce using rule 527 (delegate_declaration)



state 485

    formal_parameter_list  ->  formal_parameter_list COMMA formal_parameter .   (rule 388)

    $default	reduce using rule 388 (formal_parameter_list)



state 486

    enum_member_declaration  ->  attributes_opt IDENTIFIER '=' . constant_expression   (rule 526)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 592
    constant_expression	go to state 593
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 487

    enum_body  ->  '{' enum_member_declarations COMMA '}' .   (rule 520)

    $default	reduce using rule 520 (enum_body)



state 488

    enum_member_declarations  ->  enum_member_declarations COMMA enum_member_declaration .   (rule 524)

    $default	reduce using rule 524 (enum_member_declarations)



state 489

    interface_event_declaration  ->  attributes_opt new_opt EVENT . type IDENTIFIER interface_empty_body   (rule 511)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 594
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 490

    pointer_type  ->  VOID . '*'   (rule 42)
    interface_method_declaration  ->  attributes_opt new_opt VOID . IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 502)

    IDENTIFIER	shift, and go to state 595
    '*' 	shift, and go to state 118



state 491

    pointer_type  ->  type . '*'   (rule 41)
    interface_method_declaration  ->  attributes_opt new_opt type . IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body   (rule 501)
    interface_property_declaration  ->  attributes_opt new_opt type . IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 505)
    interface_indexer_declaration  ->  attributes_opt new_opt type . THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)

    IDENTIFIER	shift, and go to state 596
    THIS	shift, and go to state 597
    '*' 	shift, and go to state 119



state 492

    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)
    constructor_declarator  ->  IDENTIFIER . '(' formal_parameter_list_opt ')' constructor_initializer_opt   (rule 450)

    '(' 	shift, and go to state 598
    '.' 	shift, and go to state 26

    $default	reduce using rule 311 (qualified_identifier)



state 493

    constant_declaration  ->  attributes_opt modifiers_opt CONST . type constant_declarators ';'   (rule 372)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 599
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 494

    event_declaration  ->  attributes_opt modifiers_opt EVENT . type variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt modifiers_opt EVENT . type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 600
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 495

    conversion_operator_declarator  ->  EXPLICIT . OPERATOR type '(' type IDENTIFIER ')'   (rule 448)

    OPERATOR	shift, and go to state 601



state 496

    conversion_operator_declarator  ->  IMPLICIT . OPERATOR type '(' type IDENTIFIER ')'   (rule 447)

    OPERATOR	shift, and go to state 602



state 497

    pointer_type  ->  VOID . '*'   (rule 42)
    method_header  ->  attributes_opt modifiers_opt VOID . qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)

    IDENTIFIER	shift, and go to state 53
    '*' 	shift, and go to state 118

    qualified_identifier	go to state 603
    qualifier	go to state 10



state 498

    pointer_type  ->  type . '*'   (rule 41)
    field_declaration  ->  attributes_opt modifiers_opt type . variable_declarators ';'   (rule 373)
    method_header  ->  attributes_opt modifiers_opt type . qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    property_declaration  ->  attributes_opt modifiers_opt type . qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)
    indexer_declarator  ->  type . THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 417)
    indexer_declarator  ->  type . qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 418)
    overloadable_operator_declarator  ->  type . OPERATOR overloadable_operator '(' type IDENTIFIER ')'   (rule 423)
    overloadable_operator_declarator  ->  type . OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 424)

    IDENTIFIER	shift, and go to state 604
    OPERATOR	shift, and go to state 605
    THIS	shift, and go to state 606
    '*' 	shift, and go to state 119

    variable_declarators	go to state 607
    variable_declarator	go to state 608
    qualified_identifier	go to state 609
    qualifier	go to state 610
    qualified_this	go to state 611



state 499

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator . ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 416)

    $default	reduce using rule 556 (ENTER_getset)

    ENTER_getset	go to state 612



state 500

    operator_declaration  ->  attributes_opt modifiers_opt operator_declarator . operator_body   (rule 420)

    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 613

    block	go to state 614
    operator_body	go to state 615



state 501

    operator_declarator  ->  overloadable_operator_declarator .   (rule 421)

    $default	reduce using rule 421 (operator_declarator)



state 502

    operator_declarator  ->  conversion_operator_declarator .   (rule 422)

    $default	reduce using rule 422 (operator_declarator)



state 503

    constructor_declaration  ->  attributes_opt modifiers_opt constructor_declarator . constructor_body   (rule 449)

    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 616

    block	go to state 617
    constructor_body	go to state 618



state 504

    labeled_statement  ->  IDENTIFIER . ':' statement   (rule 203)
    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)

    ':' 	shift, and go to state 619
    '.' 	shift, and go to state 26

    $default	reduce using rule 311 (qualified_identifier)



state 505

    break_statement  ->  BREAK . ';'   (rule 270)

    ';' 	shift, and go to state 620



state 506

    checked_expression  ->  CHECKED . '(' expression ')'   (rule 99)
    checked_statement  ->  CHECKED . block   (rule 289)

    '(' 	shift, and go to state 247
    '{' 	shift, and go to state 446

    block	go to state 621



state 507

    local_constant_declaration  ->  CONST . type constant_declarators   (rule 215)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 622
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 508

    continue_statement  ->  CONTINUE . ';'   (rule 271)

    ';' 	shift, and go to state 623



state 509

    do_statement  ->  DO . embedded_statement WHILE '(' boolean_expression ')' ';'   (rule 250)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 624
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 510

    fixed_statement  ->  FIXED . '(' type fixed_pointer_declarators ')' embedded_statement   (rule 295)

    '(' 	shift, and go to state 625



state 511

    for_statement  ->  FOR . '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 251)

    '(' 	shift, and go to state 626



state 512

    foreach_statement  ->  FOREACH . '(' type IDENTIFIER IN expression ')' embedded_statement   (rule 264)

    '(' 	shift, and go to state 627



state 513

    goto_statement  ->  GOTO . IDENTIFIER ';'   (rule 272)
    goto_statement  ->  GOTO . CASE constant_expression ';'   (rule 273)
    goto_statement  ->  GOTO . DEFAULT ';'   (rule 274)

    IDENTIFIER	shift, and go to state 628
    CASE	shift, and go to state 629
    DEFAULT	shift, and go to state 630



state 514

    if_statement  ->  IF . ifpart opt_else   (rule 229)

    '(' 	shift, and go to state 631

    ifpart	go to state 632



state 515

    lock_statement  ->  LOCK . '(' expression ')' embedded_statement   (rule 291)

    '(' 	shift, and go to state 633



state 516

    return_statement  ->  RETURN . expression_opt ';'   (rule 275)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 276 (expression_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 634
    expression_opt	go to state 635
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 517

    switch_statement  ->  SWITCH . '(' expression ')' switch_block   (rule 233)

    '(' 	shift, and go to state 636



state 518

    throw_statement  ->  THROW . expression_opt ';'   (rule 278)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 276 (expression_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 634
    expression_opt	go to state 637
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 519

    try_statement  ->  TRY . block catch_clauses   (rule 279)
    try_statement  ->  TRY . block finally_clause   (rule 280)
    try_statement  ->  TRY . block catch_clauses finally_clause   (rule 281)

    '{' 	shift, and go to state 446

    block	go to state 638



state 520

    unchecked_expression  ->  UNCHECKED . '(' expression ')'   (rule 100)
    unchecked_statement  ->  UNCHECKED . block   (rule 290)

    '(' 	shift, and go to state 255
    '{' 	shift, and go to state 446

    block	go to state 639



state 521

    unsafe_statement  ->  UNSAFE . block   (rule 248)

    '{' 	shift, and go to state 446

    block	go to state 640



state 522

    using_statement  ->  USING . '(' resource_acquisition ')' embedded_statement   (rule 292)

    '(' 	shift, and go to state 641



state 523

    while_statement  ->  WHILE . '(' boolean_expression ')' embedded_statement   (rule 249)

    '(' 	shift, and go to state 642



state 524

    empty_statement  ->  ';' .   (rule 202)

    $default	reduce using rule 202 (empty_statement)



state 525

    type_name  ->  qualified_identifier_opt_generic .   (rule 10)
    invocation_expression  ->  qualified_identifier_opt_generic . '(' argument_list_opt ')'   (rule 77)

    '(' 	shift, and go to state 269

    $default	reduce using rule 10 (type_name)



state 526

    pointer_type  ->  type . '*'   (rule 41)
    local_variable_declaration  ->  type . variable_declarators   (rule 206)

    IDENTIFIER	shift, and go to state 643
    '*' 	shift, and go to state 119

    variable_declarators	go to state 644
    variable_declarator	go to state 608



state 527

    simple_type  ->  primitive_type .   (rule 23)
    member_access  ->  primitive_type . '.' IDENTIFIER   (rule 74)

    '.' 	shift, and go to state 270

    $default	reduce using rule 23 (simple_type)



state 528

    primary_expression_no_parenthesis  ->  invocation_expression .   (rule 61)
    statement_expression  ->  invocation_expression .   (rule 220)

    COMMA	reduce using rule 220 (statement_expression)
    ')' 	reduce using rule 220 (statement_expression)
    ';' 	reduce using rule 220 (statement_expression)
    $default	reduce using rule 61 (primary_expression_no_parenthesis)



state 529

    postfix_expression  ->  post_increment_expression .   (rule 106)
    statement_expression  ->  post_increment_expression .   (rule 223)

    COMMA	reduce using rule 223 (statement_expression)
    ')' 	reduce using rule 223 (statement_expression)
    ';' 	reduce using rule 223 (statement_expression)
    $default	reduce using rule 106 (postfix_expression)



state 530

    postfix_expression  ->  post_decrement_expression .   (rule 107)
    statement_expression  ->  post_decrement_expression .   (rule 224)

    COMMA	reduce using rule 224 (statement_expression)
    ')' 	reduce using rule 224 (statement_expression)
    ';' 	reduce using rule 224 (statement_expression)
    $default	reduce using rule 107 (postfix_expression)



state 531

    new_expression  ->  object_creation_expression .   (rule 91)
    statement_expression  ->  object_creation_expression .   (rule 221)

    COMMA	reduce using rule 221 (statement_expression)
    ')' 	reduce using rule 221 (statement_expression)
    ';' 	reduce using rule 221 (statement_expression)
    $default	reduce using rule 91 (new_expression)



state 532

    unary_expression  ->  pre_increment_expression .   (rule 119)
    statement_expression  ->  pre_increment_expression .   (rule 225)

    COMMA	reduce using rule 225 (statement_expression)
    ')' 	reduce using rule 225 (statement_expression)
    ';' 	reduce using rule 225 (statement_expression)
    $default	reduce using rule 119 (unary_expression)



state 533

    unary_expression  ->  pre_decrement_expression .   (rule 120)
    statement_expression  ->  pre_decrement_expression .   (rule 226)

    COMMA	reduce using rule 226 (statement_expression)
    ')' 	reduce using rule 226 (statement_expression)
    ';' 	reduce using rule 226 (statement_expression)
    $default	reduce using rule 120 (unary_expression)



state 534

    assignment  ->  unary_expression . assignment_operator expression   (rule 165)

    PLUSEQ	shift, and go to state 279
    MINUSEQ	shift, and go to state 280
    STAREQ	shift, and go to state 281
    DIVEQ	shift, and go to state 282
    MODEQ	shift, and go to state 283
    XOREQ	shift, and go to state 284
    ANDEQ	shift, and go to state 285
    OREQ	shift, and go to state 286
    GTGTEQ	shift, and go to state 287
    LTLTEQ	shift, and go to state 288
    '=' 	shift, and go to state 289

    assignment_operator	go to state 290



state 535

    statement_expression  ->  assignment .   (rule 222)

    $default	reduce using rule 222 (statement_expression)



state 536

    statement_list  ->  statement .   (rule 200)

    $default	reduce using rule 200 (statement_list)



state 537

    statement  ->  embedded_statement .   (rule 183)

    $default	reduce using rule 183 (statement)



state 538

    embedded_statement  ->  block .   (rule 184)

    $default	reduce using rule 184 (embedded_statement)



state 539

    block  ->  '{' statement_list_opt . '}'   (rule 197)

    '}' 	shift, and go to state 645



state 540

    statement_list_opt  ->  statement_list .   (rule 199)
    statement_list  ->  statement_list . statement   (rule 201)

    IDENTIFIER	shift, and go to state 504
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONST	shift, and go to state 507
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    VOID	shift, and go to state 249
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    $default	reduce using rule 199 (statement_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement	go to state 646
    embedded_statement	go to state 537
    block	go to state 538
    empty_statement	go to state 541
    labeled_statement	go to state 542
    declaration_statement	go to state 543
    local_variable_declaration	go to state 544
    local_constant_declaration	go to state 545
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 541

    embedded_statement  ->  empty_statement .   (rule 185)

    $default	reduce using rule 185 (embedded_statement)



state 542

    statement  ->  labeled_statement .   (rule 181)

    $default	reduce using rule 181 (statement)



state 543

    statement  ->  declaration_statement .   (rule 182)

    $default	reduce using rule 182 (statement)



state 544

    declaration_statement  ->  local_variable_declaration . ';'   (rule 204)

    ';' 	shift, and go to state 647



state 545

    declaration_statement  ->  local_constant_declaration . ';'   (rule 205)

    ';' 	shift, and go to state 648



state 546

    embedded_statement  ->  expression_statement .   (rule 186)

    $default	reduce using rule 186 (embedded_statement)



state 547

    expression_statement  ->  statement_expression . ';'   (rule 219)

    ';' 	shift, and go to state 649



state 548

    embedded_statement  ->  selection_statement .   (rule 187)

    $default	reduce using rule 187 (embedded_statement)



state 549

    selection_statement  ->  if_statement .   (rule 227)

    $default	reduce using rule 227 (selection_statement)



state 550

    selection_statement  ->  switch_statement .   (rule 228)

    $default	reduce using rule 228 (selection_statement)



state 551

    embedded_statement  ->  iteration_statement .   (rule 188)

    $default	reduce using rule 188 (embedded_statement)



state 552

    embedded_statement  ->  unsafe_statement .   (rule 195)

    $default	reduce using rule 195 (embedded_statement)



state 553

    iteration_statement  ->  while_statement .   (rule 244)

    $default	reduce using rule 244 (iteration_statement)



state 554

    iteration_statement  ->  do_statement .   (rule 245)

    $default	reduce using rule 245 (iteration_statement)



state 555

    iteration_statement  ->  for_statement .   (rule 246)

    $default	reduce using rule 246 (iteration_statement)



state 556

    iteration_statement  ->  foreach_statement .   (rule 247)

    $default	reduce using rule 247 (iteration_statement)



state 557

    embedded_statement  ->  jump_statement .   (rule 189)

    $default	reduce using rule 189 (embedded_statement)



state 558

    jump_statement  ->  break_statement .   (rule 265)

    $default	reduce using rule 265 (jump_statement)



state 559

    jump_statement  ->  continue_statement .   (rule 266)

    $default	reduce using rule 266 (jump_statement)



state 560

    jump_statement  ->  goto_statement .   (rule 267)

    $default	reduce using rule 267 (jump_statement)



state 561

    jump_statement  ->  return_statement .   (rule 268)

    $default	reduce using rule 268 (jump_statement)



state 562

    jump_statement  ->  throw_statement .   (rule 269)

    $default	reduce using rule 269 (jump_statement)



state 563

    embedded_statement  ->  try_statement .   (rule 190)

    $default	reduce using rule 190 (embedded_statement)



state 564

    embedded_statement  ->  checked_statement .   (rule 191)

    $default	reduce using rule 191 (embedded_statement)



state 565

    embedded_statement  ->  unchecked_statement .   (rule 192)

    $default	reduce using rule 192 (embedded_statement)



state 566

    embedded_statement  ->  lock_statement .   (rule 193)

    $default	reduce using rule 193 (embedded_statement)



state 567

    embedded_statement  ->  using_statement .   (rule 194)

    $default	reduce using rule 194 (embedded_statement)



state 568

    embedded_statement  ->  fixed_statement .   (rule 196)

    $default	reduce using rule 196 (embedded_statement)



state 569

    qualified_identifier_opt_generic  ->  qualified_identifier . @2 opt_generic   (rule 15)
    array_type  ->  qualified_identifier . rank_specifier   (rule 45)
    element_access  ->  qualified_identifier . LEFT_BRACKET expression_list RIGHT_BRACKET   (rule 81)
    postfix_expression  ->  qualified_identifier .   (rule 105)

    RANK_SPECIFIER	shift, and go to state 120
    LEFT_BRACKET	shift, and go to state 312

    IDENTIFIER	reduce using rule 14 (@2)
    GEN_LT	reduce using rule 14 (@2)
    '*' 	reduce using rule 14 (@2)
    '*' 	[reduce using rule 105 (postfix_expression)]
    '(' 	reduce using rule 14 (@2)
    $default	reduce using rule 105 (postfix_expression)

    @2  	go to state 123
    rank_specifier	go to state 124



state 570

    delegate_expression  ->  DELEGATE '(' formal_parameter_list_opt ')' block .   (rule 71)

    $default	reduce using rule 71 (delegate_expression)



state 571

    object_creation_expression  ->  NEW type '(' argument_list_opt ')' .   (rule 92)

    $default	reduce using rule 92 (object_creation_expression)



state 572

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET . rank_specifiers_opt array_initializer_opt   (rule 93)

    RANK_SPECIFIER	shift, and go to state 120

    $default	reduce using rule 46 (rank_specifiers_opt)

    rank_specifiers_opt	go to state 650
    rank_specifier	go to state 651



state 573

    stackalloc_initializer  ->  STACKALLOC . type LEFT_BRACKET expression RIGHT_BRACKET   (rule 214)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 652
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 574

    variable_initializer  ->  expression .   (rule 211)

    $default	reduce using rule 211 (variable_initializer)



state 575

    variable_initializer_list  ->  variable_initializer .   (rule 485)

    $default	reduce using rule 485 (variable_initializer_list)



state 576

    variable_initializer  ->  stackalloc_initializer .   (rule 213)

    $default	reduce using rule 213 (variable_initializer)



state 577

    variable_initializer  ->  array_initializer .   (rule 212)

    $default	reduce using rule 212 (variable_initializer)



state 578

    array_initializer  ->  '{' @8 variable_initializer_list_opt . '}'   (rule 480)

    '}' 	shift, and go to state 653



state 579

    variable_initializer_list_opt  ->  variable_initializer_list . opt_comma   (rule 482)
    variable_initializer_list  ->  variable_initializer_list . COMMA variable_initializer   (rule 486)

    COMMA	shift, and go to state 654

    $default	reduce using rule 484 (opt_comma)

    opt_comma	go to state 655



state 580

    cast_expression  ->  '(' VOID type_quals_opt ')' unary_expression .   (rule 126)

    $default	reduce using rule 126 (cast_expression)



state 581

    cast_expression  ->  '(' primitive_type type_quals_opt ')' unary_expression .   (rule 125)

    $default	reduce using rule 125 (cast_expression)



state 582

    cast_expression  ->  '(' multiplicative_expression '*' ')' unary_expression .   (rule 123)

    $default	reduce using rule 123 (cast_expression)



state 583

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt ')' . unary_expression   (rule 124)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 656
    cast_expression	go to state 211
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 584

    argument  ->  IDENTIFIER ':' argument .   (rule 55)

    $default	reduce using rule 55 (argument)



state 585

    argument_list  ->  argument_list COMMA argument .   (rule 51)

    $default	reduce using rule 51 (argument_list)



state 586

    invocation_expression  ->  primary_expression_no_parenthesis opt_generic '(' @4 argument_list_opt . ')'   (rule 76)

    ')' 	shift, and go to state 657



state 587

    conditional_expression  ->  conditional_or_expression '?' expression ':' expression .   (rule 164)

    $default	reduce using rule 164 (conditional_expression)



state 588

    destructor_declaration  ->  attributes_opt modifiers_opt '~' . IDENTIFIER '(' ')' block   (rule 455)

    IDENTIFIER	shift, and go to state 658



state 589

    genericlist  ->  type COMMA @3 genericlist .   (rule 18)

    $default	reduce using rule 18 (genericlist)



state 590

    parameter_array  ->  attributes_opt PARAMS type IDENTIFIER .   (rule 397)

    $default	reduce using rule 397 (parameter_array)



state 591

    fixed_parameter  ->  attributes_opt parameter_modifier_opt type IDENTIFIER . fixed_parameter_opt_default   (rule 391)

    '=' 	shift, and go to state 659

    $default	reduce using rule 392 (fixed_parameter_opt_default)

    fixed_parameter_opt_default	go to state 660



state 592

    constant_expression  ->  expression .   (rule 179)

    $default	reduce using rule 179 (constant_expression)



state 593

    enum_member_declaration  ->  attributes_opt IDENTIFIER '=' constant_expression .   (rule 526)

    $default	reduce using rule 526 (enum_member_declaration)



state 594

    pointer_type  ->  type . '*'   (rule 41)
    interface_event_declaration  ->  attributes_opt new_opt EVENT type . IDENTIFIER interface_empty_body   (rule 511)

    IDENTIFIER	shift, and go to state 661
    '*' 	shift, and go to state 119



state 595

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER . '(' formal_parameter_list_opt ')' interface_empty_body   (rule 502)

    '(' 	shift, and go to state 662



state 596

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER . '(' formal_parameter_list_opt ')' interface_empty_body   (rule 501)
    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER . ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 505)

    '(' 	shift, and go to state 663

    $default	reduce using rule 556 (ENTER_getset)

    ENTER_getset	go to state 664



state 597

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)

    LEFT_BRACKET	shift, and go to state 665



state 598

    constructor_declarator  ->  IDENTIFIER '(' . formal_parameter_list_opt ')' constructor_initializer_opt   (rule 450)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 666
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 599

    pointer_type  ->  type . '*'   (rule 41)
    constant_declaration  ->  attributes_opt modifiers_opt CONST type . constant_declarators ';'   (rule 372)

    IDENTIFIER	shift, and go to state 667
    '*' 	shift, and go to state 119

    constant_declarators	go to state 668
    constant_declarator	go to state 669



state 600

    pointer_type  ->  type . '*'   (rule 41)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type . variable_declarators ';'   (rule 410)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type . qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)

    IDENTIFIER	shift, and go to state 604
    '*' 	shift, and go to state 119

    variable_declarators	go to state 670
    variable_declarator	go to state 608
    qualified_identifier	go to state 671
    qualifier	go to state 10



state 601

    conversion_operator_declarator  ->  EXPLICIT OPERATOR . type '(' type IDENTIFIER ')'   (rule 448)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 672
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 602

    conversion_operator_declarator  ->  IMPLICIT OPERATOR . type '(' type IDENTIFIER ')'   (rule 447)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 673
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 603

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier . opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 376)

    GEN_LT	shift, and go to state 116

    $default	reduce using rule 379 (opt_generic_fct)

    opt_generic_fct	go to state 674



state 604

    variable_declarator  ->  IDENTIFIER .   (rule 209)
    variable_declarator  ->  IDENTIFIER . '=' variable_initializer   (rule 210)
    qualified_identifier  ->  IDENTIFIER .   (rule 311)
    qualifier  ->  IDENTIFIER . '.'   (rule 313)

    '.' 	shift, and go to state 26
    '=' 	shift, and go to state 675

    COMMA	reduce using rule 209 (variable_declarator)
    ';' 	reduce using rule 209 (variable_declarator)
    $default	reduce using rule 311 (qualified_identifier)



state 605

    overloadable_operator_declarator  ->  type OPERATOR . overloadable_operator '(' type IDENTIFIER ')'   (rule 423)
    overloadable_operator_declarator  ->  type OPERATOR . overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 424)

    FALSE	shift, and go to state 676
    TRUE	shift, and go to state 677
    GT  	shift, and go to state 678
    GTGT	shift, and go to state 679
    LT  	shift, and go to state 680
    LTLT	shift, and go to state 681
    EQEQ	shift, and go to state 682
    NOTEQ	shift, and go to state 683
    LEQ 	shift, and go to state 684
    GEQ 	shift, and go to state 685
    PLUSPLUS	shift, and go to state 686
    MINUSMINUS	shift, and go to state 687
    '*' 	shift, and go to state 688
    '&' 	shift, and go to state 689
    '!' 	shift, and go to state 690
    '~' 	shift, and go to state 691
    '+' 	shift, and go to state 692
    '-' 	shift, and go to state 693
    '/' 	shift, and go to state 694
    '%' 	shift, and go to state 695
    '^' 	shift, and go to state 696
    '|' 	shift, and go to state 697

    overloadable_operator	go to state 698



state 606

    indexer_declarator  ->  type THIS . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 417)

    LEFT_BRACKET	shift, and go to state 699



state 607

    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 208)
    field_declaration  ->  attributes_opt modifiers_opt type variable_declarators . ';'   (rule 373)

    COMMA	shift, and go to state 700
    ';' 	shift, and go to state 701



state 608

    variable_declarators  ->  variable_declarator .   (rule 207)

    $default	reduce using rule 207 (variable_declarators)



state 609

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier . opt_generic_fct '(' formal_parameter_list_opt ')'   (rule 375)
    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier . ENTER_getset '{' accessor_declarations '}' EXIT_getset   (rule 398)

    GEN_LT	shift, and go to state 116

    '{' 	reduce using rule 556 (ENTER_getset)
    $default	reduce using rule 379 (opt_generic_fct)

    opt_generic_fct	go to state 702
    ENTER_getset	go to state 703



state 610

    qualified_identifier  ->  qualifier . IDENTIFIER   (rule 312)
    qualifier  ->  qualifier . IDENTIFIER '.'   (rule 314)
    qualified_this  ->  qualifier . THIS   (rule 419)

    IDENTIFIER	shift, and go to state 29
    THIS	shift, and go to state 704



state 611

    indexer_declarator  ->  type qualified_this . LEFT_BRACKET formal_parameter_list RIGHT_BRACKET   (rule 418)

    LEFT_BRACKET	shift, and go to state 705



state 612

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset . '{' accessor_declarations '}' EXIT_getset   (rule 416)

    '{' 	shift, and go to state 706



state 613

    operator_body  ->  ';' .   (rule 457)

    $default	reduce using rule 457 (operator_body)



state 614

    operator_body  ->  block .   (rule 456)

    $default	reduce using rule 456 (operator_body)



state 615

    operator_declaration  ->  attributes_opt modifiers_opt operator_declarator operator_body .   (rule 420)

    $default	reduce using rule 420 (operator_declaration)



state 616

    constructor_body  ->  ';' .   (rule 459)

    $default	reduce using rule 459 (constructor_body)



state 617

    constructor_body  ->  block .   (rule 458)

    $default	reduce using rule 458 (constructor_body)



state 618

    constructor_declaration  ->  attributes_opt modifiers_opt constructor_declarator constructor_body .   (rule 449)

    $default	reduce using rule 449 (constructor_declaration)



state 619

    labeled_statement  ->  IDENTIFIER ':' . statement   (rule 203)

    IDENTIFIER	shift, and go to state 504
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONST	shift, and go to state 507
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    VOID	shift, and go to state 249
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement	go to state 707
    embedded_statement	go to state 537
    block	go to state 538
    empty_statement	go to state 541
    labeled_statement	go to state 542
    declaration_statement	go to state 543
    local_variable_declaration	go to state 544
    local_constant_declaration	go to state 545
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 620

    break_statement  ->  BREAK ';' .   (rule 270)

    $default	reduce using rule 270 (break_statement)



state 621

    checked_statement  ->  CHECKED block .   (rule 289)

    $default	reduce using rule 289 (checked_statement)



state 622

    pointer_type  ->  type . '*'   (rule 41)
    local_constant_declaration  ->  CONST type . constant_declarators   (rule 215)

    IDENTIFIER	shift, and go to state 667
    '*' 	shift, and go to state 119

    constant_declarators	go to state 708
    constant_declarator	go to state 669



state 623

    continue_statement  ->  CONTINUE ';' .   (rule 271)

    $default	reduce using rule 271 (continue_statement)



state 624

    do_statement  ->  DO embedded_statement . WHILE '(' boolean_expression ')' ';'   (rule 250)

    WHILE	shift, and go to state 709



state 625

    fixed_statement  ->  FIXED '(' . type fixed_pointer_declarators ')' embedded_statement   (rule 295)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 710
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 626

    for_statement  ->  FOR '(' . for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 251)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 252 (for_initializer_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    local_variable_declaration	go to state 711
    statement_expression	go to state 712
    for_initializer_opt	go to state 713
    for_initializer	go to state 714
    statement_expression_list	go to state 715
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 627

    foreach_statement  ->  FOREACH '(' . type IDENTIFIER IN expression ')' embedded_statement   (rule 264)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 716
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 628

    goto_statement  ->  GOTO IDENTIFIER . ';'   (rule 272)

    ';' 	shift, and go to state 717



state 629

    goto_statement  ->  GOTO CASE . constant_expression ';'   (rule 273)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 592
    constant_expression	go to state 718
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 630

    goto_statement  ->  GOTO DEFAULT . ';'   (rule 274)

    ';' 	shift, and go to state 719



state 631

    ifpart  ->  '(' . boolean_expression ')' embedded_statement   (rule 230)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 720
    boolean_expression	go to state 721
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 632

    if_statement  ->  IF ifpart . opt_else   (rule 229)

    ELSE	shift, and go to state 722

    $default	reduce using rule 232 (opt_else)

    opt_else	go to state 723



state 633

    lock_statement  ->  LOCK '(' . expression ')' embedded_statement   (rule 291)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 724
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 634

    expression_opt  ->  expression .   (rule 277)

    $default	reduce using rule 277 (expression_opt)



state 635

    return_statement  ->  RETURN expression_opt . ';'   (rule 275)

    ';' 	shift, and go to state 725



state 636

    switch_statement  ->  SWITCH '(' . expression ')' switch_block   (rule 233)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 726
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 637

    throw_statement  ->  THROW expression_opt . ';'   (rule 278)

    ';' 	shift, and go to state 727



state 638

    try_statement  ->  TRY block . catch_clauses   (rule 279)
    try_statement  ->  TRY block . finally_clause   (rule 280)
    try_statement  ->  TRY block . catch_clauses finally_clause   (rule 281)

    CATCH	shift, and go to state 728
    FINALLY	shift, and go to state 729

    catch_clauses	go to state 730
    catch_clause	go to state 731
    finally_clause	go to state 732



state 639

    unchecked_statement  ->  UNCHECKED block .   (rule 290)

    $default	reduce using rule 290 (unchecked_statement)



state 640

    unsafe_statement  ->  UNSAFE block .   (rule 248)

    $default	reduce using rule 248 (unsafe_statement)



state 641

    using_statement  ->  USING '(' . resource_acquisition ')' embedded_statement   (rule 292)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 733
    local_variable_declaration	go to state 734
    resource_acquisition	go to state 735
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 642

    while_statement  ->  WHILE '(' . boolean_expression ')' embedded_statement   (rule 249)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 720
    boolean_expression	go to state 736
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 643

    variable_declarator  ->  IDENTIFIER .   (rule 209)
    variable_declarator  ->  IDENTIFIER . '=' variable_initializer   (rule 210)

    '=' 	shift, and go to state 675

    $default	reduce using rule 209 (variable_declarator)



state 644

    local_variable_declaration  ->  type variable_declarators .   (rule 206)
    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 208)

    COMMA	shift, and go to state 700

    $default	reduce using rule 206 (local_variable_declaration)



state 645

    block  ->  '{' statement_list_opt '}' .   (rule 197)

    $default	reduce using rule 197 (block)



state 646

    statement_list  ->  statement_list statement .   (rule 201)

    $default	reduce using rule 201 (statement_list)



state 647

    declaration_statement  ->  local_variable_declaration ';' .   (rule 204)

    $default	reduce using rule 204 (declaration_statement)



state 648

    declaration_statement  ->  local_constant_declaration ';' .   (rule 205)

    $default	reduce using rule 205 (declaration_statement)



state 649

    expression_statement  ->  statement_expression ';' .   (rule 219)

    $default	reduce using rule 219 (expression_statement)



state 650

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt . array_initializer_opt   (rule 93)

    '{' 	shift, and go to state 362

    $default	reduce using rule 95 (array_initializer_opt)

    array_initializer_opt	go to state 737
    array_initializer	go to state 738



state 651

    rank_specifiers_opt  ->  rank_specifier . rank_specifiers_opt   (rule 47)

    RANK_SPECIFIER	shift, and go to state 120

    $default	reduce using rule 46 (rank_specifiers_opt)

    rank_specifiers_opt	go to state 739
    rank_specifier	go to state 651



state 652

    pointer_type  ->  type . '*'   (rule 41)
    stackalloc_initializer  ->  STACKALLOC type . LEFT_BRACKET expression RIGHT_BRACKET   (rule 214)

    LEFT_BRACKET	shift, and go to state 740
    '*' 	shift, and go to state 119



state 653

    array_initializer  ->  '{' @8 variable_initializer_list_opt '}' .   (rule 480)

    $default	reduce using rule 480 (array_initializer)



state 654

    opt_comma  ->  COMMA .   (rule 483)
    variable_initializer_list  ->  variable_initializer_list COMMA . variable_initializer   (rule 486)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    STACKALLOC	shift, and go to state 573
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 362

    $default	reduce using rule 483 (opt_comma)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 574
    variable_initializer	go to state 741
    stackalloc_initializer	go to state 576
    qualified_identifier	go to state 225
    qualifier	go to state 10
    array_initializer	go to state 577



state 655

    variable_initializer_list_opt  ->  variable_initializer_list opt_comma .   (rule 482)

    $default	reduce using rule 482 (variable_initializer_list_opt)



state 656

    cast_expression  ->  '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression .   (rule 124)

    $default	reduce using rule 124 (cast_expression)



state 657

    invocation_expression  ->  primary_expression_no_parenthesis opt_generic '(' @4 argument_list_opt ')' .   (rule 76)

    $default	reduce using rule 76 (invocation_expression)



state 658

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER . '(' ')' block   (rule 455)

    '(' 	shift, and go to state 742



state 659

    fixed_parameter_opt_default  ->  '=' . expression   (rule 393)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 743
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 660

    fixed_parameter  ->  attributes_opt parameter_modifier_opt type IDENTIFIER fixed_parameter_opt_default .   (rule 391)

    $default	reduce using rule 391 (fixed_parameter)



state 661

    interface_event_declaration  ->  attributes_opt new_opt EVENT type IDENTIFIER . interface_empty_body   (rule 511)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 746



state 662

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' . formal_parameter_list_opt ')' interface_empty_body   (rule 502)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 747
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 663

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' . formal_parameter_list_opt ')' interface_empty_body   (rule 501)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 748
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 664

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset . '{' interface_accessors '}' EXIT_getset   (rule 505)

    '{' 	shift, and go to state 749



state 665

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list	go to state 750
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 666

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt . ')' constructor_initializer_opt   (rule 450)

    ')' 	shift, and go to state 751



state 667

    constant_declarator  ->  IDENTIFIER . '=' constant_expression   (rule 218)

    '=' 	shift, and go to state 752



state 668

    constant_declarators  ->  constant_declarators . COMMA constant_declarator   (rule 217)
    constant_declaration  ->  attributes_opt modifiers_opt CONST type constant_declarators . ';'   (rule 372)

    COMMA	shift, and go to state 753
    ';' 	shift, and go to state 754



state 669

    constant_declarators  ->  constant_declarator .   (rule 216)

    $default	reduce using rule 216 (constant_declarators)



state 670

    variable_declarators  ->  variable_declarators . COMMA variable_declarator   (rule 208)
    event_declaration  ->  attributes_opt modifiers_opt EVENT type variable_declarators . ';'   (rule 410)

    COMMA	shift, and go to state 700
    ';' 	shift, and go to state 755



state 671

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier . ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)

    $default	reduce using rule 554 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 756



state 672

    pointer_type  ->  type . '*'   (rule 41)
    conversion_operator_declarator  ->  EXPLICIT OPERATOR type . '(' type IDENTIFIER ')'   (rule 448)

    '*' 	shift, and go to state 119
    '(' 	shift, and go to state 757



state 673

    pointer_type  ->  type . '*'   (rule 41)
    conversion_operator_declarator  ->  IMPLICIT OPERATOR type . '(' type IDENTIFIER ')'   (rule 447)

    '*' 	shift, and go to state 119
    '(' 	shift, and go to state 758



state 674

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier opt_generic_fct . '(' formal_parameter_list_opt ')'   (rule 376)

    '(' 	shift, and go to state 759



state 675

    variable_declarator  ->  IDENTIFIER '=' . variable_initializer   (rule 210)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    STACKALLOC	shift, and go to state 573
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 362

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 574
    variable_initializer	go to state 760
    stackalloc_initializer	go to state 576
    qualified_identifier	go to state 225
    qualifier	go to state 10
    array_initializer	go to state 577



state 676

    overloadable_operator  ->  FALSE .   (rule 432)

    $default	reduce using rule 432 (overloadable_operator)



state 677

    overloadable_operator  ->  TRUE .   (rule 431)

    $default	reduce using rule 431 (overloadable_operator)



state 678

    overloadable_operator  ->  GT .   (rule 443)

    $default	reduce using rule 443 (overloadable_operator)



state 679

    overloadable_operator  ->  GTGT .   (rule 440)

    $default	reduce using rule 440 (overloadable_operator)



state 680

    overloadable_operator  ->  LT .   (rule 444)

    $default	reduce using rule 444 (overloadable_operator)



state 681

    overloadable_operator  ->  LTLT .   (rule 439)

    $default	reduce using rule 439 (overloadable_operator)



state 682

    overloadable_operator  ->  EQEQ .   (rule 441)

    $default	reduce using rule 441 (overloadable_operator)



state 683

    overloadable_operator  ->  NOTEQ .   (rule 442)

    $default	reduce using rule 442 (overloadable_operator)



state 684

    overloadable_operator  ->  LEQ .   (rule 446)

    $default	reduce using rule 446 (overloadable_operator)



state 685

    overloadable_operator  ->  GEQ .   (rule 445)

    $default	reduce using rule 445 (overloadable_operator)



state 686

    overloadable_operator  ->  PLUSPLUS .   (rule 429)

    $default	reduce using rule 429 (overloadable_operator)



state 687

    overloadable_operator  ->  MINUSMINUS .   (rule 430)

    $default	reduce using rule 430 (overloadable_operator)



state 688

    overloadable_operator  ->  '*' .   (rule 433)

    $default	reduce using rule 433 (overloadable_operator)



state 689

    overloadable_operator  ->  '&' .   (rule 436)

    $default	reduce using rule 436 (overloadable_operator)



state 690

    overloadable_operator  ->  '!' .   (rule 427)

    $default	reduce using rule 427 (overloadable_operator)



state 691

    overloadable_operator  ->  '~' .   (rule 428)

    $default	reduce using rule 428 (overloadable_operator)



state 692

    overloadable_operator  ->  '+' .   (rule 425)

    $default	reduce using rule 425 (overloadable_operator)



state 693

    overloadable_operator  ->  '-' .   (rule 426)

    $default	reduce using rule 426 (overloadable_operator)



state 694

    overloadable_operator  ->  '/' .   (rule 434)

    $default	reduce using rule 434 (overloadable_operator)



state 695

    overloadable_operator  ->  '%' .   (rule 435)

    $default	reduce using rule 435 (overloadable_operator)



state 696

    overloadable_operator  ->  '^' .   (rule 438)

    $default	reduce using rule 438 (overloadable_operator)



state 697

    overloadable_operator  ->  '|' .   (rule 437)

    $default	reduce using rule 437 (overloadable_operator)



state 698

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator . '(' type IDENTIFIER ')'   (rule 423)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator . '(' type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 424)

    '(' 	shift, and go to state 761



state 699

    indexer_declarator  ->  type THIS LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET   (rule 417)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list	go to state 762
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 700

    variable_declarators  ->  variable_declarators COMMA . variable_declarator   (rule 208)

    IDENTIFIER	shift, and go to state 643

    variable_declarator	go to state 763



state 701

    field_declaration  ->  attributes_opt modifiers_opt type variable_declarators ';' .   (rule 373)

    $default	reduce using rule 373 (field_declaration)



state 702

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier opt_generic_fct . '(' formal_parameter_list_opt ')'   (rule 375)

    '(' 	shift, and go to state 764



state 703

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset . '{' accessor_declarations '}' EXIT_getset   (rule 398)

    '{' 	shift, and go to state 765



state 704

    qualified_this  ->  qualifier THIS .   (rule 419)

    $default	reduce using rule 419 (qualified_this)



state 705

    indexer_declarator  ->  type qualified_this LEFT_BRACKET . formal_parameter_list RIGHT_BRACKET   (rule 418)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list	go to state 766
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 706

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' . accessor_declarations '}' EXIT_getset   (rule 416)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 401 (accessor_declarations)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 767
    accessor_declarations	go to state 768
    get_accessor_declaration	go to state 769
    set_accessor_declaration	go to state 770
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 707

    labeled_statement  ->  IDENTIFIER ':' statement .   (rule 203)

    $default	reduce using rule 203 (labeled_statement)



state 708

    local_constant_declaration  ->  CONST type constant_declarators .   (rule 215)
    constant_declarators  ->  constant_declarators . COMMA constant_declarator   (rule 217)

    COMMA	shift, and go to state 753

    $default	reduce using rule 215 (local_constant_declaration)



state 709

    do_statement  ->  DO embedded_statement WHILE . '(' boolean_expression ')' ';'   (rule 250)

    '(' 	shift, and go to state 771



state 710

    pointer_type  ->  type . '*'   (rule 41)
    fixed_statement  ->  FIXED '(' type . fixed_pointer_declarators ')' embedded_statement   (rule 295)

    IDENTIFIER	shift, and go to state 772
    '*' 	shift, and go to state 119

    fixed_pointer_declarators	go to state 773
    fixed_pointer_declarator	go to state 774



state 711

    for_initializer  ->  local_variable_declaration .   (rule 258)

    $default	reduce using rule 258 (for_initializer)



state 712

    statement_expression_list  ->  statement_expression .   (rule 262)

    $default	reduce using rule 262 (statement_expression_list)



state 713

    for_statement  ->  FOR '(' for_initializer_opt . ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 251)

    ';' 	shift, and go to state 775



state 714

    for_initializer_opt  ->  for_initializer .   (rule 253)

    $default	reduce using rule 253 (for_initializer_opt)



state 715

    for_initializer  ->  statement_expression_list .   (rule 259)
    statement_expression_list  ->  statement_expression_list . COMMA statement_expression   (rule 263)

    COMMA	shift, and go to state 776

    $default	reduce using rule 259 (for_initializer)



state 716

    pointer_type  ->  type . '*'   (rule 41)
    foreach_statement  ->  FOREACH '(' type . IDENTIFIER IN expression ')' embedded_statement   (rule 264)

    IDENTIFIER	shift, and go to state 777
    '*' 	shift, and go to state 119



state 717

    goto_statement  ->  GOTO IDENTIFIER ';' .   (rule 272)

    $default	reduce using rule 272 (goto_statement)



state 718

    goto_statement  ->  GOTO CASE constant_expression . ';'   (rule 273)

    ';' 	shift, and go to state 778



state 719

    goto_statement  ->  GOTO DEFAULT ';' .   (rule 274)

    $default	reduce using rule 274 (goto_statement)



state 720

    boolean_expression  ->  expression .   (rule 180)

    $default	reduce using rule 180 (boolean_expression)



state 721

    ifpart  ->  '(' boolean_expression . ')' embedded_statement   (rule 230)

    ')' 	shift, and go to state 779



state 722

    opt_else  ->  ELSE . embedded_statement   (rule 231)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 780
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 723

    if_statement  ->  IF ifpart opt_else .   (rule 229)

    $default	reduce using rule 229 (if_statement)



state 724

    lock_statement  ->  LOCK '(' expression . ')' embedded_statement   (rule 291)

    ')' 	shift, and go to state 781



state 725

    return_statement  ->  RETURN expression_opt ';' .   (rule 275)

    $default	reduce using rule 275 (return_statement)



state 726

    switch_statement  ->  SWITCH '(' expression . ')' switch_block   (rule 233)

    ')' 	shift, and go to state 782



state 727

    throw_statement  ->  THROW expression_opt ';' .   (rule 278)

    $default	reduce using rule 278 (throw_statement)



state 728

    catch_clause  ->  CATCH . '(' type_name identifier_opt ')' block   (rule 284)
    catch_clause  ->  CATCH . block   (rule 285)

    '(' 	shift, and go to state 783
    '{' 	shift, and go to state 446

    block	go to state 784



state 729

    finally_clause  ->  FINALLY . block   (rule 288)

    '{' 	shift, and go to state 446

    block	go to state 785



state 730

    try_statement  ->  TRY block catch_clauses .   (rule 279)
    try_statement  ->  TRY block catch_clauses . finally_clause   (rule 281)
    catch_clauses  ->  catch_clauses . catch_clause   (rule 283)

    CATCH	shift, and go to state 728
    FINALLY	shift, and go to state 729

    $default	reduce using rule 279 (try_statement)

    catch_clause	go to state 786
    finally_clause	go to state 787



state 731

    catch_clauses  ->  catch_clause .   (rule 282)

    $default	reduce using rule 282 (catch_clauses)



state 732

    try_statement  ->  TRY block finally_clause .   (rule 280)

    $default	reduce using rule 280 (try_statement)



state 733

    resource_acquisition  ->  expression .   (rule 294)

    $default	reduce using rule 294 (resource_acquisition)



state 734

    resource_acquisition  ->  local_variable_declaration .   (rule 293)

    $default	reduce using rule 293 (resource_acquisition)



state 735

    using_statement  ->  USING '(' resource_acquisition . ')' embedded_statement   (rule 292)

    ')' 	shift, and go to state 788



state 736

    while_statement  ->  WHILE '(' boolean_expression . ')' embedded_statement   (rule 249)

    ')' 	shift, and go to state 789



state 737

    array_creation_expression  ->  NEW non_array_type LEFT_BRACKET expression_list RIGHT_BRACKET rank_specifiers_opt array_initializer_opt .   (rule 93)

    $default	reduce using rule 93 (array_creation_expression)



state 738

    array_initializer_opt  ->  array_initializer .   (rule 96)

    $default	reduce using rule 96 (array_initializer_opt)



state 739

    rank_specifiers_opt  ->  rank_specifier rank_specifiers_opt .   (rule 47)

    $default	reduce using rule 47 (rank_specifiers_opt)



state 740

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET . expression RIGHT_BRACKET   (rule 214)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 790
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 741

    variable_initializer_list  ->  variable_initializer_list COMMA variable_initializer .   (rule 486)

    $default	reduce using rule 486 (variable_initializer_list)



state 742

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' . ')' block   (rule 455)

    ')' 	shift, and go to state 791



state 743

    fixed_parameter_opt_default  ->  '=' expression .   (rule 393)

    $default	reduce using rule 393 (fixed_parameter_opt_default)



state 744

    interface_empty_body  ->  '{' . '}'   (rule 513)

    '}' 	shift, and go to state 792



state 745

    interface_empty_body  ->  ';' .   (rule 512)

    $default	reduce using rule 512 (interface_empty_body)



state 746

    interface_event_declaration  ->  attributes_opt new_opt EVENT type IDENTIFIER interface_empty_body .   (rule 511)

    $default	reduce using rule 511 (interface_event_declaration)



state 747

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt . ')' interface_empty_body   (rule 502)

    ')' 	shift, and go to state 793



state 748

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt . ')' interface_empty_body   (rule 501)

    ')' 	shift, and go to state 794



state 749

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' . interface_accessors '}' EXIT_getset   (rule 505)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 795
    interface_accessors	go to state 796
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 750

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 388)
    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)

    COMMA	shift, and go to state 436
    RIGHT_BRACKET	shift, and go to state 797



state 751

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt ')' . constructor_initializer_opt   (rule 450)

    ':' 	shift, and go to state 798

    $default	reduce using rule 451 (constructor_initializer_opt)

    constructor_initializer_opt	go to state 799
    constructor_initializer	go to state 800



state 752

    constant_declarator  ->  IDENTIFIER '=' . constant_expression   (rule 218)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 592
    constant_expression	go to state 801
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 753

    constant_declarators  ->  constant_declarators COMMA . constant_declarator   (rule 217)

    IDENTIFIER	shift, and go to state 667

    constant_declarator	go to state 802



state 754

    constant_declaration  ->  attributes_opt modifiers_opt CONST type constant_declarators ';' .   (rule 372)

    $default	reduce using rule 372 (constant_declaration)



state 755

    event_declaration  ->  attributes_opt modifiers_opt EVENT type variable_declarators ';' .   (rule 410)

    $default	reduce using rule 410 (event_declaration)



state 756

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl . '{' event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)

    '{' 	shift, and go to state 803



state 757

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' . type IDENTIFIER ')'   (rule 448)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 804
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 758

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' . type IDENTIFIER ')'   (rule 447)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 805
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 759

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier opt_generic_fct '(' . formal_parameter_list_opt ')'   (rule 376)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 806
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 760

    variable_declarator  ->  IDENTIFIER '=' variable_initializer .   (rule 210)

    $default	reduce using rule 210 (variable_declarator)



state 761

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' . type IDENTIFIER ')'   (rule 423)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' . type IDENTIFIER COMMA type IDENTIFIER ')'   (rule 424)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 807
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 762

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 388)
    indexer_declarator  ->  type THIS LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET   (rule 417)

    COMMA	shift, and go to state 436
    RIGHT_BRACKET	shift, and go to state 808



state 763

    variable_declarators  ->  variable_declarators COMMA variable_declarator .   (rule 208)

    $default	reduce using rule 208 (variable_declarators)



state 764

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier opt_generic_fct '(' . formal_parameter_list_opt ')'   (rule 375)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    ')' 	reduce using rule 381 (formal_parameter_list_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 320
    formal_parameter_list_opt	go to state 809
    formal_parameter_list	go to state 322
    formal_parameter	go to state 323
    fixed_parameter	go to state 324
    parameter_array	go to state 325
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 765

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' . accessor_declarations '}' EXIT_getset   (rule 398)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 401 (accessor_declarations)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 767
    accessor_declarations	go to state 810
    get_accessor_declaration	go to state 769
    set_accessor_declaration	go to state 770
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 766

    formal_parameter_list  ->  formal_parameter_list . COMMA formal_parameter   (rule 388)
    indexer_declarator  ->  type qualified_this LEFT_BRACKET formal_parameter_list . RIGHT_BRACKET   (rule 418)

    COMMA	shift, and go to state 436
    RIGHT_BRACKET	shift, and go to state 811



state 767

    get_accessor_declaration  ->  attributes_opt . GET EXIT_getset accessor_body ENTER_getset   (rule 406)
    set_accessor_declaration  ->  attributes_opt . SET EXIT_getset accessor_body ENTER_getset   (rule 407)

    GET 	shift, and go to state 812
    SET 	shift, and go to state 813



state 768

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations . '}' EXIT_getset   (rule 416)

    '}' 	shift, and go to state 814



state 769

    accessor_declarations  ->  get_accessor_declaration . set_accessor_declaration_opt   (rule 399)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 402 (set_accessor_declaration_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 815
    set_accessor_declaration_opt	go to state 816
    set_accessor_declaration	go to state 817
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 770

    accessor_declarations  ->  set_accessor_declaration . get_accessor_declaration_opt   (rule 400)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 404 (get_accessor_declaration_opt)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 818
    get_accessor_declaration_opt	go to state 819
    get_accessor_declaration	go to state 820
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 771

    do_statement  ->  DO embedded_statement WHILE '(' . boolean_expression ')' ';'   (rule 250)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 720
    boolean_expression	go to state 821
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 772

    fixed_pointer_declarator  ->  IDENTIFIER . '=' expression   (rule 298)

    '=' 	shift, and go to state 822



state 773

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators . ')' embedded_statement   (rule 295)
    fixed_pointer_declarators  ->  fixed_pointer_declarators . COMMA fixed_pointer_declarator   (rule 297)

    COMMA	shift, and go to state 823
    ')' 	shift, and go to state 824



state 774

    fixed_pointer_declarators  ->  fixed_pointer_declarator .   (rule 296)

    $default	reduce using rule 296 (fixed_pointer_declarators)



state 775

    for_statement  ->  FOR '(' for_initializer_opt ';' . for_condition_opt ';' for_iterator_opt ')' embedded_statement   (rule 251)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 254 (for_condition_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 720
    boolean_expression	go to state 825
    for_condition_opt	go to state 826
    for_condition	go to state 827
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 776

    statement_expression_list  ->  statement_expression_list COMMA . statement_expression   (rule 263)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement_expression	go to state 828
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 777

    foreach_statement  ->  FOREACH '(' type IDENTIFIER . IN expression ')' embedded_statement   (rule 264)

    IN  	shift, and go to state 829



state 778

    goto_statement  ->  GOTO CASE constant_expression ';' .   (rule 273)

    $default	reduce using rule 273 (goto_statement)



state 779

    ifpart  ->  '(' boolean_expression ')' . embedded_statement   (rule 230)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 830
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 780

    opt_else  ->  ELSE embedded_statement .   (rule 231)

    $default	reduce using rule 231 (opt_else)



state 781

    lock_statement  ->  LOCK '(' expression ')' . embedded_statement   (rule 291)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 831
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 782

    switch_statement  ->  SWITCH '(' expression ')' . switch_block   (rule 233)

    '{' 	shift, and go to state 832

    switch_block	go to state 833



state 783

    catch_clause  ->  CATCH '(' . type_name identifier_opt ')' block   (rule 284)

    IDENTIFIER	shift, and go to state 53

    type_name	go to state 834
    qualified_identifier_opt_generic	go to state 93
    qualified_identifier	go to state 109
    qualifier	go to state 10



state 784

    catch_clause  ->  CATCH block .   (rule 285)

    $default	reduce using rule 285 (catch_clause)



state 785

    finally_clause  ->  FINALLY block .   (rule 288)

    $default	reduce using rule 288 (finally_clause)



state 786

    catch_clauses  ->  catch_clauses catch_clause .   (rule 283)

    $default	reduce using rule 283 (catch_clauses)



state 787

    try_statement  ->  TRY block catch_clauses finally_clause .   (rule 281)

    $default	reduce using rule 281 (try_statement)



state 788

    using_statement  ->  USING '(' resource_acquisition ')' . embedded_statement   (rule 292)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 835
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 789

    while_statement  ->  WHILE '(' boolean_expression ')' . embedded_statement   (rule 249)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 836
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 790

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET expression . RIGHT_BRACKET   (rule 214)

    RIGHT_BRACKET	shift, and go to state 837



state 791

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' . block   (rule 455)

    '{' 	shift, and go to state 446

    block	go to state 838



state 792

    interface_empty_body  ->  '{' '}' .   (rule 513)

    $default	reduce using rule 513 (interface_empty_body)



state 793

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' . interface_empty_body   (rule 502)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 839



state 794

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' . interface_empty_body   (rule 501)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 840



state 795

    interface_accessors  ->  attributes_opt . GET interface_empty_body   (rule 507)
    interface_accessors  ->  attributes_opt . SET interface_empty_body   (rule 508)
    interface_accessors  ->  attributes_opt . GET interface_empty_body attributes_opt SET interface_empty_body   (rule 509)
    interface_accessors  ->  attributes_opt . SET interface_empty_body attributes_opt GET interface_empty_body   (rule 510)

    GET 	shift, and go to state 841
    SET 	shift, and go to state 842



state 796

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors . '}' EXIT_getset   (rule 505)

    '}' 	shift, and go to state 843



state 797

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET . ENTER_getset '{' interface_accessors '}' EXIT_getset   (rule 506)

    $default	reduce using rule 556 (ENTER_getset)

    ENTER_getset	go to state 844



state 798

    constructor_initializer  ->  ':' . BASE '(' argument_list_opt ')'   (rule 453)
    constructor_initializer  ->  ':' . THIS '(' argument_list_opt ')'   (rule 454)

    BASE	shift, and go to state 845
    THIS	shift, and go to state 846



state 799

    constructor_declarator  ->  IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt .   (rule 450)

    $default	reduce using rule 450 (constructor_declarator)



state 800

    constructor_initializer_opt  ->  constructor_initializer .   (rule 452)

    $default	reduce using rule 452 (constructor_initializer_opt)



state 801

    constant_declarator  ->  IDENTIFIER '=' constant_expression .   (rule 218)

    $default	reduce using rule 218 (constant_declarator)



state 802

    constant_declarators  ->  constant_declarators COMMA constant_declarator .   (rule 217)

    $default	reduce using rule 217 (constant_declarators)



state 803

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' . event_accessor_declarations '}' EXIT_accessor_decl   (rule 411)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 847
    event_accessor_declarations	go to state 848
    add_accessor_declaration	go to state 849
    remove_accessor_declaration	go to state 850
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 804

    pointer_type  ->  type . '*'   (rule 41)
    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type . IDENTIFIER ')'   (rule 448)

    IDENTIFIER	shift, and go to state 851
    '*' 	shift, and go to state 119



state 805

    pointer_type  ->  type . '*'   (rule 41)
    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type . IDENTIFIER ')'   (rule 447)

    IDENTIFIER	shift, and go to state 852
    '*' 	shift, and go to state 119



state 806

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt . ')'   (rule 376)

    ')' 	shift, and go to state 853



state 807

    pointer_type  ->  type . '*'   (rule 41)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type . IDENTIFIER ')'   (rule 423)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type . IDENTIFIER COMMA type IDENTIFIER ')'   (rule 424)

    IDENTIFIER	shift, and go to state 854
    '*' 	shift, and go to state 119



state 808

    indexer_declarator  ->  type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET .   (rule 417)

    $default	reduce using rule 417 (indexer_declarator)



state 809

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt . ')'   (rule 375)

    ')' 	shift, and go to state 855



state 810

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations . '}' EXIT_getset   (rule 398)

    '}' 	shift, and go to state 856



state 811

    indexer_declarator  ->  type qualified_this LEFT_BRACKET formal_parameter_list RIGHT_BRACKET .   (rule 418)

    $default	reduce using rule 418 (indexer_declarator)



state 812

    get_accessor_declaration  ->  attributes_opt GET . EXIT_getset accessor_body ENTER_getset   (rule 406)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 857



state 813

    set_accessor_declaration  ->  attributes_opt SET . EXIT_getset accessor_body ENTER_getset   (rule 407)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 858



state 814

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' . EXIT_getset   (rule 416)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 859



state 815

    set_accessor_declaration  ->  attributes_opt . SET EXIT_getset accessor_body ENTER_getset   (rule 407)

    SET 	shift, and go to state 813



state 816

    accessor_declarations  ->  get_accessor_declaration set_accessor_declaration_opt .   (rule 399)

    $default	reduce using rule 399 (accessor_declarations)



state 817

    set_accessor_declaration_opt  ->  set_accessor_declaration .   (rule 403)

    $default	reduce using rule 403 (set_accessor_declaration_opt)



state 818

    get_accessor_declaration  ->  attributes_opt . GET EXIT_getset accessor_body ENTER_getset   (rule 406)

    GET 	shift, and go to state 812



state 819

    accessor_declarations  ->  set_accessor_declaration get_accessor_declaration_opt .   (rule 400)

    $default	reduce using rule 400 (accessor_declarations)



state 820

    get_accessor_declaration_opt  ->  get_accessor_declaration .   (rule 405)

    $default	reduce using rule 405 (get_accessor_declaration_opt)



state 821

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression . ')' ';'   (rule 250)

    ')' 	shift, and go to state 860



state 822

    fixed_pointer_declarator  ->  IDENTIFIER '=' . expression   (rule 298)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 861
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 823

    fixed_pointer_declarators  ->  fixed_pointer_declarators COMMA . fixed_pointer_declarator   (rule 297)

    IDENTIFIER	shift, and go to state 772

    fixed_pointer_declarator	go to state 862



state 824

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators ')' . embedded_statement   (rule 295)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 863
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 825

    for_condition  ->  boolean_expression .   (rule 260)

    $default	reduce using rule 260 (for_condition)



state 826

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt . ';' for_iterator_opt ')' embedded_statement   (rule 251)

    ';' 	shift, and go to state 864



state 827

    for_condition_opt  ->  for_condition .   (rule 255)

    $default	reduce using rule 255 (for_condition_opt)



state 828

    statement_expression_list  ->  statement_expression_list COMMA statement_expression .   (rule 263)

    $default	reduce using rule 263 (statement_expression_list)



state 829

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN . expression ')' embedded_statement   (rule 264)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 865
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 830

    ifpart  ->  '(' boolean_expression ')' embedded_statement .   (rule 230)

    $default	reduce using rule 230 (ifpart)



state 831

    lock_statement  ->  LOCK '(' expression ')' embedded_statement .   (rule 291)

    $default	reduce using rule 291 (lock_statement)



state 832

    switch_block  ->  '{' . switch_sections_opt '}'   (rule 234)

    CASE	shift, and go to state 866
    DEFAULT	shift, and go to state 867

    $default	reduce using rule 235 (switch_sections_opt)

    switch_sections_opt	go to state 868
    switch_sections	go to state 869
    switch_section	go to state 870
    switch_labels	go to state 871
    switch_label	go to state 872



state 833

    switch_statement  ->  SWITCH '(' expression ')' switch_block .   (rule 233)

    $default	reduce using rule 233 (switch_statement)



state 834

    catch_clause  ->  CATCH '(' type_name . identifier_opt ')' block   (rule 284)

    IDENTIFIER	shift, and go to state 873

    $default	reduce using rule 286 (identifier_opt)

    identifier_opt	go to state 874



state 835

    using_statement  ->  USING '(' resource_acquisition ')' embedded_statement .   (rule 292)

    $default	reduce using rule 292 (using_statement)



state 836

    while_statement  ->  WHILE '(' boolean_expression ')' embedded_statement .   (rule 249)

    $default	reduce using rule 249 (while_statement)



state 837

    stackalloc_initializer  ->  STACKALLOC type LEFT_BRACKET expression RIGHT_BRACKET .   (rule 214)

    $default	reduce using rule 214 (stackalloc_initializer)



state 838

    destructor_declaration  ->  attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block .   (rule 455)

    $default	reduce using rule 455 (destructor_declaration)



state 839

    interface_method_declaration  ->  attributes_opt new_opt VOID IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body .   (rule 502)

    $default	reduce using rule 502 (interface_method_declaration)



state 840

    interface_method_declaration  ->  attributes_opt new_opt type IDENTIFIER '(' formal_parameter_list_opt ')' interface_empty_body .   (rule 501)

    $default	reduce using rule 501 (interface_method_declaration)



state 841

    interface_accessors  ->  attributes_opt GET . interface_empty_body   (rule 507)
    interface_accessors  ->  attributes_opt GET . interface_empty_body attributes_opt SET interface_empty_body   (rule 509)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 875



state 842

    interface_accessors  ->  attributes_opt SET . interface_empty_body   (rule 508)
    interface_accessors  ->  attributes_opt SET . interface_empty_body attributes_opt GET interface_empty_body   (rule 510)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 876



state 843

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' . EXIT_getset   (rule 505)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 877



state 844

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset . '{' interface_accessors '}' EXIT_getset   (rule 506)

    '{' 	shift, and go to state 878



state 845

    constructor_initializer  ->  ':' BASE . '(' argument_list_opt ')'   (rule 453)

    '(' 	shift, and go to state 879



state 846

    constructor_initializer  ->  ':' THIS . '(' argument_list_opt ')'   (rule 454)

    '(' 	shift, and go to state 880



state 847

    add_accessor_declaration  ->  attributes_opt . ADD EXIT_accessor_decl block ENTER_accessor_decl   (rule 414)
    remove_accessor_declaration  ->  attributes_opt . REMOVE EXIT_accessor_decl block ENTER_accessor_decl   (rule 415)

    ADD 	shift, and go to state 881
    REMOVE	shift, and go to state 882



state 848

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations . '}' EXIT_accessor_decl   (rule 411)

    '}' 	shift, and go to state 883



state 849

    event_accessor_declarations  ->  add_accessor_declaration . remove_accessor_declaration   (rule 412)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 884
    remove_accessor_declaration	go to state 885
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 850

    event_accessor_declarations  ->  remove_accessor_declaration . add_accessor_declaration   (rule 413)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 886
    add_accessor_declaration	go to state 887
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 851

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type IDENTIFIER . ')'   (rule 448)

    ')' 	shift, and go to state 888



state 852

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type IDENTIFIER . ')'   (rule 447)

    ')' 	shift, and go to state 889



state 853

    method_header  ->  attributes_opt modifiers_opt VOID qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')' .   (rule 376)

    $default	reduce using rule 376 (method_header)



state 854

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER . ')'   (rule 423)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER . COMMA type IDENTIFIER ')'   (rule 424)

    COMMA	shift, and go to state 890
    ')' 	shift, and go to state 891



state 855

    method_header  ->  attributes_opt modifiers_opt type qualified_identifier opt_generic_fct '(' formal_parameter_list_opt ')' .   (rule 375)

    $default	reduce using rule 375 (method_header)



state 856

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' . EXIT_getset   (rule 398)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 892



state 857

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset . accessor_body ENTER_getset   (rule 406)

    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 893

    block	go to state 894
    accessor_body	go to state 895



state 858

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset . accessor_body ENTER_getset   (rule 407)

    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 893

    block	go to state 894
    accessor_body	go to state 896



state 859

    indexer_declaration  ->  attributes_opt modifiers_opt indexer_declarator ENTER_getset '{' accessor_declarations '}' EXIT_getset .   (rule 416)

    $default	reduce using rule 416 (indexer_declaration)



state 860

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression ')' . ';'   (rule 250)

    ';' 	shift, and go to state 897



state 861

    fixed_pointer_declarator  ->  IDENTIFIER '=' expression .   (rule 298)

    $default	reduce using rule 298 (fixed_pointer_declarator)



state 862

    fixed_pointer_declarators  ->  fixed_pointer_declarators COMMA fixed_pointer_declarator .   (rule 297)

    $default	reduce using rule 297 (fixed_pointer_declarators)



state 863

    fixed_statement  ->  FIXED '(' type fixed_pointer_declarators ')' embedded_statement .   (rule 295)

    $default	reduce using rule 295 (fixed_statement)



state 864

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' . for_iterator_opt ')' embedded_statement   (rule 251)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 256 (for_iterator_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement_expression	go to state 712
    for_iterator_opt	go to state 898
    for_iterator	go to state 899
    statement_expression_list	go to state 900
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 865

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression . ')' embedded_statement   (rule 264)

    ')' 	shift, and go to state 901



state 866

    switch_label  ->  CASE . constant_expression ':'   (rule 242)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 592
    constant_expression	go to state 902
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 867

    switch_label  ->  DEFAULT . ':'   (rule 243)

    ':' 	shift, and go to state 903



state 868

    switch_block  ->  '{' switch_sections_opt . '}'   (rule 234)

    '}' 	shift, and go to state 904



state 869

    switch_sections_opt  ->  switch_sections .   (rule 236)
    switch_sections  ->  switch_sections . switch_section   (rule 238)

    CASE	shift, and go to state 866
    DEFAULT	shift, and go to state 867

    $default	reduce using rule 236 (switch_sections_opt)

    switch_section	go to state 905
    switch_labels	go to state 871
    switch_label	go to state 872



state 870

    switch_sections  ->  switch_section .   (rule 237)

    $default	reduce using rule 237 (switch_sections)



state 871

    switch_section  ->  switch_labels . statement_list   (rule 239)
    switch_labels  ->  switch_labels . switch_label   (rule 241)

    IDENTIFIER	shift, and go to state 504
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CASE	shift, and go to state 866
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONST	shift, and go to state 507
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DEFAULT	shift, and go to state 867
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    VOID	shift, and go to state 249
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement	go to state 536
    embedded_statement	go to state 537
    block	go to state 538
    statement_list	go to state 906
    empty_statement	go to state 541
    labeled_statement	go to state 542
    declaration_statement	go to state 543
    local_variable_declaration	go to state 544
    local_constant_declaration	go to state 545
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    switch_label	go to state 907
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 872

    switch_labels  ->  switch_label .   (rule 240)

    $default	reduce using rule 240 (switch_labels)



state 873

    identifier_opt  ->  IDENTIFIER .   (rule 287)

    $default	reduce using rule 287 (identifier_opt)



state 874

    catch_clause  ->  CATCH '(' type_name identifier_opt . ')' block   (rule 284)

    ')' 	shift, and go to state 908



state 875

    interface_accessors  ->  attributes_opt GET interface_empty_body .   (rule 507)
    interface_accessors  ->  attributes_opt GET interface_empty_body . attributes_opt SET interface_empty_body   (rule 509)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 507 (interface_accessors)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 909
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 876

    interface_accessors  ->  attributes_opt SET interface_empty_body .   (rule 508)
    interface_accessors  ->  attributes_opt SET interface_empty_body . attributes_opt GET interface_empty_body   (rule 510)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    '}' 	reduce using rule 508 (interface_accessors)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 910
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 877

    interface_property_declaration  ->  attributes_opt new_opt type IDENTIFIER ENTER_getset '{' interface_accessors '}' EXIT_getset .   (rule 505)

    $default	reduce using rule 505 (interface_property_declaration)



state 878

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' . interface_accessors '}' EXIT_getset   (rule 506)

    LEFT_BRACKET	reduce using rule 552 (ENTER_attrib)
    $default	reduce using rule 303 (attributes_opt)

    attributes_opt	go to state 795
    interface_accessors	go to state 911
    attributes	go to state 21
    attribute_sections	go to state 22
    attribute_section	go to state 23
    ENTER_attrib	go to state 24



state 879

    constructor_initializer  ->  ':' BASE '(' . argument_list_opt ')'   (rule 453)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 78 (argument_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument_list	go to state 380
    argument	go to state 381
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    argument_list_opt	go to state 912
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 880

    constructor_initializer  ->  ':' THIS '(' . argument_list_opt ')'   (rule 454)

    IDENTIFIER	shift, and go to state 377
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 161
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    OUT 	shift, and go to state 378
    REF 	shift, and go to state 379
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    THIS	shift, and go to state 167
    TRUE	shift, and go to state 168
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 170
    USHORT	shift, and go to state 90
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179

    $default	reduce using rule 78 (argument_list_opt)

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    argument_list	go to state 380
    argument	go to state 381
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 189
    argument_list_opt	go to state 913
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 195
    post_decrement_expression	go to state 196
    new_expression	go to state 197
    object_creation_expression	go to state 198
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 208
    pre_decrement_expression	go to state 209
    unary_expression	go to state 210
    cast_expression	go to state 211
    multiplicative_expression	go to state 212
    additive_expression	go to state 213
    shift_expression	go to state 214
    relational_expression	go to state 215
    equality_expression	go to state 216
    and_expression	go to state 217
    exclusive_or_expression	go to state 218
    inclusive_or_expression	go to state 219
    conditional_and_expression	go to state 220
    conditional_or_expression	go to state 221
    conditional_expression	go to state 222
    assignment	go to state 223
    expression	go to state 383
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 881

    add_accessor_declaration  ->  attributes_opt ADD . EXIT_accessor_decl block ENTER_accessor_decl   (rule 414)

    $default	reduce using rule 555 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 914



state 882

    remove_accessor_declaration  ->  attributes_opt REMOVE . EXIT_accessor_decl block ENTER_accessor_decl   (rule 415)

    $default	reduce using rule 555 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 915



state 883

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' . EXIT_accessor_decl   (rule 411)

    $default	reduce using rule 555 (EXIT_accessor_decl)

    EXIT_accessor_decl	go to state 916



state 884

    remove_accessor_declaration  ->  attributes_opt . REMOVE EXIT_accessor_decl block ENTER_accessor_decl   (rule 415)

    REMOVE	shift, and go to state 882



state 885

    event_accessor_declarations  ->  add_accessor_declaration remove_accessor_declaration .   (rule 412)

    $default	reduce using rule 412 (event_accessor_declarations)



state 886

    add_accessor_declaration  ->  attributes_opt . ADD EXIT_accessor_decl block ENTER_accessor_decl   (rule 414)

    ADD 	shift, and go to state 881



state 887

    event_accessor_declarations  ->  remove_accessor_declaration add_accessor_declaration .   (rule 413)

    $default	reduce using rule 413 (event_accessor_declarations)



state 888

    conversion_operator_declarator  ->  EXPLICIT OPERATOR type '(' type IDENTIFIER ')' .   (rule 448)

    $default	reduce using rule 448 (conversion_operator_declarator)



state 889

    conversion_operator_declarator  ->  IMPLICIT OPERATOR type '(' type IDENTIFIER ')' .   (rule 447)

    $default	reduce using rule 447 (conversion_operator_declarator)



state 890

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA . type IDENTIFIER ')'   (rule 424)

    IDENTIFIER	shift, and go to state 53
    BOOL	shift, and go to state 78
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    DECIMAL	shift, and go to state 81
    DOUBLE	shift, and go to state 82
    FLOAT	shift, and go to state 83
    INT 	shift, and go to state 84
    LONG	shift, and go to state 85
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    USHORT	shift, and go to state 90
    VOID	shift, and go to state 249

    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 93
    type	go to state 917
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 97
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    qualified_identifier	go to state 103
    qualifier	go to state 10



state 891

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER ')' .   (rule 423)

    $default	reduce using rule 423 (overloadable_operator_declarator)



state 892

    property_declaration  ->  attributes_opt modifiers_opt type qualified_identifier ENTER_getset '{' accessor_declarations '}' EXIT_getset .   (rule 398)

    $default	reduce using rule 398 (property_declaration)



state 893

    accessor_body  ->  ';' .   (rule 409)

    $default	reduce using rule 409 (accessor_body)



state 894

    accessor_body  ->  block .   (rule 408)

    $default	reduce using rule 408 (accessor_body)



state 895

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset accessor_body . ENTER_getset   (rule 406)

    $default	reduce using rule 556 (ENTER_getset)

    ENTER_getset	go to state 918



state 896

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset accessor_body . ENTER_getset   (rule 407)

    $default	reduce using rule 556 (ENTER_getset)

    ENTER_getset	go to state 919



state 897

    do_statement  ->  DO embedded_statement WHILE '(' boolean_expression ')' ';' .   (rule 250)

    $default	reduce using rule 250 (do_statement)



state 898

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt . ')' embedded_statement   (rule 251)

    ')' 	shift, and go to state 920



state 899

    for_iterator_opt  ->  for_iterator .   (rule 257)

    $default	reduce using rule 257 (for_iterator_opt)



state 900

    for_iterator  ->  statement_expression_list .   (rule 261)
    statement_expression_list  ->  statement_expression_list . COMMA statement_expression   (rule 263)

    COMMA	shift, and go to state 776

    $default	reduce using rule 261 (for_iterator)



state 901

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression ')' . embedded_statement   (rule 264)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 921
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 902

    switch_label  ->  CASE constant_expression . ':'   (rule 242)

    ':' 	shift, and go to state 922



state 903

    switch_label  ->  DEFAULT ':' .   (rule 243)

    $default	reduce using rule 243 (switch_label)



state 904

    switch_block  ->  '{' switch_sections_opt '}' .   (rule 234)

    $default	reduce using rule 234 (switch_block)



state 905

    switch_sections  ->  switch_sections switch_section .   (rule 238)

    $default	reduce using rule 238 (switch_sections)



state 906

    statement_list  ->  statement_list . statement   (rule 201)
    switch_section  ->  switch_labels statement_list .   (rule 239)

    IDENTIFIER	shift, and go to state 504
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONST	shift, and go to state 507
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    VOID	shift, and go to state 249
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    $default	reduce using rule 239 (switch_section)

    literal	go to state 180
    boolean_literal	go to state 181
    type_name	go to state 92
    qualified_identifier_opt_generic	go to state 525
    type	go to state 526
    non_array_type	go to state 95
    simple_type	go to state 96
    primitive_type	go to state 527
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    pointer_type	go to state 101
    array_type	go to state 102
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    statement	go to state 646
    embedded_statement	go to state 537
    block	go to state 538
    empty_statement	go to state 541
    labeled_statement	go to state 542
    declaration_statement	go to state 543
    local_variable_declaration	go to state 544
    local_constant_declaration	go to state 545
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 569
    qualifier	go to state 10



state 907

    switch_labels  ->  switch_labels switch_label .   (rule 241)

    $default	reduce using rule 241 (switch_labels)



state 908

    catch_clause  ->  CATCH '(' type_name identifier_opt ')' . block   (rule 284)

    '{' 	shift, and go to state 446

    block	go to state 923



state 909

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt . SET interface_empty_body   (rule 509)

    SET 	shift, and go to state 924



state 910

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt . GET interface_empty_body   (rule 510)

    GET 	shift, and go to state 925



state 911

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors . '}' EXIT_getset   (rule 506)

    '}' 	shift, and go to state 926



state 912

    constructor_initializer  ->  ':' BASE '(' argument_list_opt . ')'   (rule 453)

    ')' 	shift, and go to state 927



state 913

    constructor_initializer  ->  ':' THIS '(' argument_list_opt . ')'   (rule 454)

    ')' 	shift, and go to state 928



state 914

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl . block ENTER_accessor_decl   (rule 414)

    '{' 	shift, and go to state 446

    block	go to state 929



state 915

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl . block ENTER_accessor_decl   (rule 415)

    '{' 	shift, and go to state 446

    block	go to state 930



state 916

    event_declaration  ->  attributes_opt modifiers_opt EVENT type qualified_identifier ENTER_accessor_decl '{' event_accessor_declarations '}' EXIT_accessor_decl .   (rule 411)

    $default	reduce using rule 411 (event_declaration)



state 917

    pointer_type  ->  type . '*'   (rule 41)
    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type . IDENTIFIER ')'   (rule 424)

    IDENTIFIER	shift, and go to state 931
    '*' 	shift, and go to state 119



state 918

    get_accessor_declaration  ->  attributes_opt GET EXIT_getset accessor_body ENTER_getset .   (rule 406)

    $default	reduce using rule 406 (get_accessor_declaration)



state 919

    set_accessor_declaration  ->  attributes_opt SET EXIT_getset accessor_body ENTER_getset .   (rule 407)

    $default	reduce using rule 407 (set_accessor_declaration)



state 920

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' . embedded_statement   (rule 251)

    IDENTIFIER	shift, and go to state 53
    INTEGER_LITERAL	shift, and go to state 156
    REAL_LITERAL	shift, and go to state 157
    CHARACTER_LITERAL	shift, and go to state 158
    STRING_LITERAL	shift, and go to state 159
    BASE	shift, and go to state 160
    BOOL	shift, and go to state 78
    BREAK	shift, and go to state 505
    BYTE	shift, and go to state 79
    CHAR	shift, and go to state 80
    CHECKED	shift, and go to state 506
    CONTINUE	shift, and go to state 508
    DECIMAL	shift, and go to state 81
    DELEGATE	shift, and go to state 162
    DO  	shift, and go to state 509
    DOUBLE	shift, and go to state 82
    FALSE	shift, and go to state 163
    FIXED	shift, and go to state 510
    FLOAT	shift, and go to state 83
    FOR 	shift, and go to state 511
    FOREACH	shift, and go to state 512
    GOTO	shift, and go to state 513
    IF  	shift, and go to state 514
    INT 	shift, and go to state 84
    LOCK	shift, and go to state 515
    LONG	shift, and go to state 85
    NEW 	shift, and go to state 164
    NULL_LITERAL	shift, and go to state 165
    RETURN	shift, and go to state 516
    SBYTE	shift, and go to state 86
    SHORT	shift, and go to state 87
    SIZEOF	shift, and go to state 166
    SWITCH	shift, and go to state 517
    THIS	shift, and go to state 167
    THROW	shift, and go to state 518
    TRUE	shift, and go to state 168
    TRY 	shift, and go to state 519
    TYPEOF	shift, and go to state 169
    UINT	shift, and go to state 88
    ULONG	shift, and go to state 89
    UNCHECKED	shift, and go to state 520
    UNSAFE	shift, and go to state 521
    USHORT	shift, and go to state 90
    USING	shift, and go to state 522
    WHILE	shift, and go to state 523
    PLUSPLUS	shift, and go to state 171
    MINUSMINUS	shift, and go to state 172
    '*' 	shift, and go to state 173
    '(' 	shift, and go to state 174
    '&' 	shift, and go to state 175
    '!' 	shift, and go to state 176
    '~' 	shift, and go to state 177
    '+' 	shift, and go to state 178
    '-' 	shift, and go to state 179
    '{' 	shift, and go to state 446
    ';' 	shift, and go to state 524

    literal	go to state 180
    boolean_literal	go to state 181
    qualified_identifier_opt_generic	go to state 182
    primitive_type	go to state 183
    numeric_type	go to state 98
    integral_type	go to state 99
    floating_point_type	go to state 100
    primary_expression	go to state 184
    primary_expression_no_parenthesis	go to state 185
    delegate_expression	go to state 186
    parenthesized_expression	go to state 187
    member_access	go to state 188
    invocation_expression	go to state 528
    element_access	go to state 190
    this_access	go to state 193
    base_access	go to state 194
    post_increment_expression	go to state 529
    post_decrement_expression	go to state 530
    new_expression	go to state 197
    object_creation_expression	go to state 531
    array_creation_expression	go to state 199
    typeof_expression	go to state 200
    checked_expression	go to state 201
    unchecked_expression	go to state 202
    pointer_member_access	go to state 203
    addressof_expression	go to state 204
    sizeof_expression	go to state 205
    postfix_expression	go to state 206
    unary_expression_not_plusminus	go to state 207
    pre_increment_expression	go to state 532
    pre_decrement_expression	go to state 533
    unary_expression	go to state 534
    cast_expression	go to state 211
    assignment	go to state 535
    embedded_statement	go to state 932
    block	go to state 538
    empty_statement	go to state 541
    expression_statement	go to state 546
    statement_expression	go to state 547
    selection_statement	go to state 548
    if_statement	go to state 549
    switch_statement	go to state 550
    iteration_statement	go to state 551
    unsafe_statement	go to state 552
    while_statement	go to state 553
    do_statement	go to state 554
    for_statement	go to state 555
    foreach_statement	go to state 556
    jump_statement	go to state 557
    break_statement	go to state 558
    continue_statement	go to state 559
    goto_statement	go to state 560
    return_statement	go to state 561
    throw_statement	go to state 562
    try_statement	go to state 563
    checked_statement	go to state 564
    unchecked_statement	go to state 565
    lock_statement	go to state 566
    using_statement	go to state 567
    fixed_statement	go to state 568
    qualified_identifier	go to state 225
    qualifier	go to state 10



state 921

    foreach_statement  ->  FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement .   (rule 264)

    $default	reduce using rule 264 (foreach_statement)



state 922

    switch_label  ->  CASE constant_expression ':' .   (rule 242)

    $default	reduce using rule 242 (switch_label)



state 923

    catch_clause  ->  CATCH '(' type_name identifier_opt ')' block .   (rule 284)

    $default	reduce using rule 284 (catch_clause)



state 924

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt SET . interface_empty_body   (rule 509)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 933



state 925

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt GET . interface_empty_body   (rule 510)

    '{' 	shift, and go to state 744
    ';' 	shift, and go to state 745

    interface_empty_body	go to state 934



state 926

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' . EXIT_getset   (rule 506)

    $default	reduce using rule 557 (EXIT_getset)

    EXIT_getset	go to state 935



state 927

    constructor_initializer  ->  ':' BASE '(' argument_list_opt ')' .   (rule 453)

    $default	reduce using rule 453 (constructor_initializer)



state 928

    constructor_initializer  ->  ':' THIS '(' argument_list_opt ')' .   (rule 454)

    $default	reduce using rule 454 (constructor_initializer)



state 929

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl block . ENTER_accessor_decl   (rule 414)

    $default	reduce using rule 554 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 936



state 930

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl block . ENTER_accessor_decl   (rule 415)

    $default	reduce using rule 554 (ENTER_accessor_decl)

    ENTER_accessor_decl	go to state 937



state 931

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER . ')'   (rule 424)

    ')' 	shift, and go to state 938



state 932

    for_statement  ->  FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' embedded_statement .   (rule 251)

    $default	reduce using rule 251 (for_statement)



state 933

    interface_accessors  ->  attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body .   (rule 509)

    $default	reduce using rule 509 (interface_accessors)



state 934

    interface_accessors  ->  attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body .   (rule 510)

    $default	reduce using rule 510 (interface_accessors)



state 935

    interface_indexer_declaration  ->  attributes_opt new_opt type THIS LEFT_BRACKET formal_parameter_list RIGHT_BRACKET ENTER_getset '{' interface_accessors '}' EXIT_getset .   (rule 506)

    $default	reduce using rule 506 (interface_indexer_declaration)



state 936

    add_accessor_declaration  ->  attributes_opt ADD EXIT_accessor_decl block ENTER_accessor_decl .   (rule 414)

    $default	reduce using rule 414 (add_accessor_declaration)



state 937

    remove_accessor_declaration  ->  attributes_opt REMOVE EXIT_accessor_decl block ENTER_accessor_decl .   (rule 415)

    $default	reduce using rule 415 (remove_accessor_declaration)



state 938

    overloadable_operator_declarator  ->  type OPERATOR overloadable_operator '(' type IDENTIFIER COMMA type IDENTIFIER ')' .   (rule 424)

    $default	reduce using rule 424 (overloadable_operator_declarator)



state 939

    $   	go to state 940



state 940

    $   	go to state 941



state 941

    $default	accept
