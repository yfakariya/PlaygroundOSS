#line 2 "lexParser.inc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
static yyconst short int yy_acclist[264] =
    {   0,
       72,   70,   71,    2,   70,   71,    2,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   19,   70,   71,   70,   71,   70,
       71,   70,   71,   11,   70,   71,   11,   70,   71,   50,
       70,   71,   70,   71,   48,   70,   71,   70,   71,   21,
       70,   71,   23,   70,   71,   70,   71,   67,   70,   71,
       70,   71,    2,   70,   71,    1,   70,   71,    6,   71,
        7,   71,    6,   71,   71,    4,   71,   71,   71,   71,
       20,   71,   71,   71,   12,   71,   12,   71,   51,   71,
       49,   71,   71,   22,   71,   24,   71,   68,   71,    4,

       71,    3,   71,   48,   70,   71,   67,   70,   71,   67,
       70,   71,   67,   70,   71,   67,   70,   71,   67,   70,
       71,   67,   70,   71,   67,   70,   71,   67,   70,   71,
       67,   70,   71,   40,   17,   52,   53,   31,   43,   33,
       29,   45,   27,   46,   28,   47,   13,    5,    9,   30,
       11,   13,   11,   11,   35,   41,   39,   42,   36,   69,
       25,   32,   67,   34,   44,    1,    1,    8,   18,   54,
       55,   14,   10,   12,   14,   12,   12,   26,   68,    3,
        3,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   15,   13,    9,   13,   11,   11,   38,   37,

       17,   69,   16,   14,   10,   14,   12,   12,   18,   67,
       67,   67,   67,   67,   67,   67,   63,   67,   67,   65,
       67,   66,   67,   13,   11,   11,   14,   12,   12,   67,
       67,   67,   67,   67,   67,   62,   67,   67,   11,   12,
       67,   57,   67,   67,   67,   60,   67,   67,   67,   67,
       58,   67,   59,   67,   67,   64,   67,   67,   67,   56,
       67,   61,   67
    } ;

static yyconst short int yy_accept[273] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   23,   25,   28,   30,   32,   34,   37,
       40,   43,   45,   48,   50,   53,   56,   58,   61,   63,
       66,   69,   71,   73,   75,   76,   78,   79,   80,   81,
       83,   84,   85,   87,   89,   91,   93,   94,   96,   98,
      100,  102,  104,  107,  110,  113,  116,  119,  122,  125,
      128,  131,  134,  135,  135,  136,  136,  137,  138,  139,
      140,  141,  141,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  151,  152,  153,  153,  154,  155,

      155,  156,  157,  158,  159,  160,  160,  161,  161,  161,
      162,  163,  164,  165,  166,  166,  167,  168,  169,  169,
      170,  170,  171,  172,  172,  172,  173,  174,  174,  175,
      176,  176,  177,  178,  178,  178,  178,  178,  179,  180,
      180,  181,  182,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  193,  193,  194,  194,  194,
      195,  195,  196,  196,  197,  198,  199,  200,  201,  201,
      202,  203,  203,  203,  203,  204,  204,  204,  205,  205,
      206,  206,  207,  208,  209,  209,  210,  210,  211,  212,
      213,  214,  215,  216,  217,  219,  220,  222,  224,  224,

      224,  224,  224,  224,  225,  226,  227,  227,  227,  227,
      227,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  238,  239,  239,  239,  239,  239,  240,  240,  240,
      240,  240,  241,  242,  244,  245,  246,  248,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  251,  253,
      255,  256,  258,  258,  258,  258,  258,  258,  258,  259,
      260,  260,  260,  262,  264,  264,  264,  264,  264,  264,
      264,  264
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,    1,
        1,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,   23,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   38,   39,   40,   41,   42,   43,
       38,   44,   45,   46,   47,   48,   38,   49,   50,   38,
       24,   25,   26,   27,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   38,   38,   39,   40,   41,
       42,   43,   38,   44,   45,   46,   47,   48,   38,   49,
       50,   38,    1,   51,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    1,    5,    6,    1,
        1,    1,    7,    1,    8,    1,    1,    9,   10,   10,
       11,   11,   11,   10,    9,    9,    9,    9,    9,    9,
       12,    9,    9,   12,    9,   12,   12,   12,   12,    9,
        1
    } ;

static yyconst short int yy_base[319] =
    {   0,
        0,   50,   50,   51,   63,   53,   93,  138,   94,  119,
       97,  142,  444, 1156, 1156, 1156,  422,  112,   36,  419,
      107,  414,  417,  122, 1156,  109,  128,  108,  172,  388,
      130,  415,  131,  429,  154, 1156,  413,    0,  134,  152,
        0, 1156, 1156,  416, 1156, 1156,  164,   39,  407, 1156,
      143,  414,  206,  381, 1156, 1156,  416,  172, 1156,    0,
      164,    0,  161,  376,  383,  159,  150,  368,  385,  383,
      382,  381, 1156,  189, 1156,  150, 1156, 1156, 1156, 1156,
     1156,  400,  153, 1156, 1156, 1156, 1156, 1156, 1156,  197,
     1156,    0, 1156,  189,  361, 1156,  229,  362,  369,    0,

      386, 1156, 1156, 1156,  385,  399,    0,  247,  254, 1156,
     1156,    0, 1156, 1156,  211,    0,    0, 1156,  203, 1156,
      185, 1156, 1156,  393,  186,  244,    0,  208,  354, 1156,
      251,  355,  362,    0,  387,  279,  283, 1156,    0,  234,
        0,    0,  371,  346,  356,  342,  355,  342,  343,  339,
      349,  340,  333,  332,    0,    0, 1156,    0,    0, 1156,
      276,    0,  241,  256, 1156,  126, 1156, 1156,  371,  370,
        0,  296,    0,    0, 1156,    0,    0, 1156,  288,    0,
      253,  293, 1156,  269,  369,  368,  315,  340,  333,  328,
      316,  333,  317,  326,    0,  316,    0,    0,    0,  336,

        0,  345,  295,  305,  306,  311,    0,  365,    0,  338,
      302,  312,  301,  304,  300,  304,  293,  287,  264,  269,
        0,  244,    0,  394,    0,  268, 1156,    0,  423,    0,
      256, 1156,  235,    0,  222,  219,    0,  199,  190,    0,
      452,    0,  209,    0,  481,    0,  206,  171,    0,    0,
      157,    0,  510,  309,  185,  539,  322,  182,  119,   84,
      568,  597,    0,    0,  626,  655,  684,  713,  326,  332,
     1156,  747,  759,  771,  781,  789,  801,  813,  825,  833,
      845,  855,  865,  877,  885,  896,  904,  914,  924,  936,
      944,  955,  963,  970,  977,  984,  991,  998, 1005, 1012,

     1019, 1026, 1034, 1041, 1048, 1056, 1063, 1070, 1078, 1085,
     1092, 1100, 1107, 1114, 1122, 1129, 1136, 1144
    } ;

static yyconst short int yy_def[319] =
    {   0,
      271,    1,  272,  272,  271,    5,    1,    1,    1,    1,
        1,    1,  271,  271,  271,  271,  271,  273,  271,  271,
      271,  274,  271,  271,  271,  271,  271,  271,  271,   29,
      271,  271,  271,  275,  271,  271,  271,  276,  271,  271,
      277,  271,  271,  271,  271,  271,  278,  271,  279,  271,
      271,  271,  271,   53,  271,  271,  271,  271,  271,  280,
      271,  281,  271,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  271,  273,  271,  282,  271,  271,  271,  271,
      271,  271,  283,  271,  271,  271,  271,  271,  271,  271,
      271,  284,  271,  271,   29,  271,  271,  271,  271,  285,

      271,  271,  271,  271,  271,  286,  287,  271,  271,  271,
      271,  276,  271,  271,  271,  277,  277,  271,  278,  271,
      288,  271,  271,  271,  289,  271,  290,  271,   53,  271,
      271,  271,  271,  291,  292,  271,  271,  271,  280,  271,
      281,  281,  271,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  293,  294,  271,  295,  296,  271,
      271,  284,  271,  271,  271,  285,  271,  271,  286,  271,
      287,  271,  297,  298,  271,  299,  300,  271,  271,  290,
      271,  271,  271,  291,  292,  271,  271,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  301,  273,

      302,  303,  271,  271,  271,  271,  304,  278,  305,  306,
      271,  271,  271,  271,  276,  276,  276,  276,  276,  276,
      276,  276,  307,  273,  308,  309,  271,  310,  278,  311,
      312,  271,  276,  276,  276,  276,  276,  276,  276,  313,
      273,  314,  315,  316,  278,  317,  318,  276,  276,  276,
      276,  276,  273,  273,  271,  278,  278,  271,  276,  276,
      273,  278,  276,  276,  273,  278,  273,  278,  273,  278,
        0,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271
    } ;

static yyconst short int yy_nxt[1208] =
    {   0,
       14,   15,   16,   15,   17,   18,   14,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   14,   36,   37,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       39,   40,   43,   43,   61,   77,   41,   78,  122,   62,
      123,   44,   44,   45,   46,   46,   46,   45,   47,   45,
       48,   45,   45,   49,   45,   45,   50,   45,   51,   52,
       53,   54,   55,   45,   56,   57,   58,   45,   59,   45,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   45,   63,   63,   80,   75,   63,   91,
       40,   64,   69,   87,   92,   41,   65,   81,   93,   88,
       89,   71,   66,  264,   85,   67,   76,   70,   68,   40,
       63,   72,   86,   40,   41,   90,   90,   69,   41,  101,
      102,  104,  105,  115,  113,  108,  108,  108,  116,   63,
      126,  126,   70,   63,  205,  140,   64,  109,  263,  120,
      141,   65,  206,  136,  136,  136,   71,   66,  148,  110,
       67,  104,  143,   68,  114,  137,   72,   94,  121,   95,
       95,  146,  175,  149,   75,  157,  155,  138,  156,  158,

      147,  159,  260,   96,   97,   96,   90,   90,  120,  259,
       98,   96,  115,   76,   90,   90,  175,  116,   99,  157,
      100,  128,  252,  129,  129,  126,  126,  121,  160,  161,
      160,  173,  176,  174,  177,  140,  160,  130,  131,  130,
      141,  163,  251,  163,  132,  130,  164,  164,  108,  108,
      108,  250,  133,  249,  134,  172,  172,  172,  164,  164,
      109,  126,  126,  181,  248,  181,  175,  109,  182,  182,
      182,  182,  110,  164,  164,  178,  179,  178,  157,  110,
      136,  136,  136,  178,  187,  187,  187,   96,  203,   96,
      203,  239,  137,  204,  204,   96,  137,  172,  172,  172,

      211,  238,  211,  237,  138,  212,  212,  213,  138,  109,
      182,  182,  204,  204,   75,  214,  187,  187,  187,  212,
      212,  110,  204,  204,  130,  236,  130,  120,  137,  212,
      212,   75,  130,   76,  235,  234,  160,  120,  160,  233,
      138,   75,  232,  178,  160,  178,  121,  232,  175,  227,
       76,  178,  227,  224,  224,  157,  121,  222,  221,  220,
       76,  219,  218,  217,  224,  224,  224,  224,  224,  224,
      120,  216,  215,  185,  186,  169,  170,  198,  197,  196,
      195,  194,  229,  229,  193,  192,  191,  190,  189,  121,
      188,  168,  186,  229,  229,  229,  229,  229,  229,   75,

      183,  183,  271,  175,  170,  168,  167,  165,  165,  271,
      157,  241,  241,  154,  153,  152,  151,  150,   76,  145,
      144,  135,  241,  241,  241,  241,  241,  241,  120,  271,
      127,  125,  118,  111,  106,  103,  271,   84,   83,   79,
      245,  245,   73,  271,  271,  271,  271,  121,  271,  271,
      271,  245,  245,  245,  245,  245,  245,   75,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  254,
      254,  271,  271,  271,  271,  271,   76,  271,  271,  271,
      254,  254,  254,  254,  254,  254,  120,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  257,  257,

      271,  271,  271,  271,  271,  121,  271,  271,  271,  257,
      257,  257,  257,  257,  257,   75,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  261,  261,  271,
      271,  271,  271,  271,   76,  271,  271,  271,  261,  261,
      261,  261,  261,  261,  120,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  262,  262,  271,  271,
      271,  271,  271,  121,  271,  271,  271,  262,  262,  262,
      262,  262,  262,   75,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  265,  265,  271,  271,  271,
      271,  271,   76,  271,  271,  271,  265,  265,  265,  265,

      265,  265,  120,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  266,  266,  271,  271,  271,  271,
      271,  121,  271,  271,  271,  266,  266,  266,  266,  266,
      266,   75,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  267,  267,  271,  271,  271,  271,  271,
       76,  271,  271,  271,  267,  267,  267,  267,  267,  267,
      120,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  268,  268,  271,  271,  271,  271,  271,  121,
      271,  271,  271,  268,  268,  268,  268,  268,  268,   75,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  269,  269,  271,  271,  271,  271,  271,   76,  271,
      271,  271,  269,  269,  269,  269,  269,  269,  120,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      270,  270,  271,  271,  271,  271,  271,  121,  271,  271,
      271,  270,  270,  270,  270,  270,  270,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   82,   82,   82,  271,   82,   82,   82,   82,   82,
       82,   82,   82,  107,  271,  271,  271,  271,  271,  107,
      107,  107,  107,  112,  112,  112,  271,  112,  112,  112,

      112,  117,  271,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  124,  124,  124,  271,  124,
      124,  124,  124,  124,  124,  124,  124,  139,  139,  139,
      271,  139,  139,  139,  139,  142,  271,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   74,   74,   74,
      271,  271,   74,  271,   74,  271,   74,   82,   82,   82,
      271,  271,   82,  271,   82,  271,   82,  162,  271,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  166,
      166,  271,  271,  271,  166,  166,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  171,  171,
      171,  271,  171,  171,  171,  171,  119,  119,  119,  271,
      271,  119,  271,  119,  271,  119,  124,  124,  124,  271,
      271,  124,  271,  124,  271,  124,  180,  271,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  184,  184,
      271,  271,  271,  184,  184,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  199,  199,  271,
      271,  271,  199,  199,  200,  200,  271,  271,  271,  200,
      200,  201,  201,  271,  271,  271,  201,  201,  202,  202,
      271,  271,  271,  202,  202,  207,  207,  271,  271,  271,

      207,  207,  208,  208,  271,  271,  271,  208,  208,  209,
      209,  271,  271,  271,  209,  209,  210,  210,  271,  271,
      271,  210,  210,  223,  223,  271,  271,  271,  223,  223,
      225,  225,  271,  271,  271,  225,  225,  226,  226,  226,
      271,  271,  271,  226,  226,  228,  228,  271,  271,  271,
      228,  228,  230,  230,  271,  271,  271,  230,  230,  231,
      231,  231,  271,  271,  271,  231,  231,  240,  240,  271,
      271,  271,  240,  240,  242,  242,  271,  271,  271,  242,
      242,  243,  243,  243,  271,  271,  271,  243,  243,  244,
      244,  271,  271,  271,  244,  244,  246,  246,  271,  271,

      271,  246,  246,  247,  247,  247,  271,  271,  271,  247,
      247,  253,  253,  271,  271,  271,  253,  253,   82,   82,
      271,  271,  271,   82,   82,  255,  255,  255,  271,  271,
      271,  255,  255,  256,  256,  271,  271,  271,  256,  256,
      124,  124,  271,  271,  271,  124,  124,  258,  258,  258,
      271,  271,  271,  258,  258,   13,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271
    } ;

static yyconst short int yy_chk[1208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    4,    6,   19,    2,   19,   48,    6,
       48,    3,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    9,   21,   18,   11,   28,
       10,    7,    9,   26,   28,   10,    7,   21,   28,   26,
       26,   11,    7,  260,   24,    7,   18,    9,    7,    8,
       10,   11,   24,   12,    8,   27,   27,   10,   12,   31,
       31,   33,   33,   40,   39,   35,   35,   35,   40,    8,
       51,   51,   10,   12,  166,   61,    8,   35,  259,   47,
       61,    8,  166,   58,   58,   58,   12,    8,   67,   35,
        8,   63,   63,    8,   39,   58,   12,   29,   47,   29,
       29,   66,  258,   67,   74,  255,   76,   58,   76,   83,

       66,   83,  251,   29,   29,   29,   94,   94,  119,  248,
       29,   29,  115,   74,   90,   90,  247,  115,   29,  243,
       29,   53,  239,   53,   53,  128,  128,  119,   90,   90,
       90,  121,  125,  121,  125,  140,   90,   53,   53,   53,
      140,   97,  238,   97,   53,   53,   97,   97,  108,  108,
      108,  236,   53,  235,   53,  109,  109,  109,  163,  163,
      108,  126,  126,  131,  233,  131,  231,  109,  131,  131,
      181,  181,  108,  164,  164,  126,  126,  126,  226,  109,
      136,  136,  136,  126,  137,  137,  137,  164,  161,  164,
      161,  222,  136,  161,  161,  164,  137,  172,  172,  172,

      179,  220,  179,  219,  136,  179,  179,  184,  137,  172,
      182,  182,  203,  203,  254,  184,  187,  187,  187,  211,
      211,  172,  204,  204,  182,  218,  182,  257,  187,  212,
      212,  269,  182,  254,  217,  216,  204,  270,  204,  215,
      187,  200,  214,  212,  204,  212,  257,  213,  210,  206,
      269,  212,  205,  200,  200,  202,  270,  196,  194,  193,
      200,  192,  191,  190,  200,  200,  200,  200,  200,  200,
      208,  189,  188,  186,  185,  170,  169,  154,  153,  152,
      151,  150,  208,  208,  149,  148,  147,  146,  145,  208,
      144,  143,  135,  208,  208,  208,  208,  208,  208,  224,

      133,  132,  129,  124,  106,  105,  101,   99,   98,   95,
       82,  224,  224,   72,   71,   70,   69,   68,  224,   65,
       64,   57,  224,  224,  224,  224,  224,  224,  229,   54,
       52,   49,   44,   37,   34,   32,   30,   23,   22,   20,
      229,  229,   17,   13,    0,    0,    0,  229,    0,    0,
        0,  229,  229,  229,  229,  229,  229,  241,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  241,
      241,    0,    0,    0,    0,    0,  241,    0,    0,    0,
      241,  241,  241,  241,  241,  241,  245,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  245,  245,

        0,    0,    0,    0,    0,  245,    0,    0,    0,  245,
      245,  245,  245,  245,  245,  253,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  253,  253,    0,
        0,    0,    0,    0,  253,    0,    0,    0,  253,  253,
      253,  253,  253,  253,  256,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  256,  256,    0,    0,
        0,    0,    0,  256,    0,    0,    0,  256,  256,  256,
      256,  256,  256,  261,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  261,  261,    0,    0,    0,
        0,    0,  261,    0,    0,    0,  261,  261,  261,  261,

      261,  261,  262,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  262,  262,    0,    0,    0,    0,
        0,  262,    0,    0,    0,  262,  262,  262,  262,  262,
      262,  265,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  265,  265,    0,    0,    0,    0,    0,
      265,    0,    0,    0,  265,  265,  265,  265,  265,  265,
      266,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  266,  266,    0,    0,    0,    0,    0,  266,
        0,    0,    0,  266,  266,  266,  266,  266,  266,  267,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  267,  267,    0,    0,    0,    0,    0,  267,    0,
        0,    0,  267,  267,  267,  267,  267,  267,  268,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      268,  268,    0,    0,    0,    0,    0,  268,    0,    0,
        0,  268,  268,  268,  268,  268,  268,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  274,  274,  274,    0,  274,  274,  274,  274,  274,
      274,  274,  274,  275,    0,    0,    0,    0,    0,  275,
      275,  275,  275,  276,  276,  276,    0,  276,  276,  276,

      276,  277,    0,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,    0,  279,
      279,  279,  279,  279,  279,  279,  279,  280,  280,  280,
        0,  280,  280,  280,  280,  281,    0,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  282,  282,  282,
        0,    0,  282,    0,  282,    0,  282,  283,  283,  283,
        0,    0,  283,    0,  283,    0,  283,  284,    0,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  285,
      285,    0,    0,    0,  285,  285,  286,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  287,  287,
      287,    0,  287,  287,  287,  287,  288,  288,  288,    0,
        0,  288,    0,  288,    0,  288,  289,  289,  289,    0,
        0,  289,    0,  289,    0,  289,  290,    0,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  291,  291,
        0,    0,    0,  291,  291,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  293,  293,    0,
        0,    0,  293,  293,  294,  294,    0,    0,    0,  294,
      294,  295,  295,    0,    0,    0,  295,  295,  296,  296,
        0,    0,    0,  296,  296,  297,  297,    0,    0,    0,

      297,  297,  298,  298,    0,    0,    0,  298,  298,  299,
      299,    0,    0,    0,  299,  299,  300,  300,    0,    0,
        0,  300,  300,  301,  301,    0,    0,    0,  301,  301,
      302,  302,    0,    0,    0,  302,  302,  303,  303,  303,
        0,    0,    0,  303,  303,  304,  304,    0,    0,    0,
      304,  304,  305,  305,    0,    0,    0,  305,  305,  306,
      306,  306,    0,    0,    0,  306,  306,  307,  307,    0,
        0,    0,  307,  307,  308,  308,    0,    0,    0,  308,
      308,  309,  309,  309,    0,    0,    0,  309,  309,  310,
      310,    0,    0,    0,  310,  310,  311,  311,    0,    0,

        0,  311,  311,  312,  312,  312,    0,    0,    0,  312,
      312,  313,  313,    0,    0,    0,  313,  313,  314,  314,
        0,    0,    0,  314,  314,  315,  315,  315,    0,    0,
        0,  315,  315,  316,  316,    0,    0,    0,  316,  316,
      317,  317,    0,    0,    0,  317,  317,  318,  318,  318,
        0,    0,    0,  318,  318,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "csharp.l"
#define INITIAL 0
/*** 
 *** C# parser/scanner
 *** Copyright 2002 James Power, NUI Maynooth, Ireland <james.power@may.ie>
 *** This version: 19 Feb 2002
 ***
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the <organization> nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY <copyright holder> ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL <copyright holder> BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ***/
#line 29 "csharp.l"
#include <string.h>
// #include "csharp.tab.h"
#include "y.tab.h"

  void lexical_error(const char *);
  static int token_for(const char *);
  static int is_allowed_char(const char );
  static SValue getValueInt(const char* text);
  static SValue getValueReal(const char* text);
  static SValue getValueChar(const char* text);
  static SValue getValueString(const char* text);
  static SValue getValueNull();
  static int getRank(const char* text);
#define YY_STACK_USED 1
#define IN_COMMENT 1
#define IN_GENERIC 2

#define IN_ATTRIB 3
#define IN_ACCESSOR 4
#define IN_GETSET 5
 
#line 820 "lexParser.inc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 102 "csharp.l"


#line 973 "lexParser.inc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 272 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1156 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 104 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 105 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 106 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 107 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "csharp.l"
{ yy_push_state(IN_COMMENT); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 111 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 112 "csharp.l"
{ yy_pop_state();}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 114 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 115 "csharp.l"
{ ; /* ignore */ }
	YY_BREAK
/* yytext yylval.xxx */
case 11:
YY_RULE_SETUP
#line 118 "csharp.l"
{ yylval.value = getValueInt(yytext);		return INTEGER_LITERAL; 	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "csharp.l"
{ yylval.value = getValueInt(yytext);		return INTEGER_LITERAL; 	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "csharp.l"
{ yylval.value = getValueReal(yytext);	return REAL_LITERAL; 		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "csharp.l"
{ yylval.value = getValueReal(yytext);	return REAL_LITERAL; 		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "csharp.l"
{ yylval.value = getValueChar(yytext);	return CHARACTER_LITERAL; 	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "csharp.l"
{ yylval.value = getValueChar(yytext);	return CHARACTER_LITERAL; 	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "csharp.l"
{ yylval.value = getValueString(yytext);	return STRING_LITERAL; 		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "csharp.l"
{ yylval.value = getValueString(yytext);	return STRING_LITERAL; 		}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 127 "csharp.l"
{ return COMMA; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 128 "csharp.l"
{ return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "csharp.l"
{ return LEFT_BRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 130 "csharp.l"
{ return LEFT_BRACKET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 131 "csharp.l"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 132 "csharp.l"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "csharp.l"
{ yylval.tmpValue = getRank(yytext); /*printf("Rank : %s\n",yytext);*/ return RANK_SPECIFIER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "csharp.l"
{ yylval.tmpValue = getRank(yytext); /*printf("Rank : %s\n",yytext);*/ return RANK_SPECIFIER; }
	YY_BREAK
/*** Multi-Character Operators ***/
case 27:
YY_RULE_SETUP
#line 138 "csharp.l"
{ return PLUSEQ;	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "csharp.l"
{ return MINUSEQ;	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "csharp.l"
{ return STAREQ;	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "csharp.l"
{ return DIVEQ;	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "csharp.l"
{ return MODEQ;	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "csharp.l"
{ return XOREQ;	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "csharp.l"
{ return ANDEQ;	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "csharp.l"
{ return OREQ;	}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "csharp.l"
{ return LTLT;	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "csharp.l"
{ return GTGT;	}	/* Trick for >> handling in generic */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "csharp.l"
{ return GTGTEQ;	}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "csharp.l"
{ return LTLTEQ;	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "csharp.l"
{ return EQEQ;	}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "csharp.l"
{ return NOTEQ;	}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 152 "csharp.l"
{ return LEQ;		}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "csharp.l"
{ return GEQ;		}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 154 "csharp.l"
{ return ANDAND;	}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "csharp.l"
{ return OROR;	}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 156 "csharp.l"
{ return PLUSPLUS;	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "csharp.l"
{ return MINUSMINUS;	}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "csharp.l"
{ return ARROW;	}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "csharp.l"
{ return GT;	  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "csharp.l"
{ return GT;	  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "csharp.l"
{ return LT;	  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "csharp.l"
{ return LT;	  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "csharp.l"
{ return GEN_LT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "csharp.l"
{ return GEN_GT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "csharp.l"
{ return GEN_LT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "csharp.l"
{ return GEN_GT; }
	YY_BREAK
/*** Those context-sensitive "keywords" ***/
case 56:
YY_RULE_SETUP
#line 170 "csharp.l"
{ return ASSEMBLY; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 171 "csharp.l"
{ return FIELD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 172 "csharp.l"
{ return METHOD; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 173 "csharp.l"
{ return MODULE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 174 "csharp.l"
{ return PARAM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 175 "csharp.l"
{ return PROPERTY; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 176 "csharp.l"
{ return TYPE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 178 "csharp.l"
{ return ADD; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 179 "csharp.l"
{ return REMOVE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 181 "csharp.l"
{ return GET; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 182 "csharp.l"
{ return SET; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "csharp.l"
{ return token_for(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 185 "csharp.l"
{ return token_for(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 187 "csharp.l"
{ yylval.text = concat(yytext); return IDENTIFIER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 190 "csharp.l"
{ 
        if (is_allowed_char(yytext[0])) return yytext[0];
        else lexical_error("invalid token"); 
      }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 194 "csharp.l"
ECHO;
	YY_BREAK
#line 1426 "lexParser.inc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(IN_COMMENT):
			case YY_STATE_EOF(IN_GENERIC):
			case YY_STATE_EOF(IN_ATTRIB):
			case YY_STATE_EOF(IN_ACCESSOR):
			case YY_STATE_EOF(IN_GETSET):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 272 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 272 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 271);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 194 "csharp.l"



static struct name_value {
  char *name;
  int value;
} name_value;
static struct name_value keywords [] = { 
 /* This list must remain sorted!!! */
    {"abstract", ABSTRACT},
    {"as", AS},
    {"base", BASE},
    {"bool", BOOL},
    {"break", BREAK},
    {"byte", BYTE},
    {"case", CASE},
    {"catch", CATCH},
    {"char", CHAR},
    {"checked", CHECKED},
    {"class", CLASS},
    {"const", CONST},
    {"continue", CONTINUE},
    {"decimal", DECIMAL},
    {"default", DEFAULT},
    {"delegate", DELEGATE},
    {"do", DO},
    {"double", DOUBLE},
    {"else", ELSE},
    {"enum", ENUM},
    {"event", EVENT},
    {"explicit", EXPLICIT},
    {"extern", EXTERN},
    {"false", FALSE},
    {"finally", FINALLY},
    {"fixed", FIXED},
    {"float", FLOAT},
    {"for", FOR},
    {"foreach", FOREACH},
    {"goto", GOTO},
    {"if", IF},
    {"implicit", IMPLICIT},
    {"in", IN},
    {"int", INT},
    {"interface", INTERFACE},
    {"internal", INTERNAL},
    {"is", IS},
    {"lock", LOCK},
    {"long", LONG},
    {"namespace", NAMESPACE},
    {"new", NEW},
    {"null", NULL_LITERAL},
    {"object", OBJECT},
    {"operator", OPERATOR},
    {"out", OUT},
    {"override", OVERRIDE},
    {"params", PARAMS},
	{"partial", PARTIAL},
    {"private", PRIVATE},
    {"protected", PROTECTED},
    {"public", PUBLIC},
    {"readonly", READONLY},
    {"ref", REF},
    {"return", RETURN},
    {"sbyte", SBYTE},
    {"sealed", SEALED},
    {"short", SHORT},
    {"sizeof", SIZEOF},
    {"stackalloc", STACKALLOC},
    {"static", STATIC},
    {"string", STRING},
    {"struct", STRUCT},
    {"switch", SWITCH},
    {"this", THIS},
    {"throw", THROW},
    {"true", TRUE},
    {"try", TRY},
    {"typeof", TYPEOF},
    {"uint", UINT},
    {"ulong", ULONG},
    {"unchecked", UNCHECKED},
    {"unsafe", UNSAFE},
    {"ushort", USHORT},
    {"using", USING},
    {"virtual", VIRTUAL},
    {"void", VOID},
    {"volatile", VOLATILE},
    {"while", WHILE}
/* This list must remain sorted!!! */
  };    


int checkCppWord(const char* id) {
	switch (id[0]) {
	case 'a':
		if (id[1] == 'l') {
			if (strcmp("alignas", id) ==0) { return 0; }
			if (strcmp("alignof", id) == 0) { return 0; }
		} else
		if (id[1] == 'n') {
			if (strcmp("and", id) ==0) { return 0; }
			if (strcmp("and_eq", id) == 0) { return 0; }
		} else
		{
			if (strcmp("asm", id) ==0) { return 0; }
			if (strcmp("auto", id) == 0) { return 0; }
		}
		break;
	case 'b':
		if (id[1] == 'i') {
			if (strcmp("bitand", id) ==0) { return 0; }
			if (strcmp("bitor", id) == 0) { return 0; }
		}
		break;
		// "bool"
		// "break",
	case 'c':
		// "case",
		// "catch",
		// "char",

		if (id[1] == 'h') {
			if (strcmp("char16_t", id) ==0) { return 0; }
			if (strcmp("char32_t", id) ==0) { return 0; }
		} else {
			if (strcmp("compl", id) ==0) { return 0; }
			if (strcmp("contexpr", id) ==0) { return 0; }
			if (strcmp("const_cast", id) ==0) { return 0; }
		}
		
		// "class",
		// "compl",
		// "const",
		// "constexpr",
		// "const_cast",
		// "continue",
		break;
	case 'd':
		if (id[1] == 'e') {
			if (strcmp("decltype", id) ==0) { return 0; }
			if (strcmp("delete",   id) ==0) { return 0; }
			if (strcmp("deprecated",   id) ==0) { return 0; }
		} else if (id[1] == 'y') {
			if (strcmp("dynamic_cast",   id) ==0) { return 0; }
		} else if (id[1] == 'l') {
			if (strcmp("dllimport",   id) ==0) { return 0; }
			if (strcmp("dllexport",   id) ==0) { return 0; }
		}
		// "decltype",
		// "default",
		// "delete",
		// "do",
		// "double",
		// "dynamic_cast",
		break;
	case 'e':
		// "else",
		// "enum",
		// "explicit",
		if (id[1] == 'x') {
			if (strcmp("export",   id) ==0) { return 0; }
		} else if (id[1] == 'a') {
			if (strcmp("each",   id) ==0) { return 0; }
		}
		// "export",
		// "extern",
		break;
	case 'f':
		// "false",
		// "final",
		if (id[1]=='i') {
			if (strcmp("final",   id) ==0) { return 0; }
		} else
		// "float",
		// "for",
		if (id[1]=='r') {
			if (strcmp("friend",   id) ==0) { return 0; }
			if (strcmp("friend_as",   id) ==0) { return 0; }
		}
		//"friend",
		break;
	case 'g':
		// "goto",
		if (id[1]=='o') {
			if (strcmp("goto",   id) ==0) { return 0; }
		} else if (id[1] == 'c') {
			if (strcmp("gcnew",   id) ==0) { return 0; }
		} else if (id[1] == 'e') {
			if (strcmp("generic",   id) ==0) { return 0; }
		}
		break;
	case 'i':
		// "if",
		//"inline",
		if (id[1]=='n') {
			if (strcmp("inline",   id) ==0) { return 0; }
			if (strcmp("initonly",   id) ==0) { return 0; }
			if (strcmp("interior_ptr",   id) ==0) { return 0; }
		}
		// "int",
		break;
	case 'l':
		// "long",
		if (id[1]=='i') {
			if (strcmp("literal",   id) ==0) { return 0; }
		}
		break;
	case 'm':
		// "mutable",
		if (id[1]=='u') {
			if (strcmp("mutable",   id) ==0) { return 0; }
		}
		break;
	case 'n':
//		"namespace",
//		"new",
		if (id[1]=='o') {
			int len = strlen(id);
			if (len >= 7) {
				if (strcmp("noinline",   id) ==0) { return 0; }
				if (strcmp("noreturn",   id) ==0) { return 0; }
				if (strcmp("novtable",   id) ==0) { return 0; }
				if (strcmp("nothrow",   id) ==0) { return 0; }
				if (strcmp("noexcept",   id) ==0) { return 0; }
			} else {
				if (strcmp("not",   id) ==0) { return 0; }
				if (strcmp("not_eq",   id) ==0) { return 0; }
			}
		} else if (id[1]=='u') {
			if (strcmp("nullptr",   id) ==0) { return 0; }
		} else if (id[1]=='a') {
			if (strcmp("naked",   id) ==0) { return 0; }
		}
		//"noexcept",
		//"not",
		//"not_eq",
		//"nullptr",
		break;
	case 'o':
		if (id[1]=='p') {
			if (strcmp("operator",   id) ==0) { return 0; }
		} else
		if (id[1]=='r') {
			if (strcmp("or", id) ==0) { return 0; }
			if (strcmp("or_eq", id) ==0) { return 0; }
		} else {
			if (strcmp("override", id) ==0) { return 0; }
		}
		break;
	case 'p':
		// "private",
		// "protected",
		// "public",
		if (strcmp("property", id) ==0) { return 0; }
		break;
	case 'r':
		if (id[1]=='e') {
			if (strcmp("register", id) ==0) { return 0; }
			if (strcmp("reinterpret_cast", id) ==0) { return 0; }
		}
		// "return"
		break;
	case 's':
//		"short",
//		"signed",
		if (id[1]=='i') {
			if (strcmp("signed", id) ==0) { return 0; }
		} else
//		"sizeof",
//		"static",
		if (id[1]=='t') {
			if (strcmp("static_assert", id) ==0) { return 0; }
			if (strcmp("static_cast", id) ==0) { return 0; }
		} else
		if (id[1]=='a') {
			if (strcmp("safecast", id) ==0) { return 0; }
		} else {
			if (strcmp("selectany", id) ==0) { return 0; }
		}
//		"struct",
//		"switch",
		break;
	case 't':
//		static const char* t_keywords [] = { 
		if (id[1]=='e') {
			if (strcmp("template", id) ==0) { return 0; }
		} else
//		"this",
		if (id[1]=='h') {
			if (strcmp("thread_local", id) ==0) { return 0; }
		} else
//		"throw",
//		"true",
//		"try",
		if (id[1]=='y') {
			if (strcmp("typedef", id) ==0) { return 0; }
			if (strcmp("typeid", id) ==0) { return 0; }
			if (strcmp("typename", id) ==0) { return 0; }
		};
		break;
	case 'u':
		if (id[1]=='n') {
			if (strcmp("union", id) ==0) { return 0; }
			if (strcmp("unsigned", id) ==0) { return 0; }
		} else {
			if (strcmp("uuid", id) ==0) { return 0; }
		}
		// "using"
		break;
	case 'v':
//		"virtual",
//		"void",
//      "volatile"
		break;
	case 'w':
		if (id[1]=='c') {
			if (strcmp("wchar_t", id) ==0) { return 0; }
		}
//		"while",
		break;
	case 'x':
		if (id[1]=='o') {
			if (strcmp("xor", id) ==0) { return 0; }
			if (strcmp("xor_eq", id) ==0) { return 0; }
		}
		break;
	case '_':
		if (id[1]=='_') {
			if (strcmp("__abstract", id) == 0) { return 0; }
			if (strcmp("__alignof", id) == 0) { return 0; }
			if (strcmp("__asm", id) == 0) { return 0; }
			if (strcmp("__assume", id) == 0) { return 0; }
			if (strcmp("__based", id) == 0) { return 0; }
			if (strcmp("__box", id) == 0) { return 0; }
			if (strcmp("__cdecl", id) == 0) { return 0; }
			if (strcmp("__declspec", id) == 0) { return 0; }
			if (strcmp("__delegate", id) == 0) { return 0; }
			if (strcmp("__event", id) == 0) { return 0; }
			if (strcmp("__except", id) == 0) { return 0; }
			if (strcmp("__fastcall", id) == 0) { return 0; }
			if (strcmp("__finally", id) == 0) { return 0; }
			if (strcmp("__forceinline", id) == 0) { return 0; }
			if (strcmp("__gc", id) == 0) { return 0; }
			if (strcmp("__hook", id) == 0) { return 0; }
			if (strcmp("__identifier", id) == 0) { return 0; }
			if (strcmp("__if_exists", id) == 0) { return 0; }
			if (strcmp("__if_not_exists", id) == 0) { return 0; }
			if (strcmp("__inline", id) == 0) { return 0; }
			if (strcmp("__int8", id) == 0) { return 0; }
			if (strcmp("__int16", id) == 0) { return 0; }
			if (strcmp("__int32", id) == 0) { return 0; }
			if (strcmp("__int64", id) == 0) { return 0; }
			if (strcmp("__interface", id) == 0) { return 0; }
			if (strcmp("__leave", id) == 0) { return 0; }
			if (strcmp("__m64", id) == 0) { return 0; }
			if (strcmp("__m128", id) == 0) { return 0; }
			if (strcmp("__m128d", id) == 0) { return 0; }
			if (strcmp("__m128i", id) == 0) { return 0; }
			if (strcmp("__multiple_inheritance", id) == 0) { return 0; }
			if (strcmp("__nogc", id) == 0) { return 0; }
			if (strcmp("__noop", id) == 0) { return 0; }
			if (strcmp("__pin", id) == 0) { return 0; }
			if (strcmp("__property", id) == 0) { return 0; }
			if (strcmp("__raise", id) == 0) { return 0; }
			if (strcmp("__sealed", id) == 0) { return 0; }
			if (strcmp("__single_inheritance", id) == 0) { return 0; }
			if (strcmp("__stdcall", id) == 0) { return 0; }
			if (strcmp("__super", id) == 0) { return 0; }
			if (strcmp("__try", id) == 0) { return 0; }
			if (strcmp("__try_cast", id) == 0) { return 0; }
			if (strcmp("__unaligned", id) == 0) { return 0; }
			if (strcmp("__unhook", id) == 0) { return 0; }
			if (strcmp("__uuidof", id) == 0) { return 0; }
			if (strcmp("__value", id) == 0) { return 0; }
			if (strcmp("__virtual_inheritance", id) == 0) { return 0; }
			if (strcmp("__w64", id) == 0) { return 0; }
			if (strcmp("__wchar_t", id) == 0) { return 0; }
		}
	}

	return 1;
};

/* Conduct a binary search for lexeme in the keywords array
 * between indices start (inclusive) and finish (exclusive)
 */
static int bin_search(const char *lexeme, int start, int finish)
{
  if (start >= finish) {/* Not found */
      if (checkCppWord(lexeme) == 0) {
		  compilerError(ERR_USER,"C++ keyword used as identifier");
	  }
	  yylval.text = concat(lexeme); 
	  return IDENTIFIER;
  } else {
    int mid = (start+finish)/2;
    int cmp = strcmp(lexeme,keywords[mid].name);
    if (cmp == 0) {
	  if (keywords[mid].value == OBJECT || keywords[mid].value == STRING) {
		yylval.text = (keywords[mid].value == OBJECT) ? "System.Object" : "System.String";
		return IDENTIFIER;
	  }
      return keywords[mid].value;
    } else if (cmp < 0) {
      return bin_search(lexeme,start,mid);
    } else {
      return bin_search(lexeme,mid+1,finish);
	}
  }
}

static int token_for(const char *lexeme)
{

  static int num_keywords = sizeof(keywords) / sizeof(name_value);
  int token = bin_search(lexeme,0,num_keywords);
  if (token == -1) {
    token = IDENTIFIER;
	/*printf("lexeme:%s\n",lexeme);*/
	yylval.text = concat(lexeme); 
  } else if (token == NULL_LITERAL) {
	yylval.value = getValueNull();
  }
  return token;
}

static int is_allowed_char(const char c)
{
  static char allowed [] = {
    '.', ';', ':',
    '(', ')', '{', '}', '<', '>',
    '+', '-', '*', '/', '%', '&', '|', '!', '~', '^',
    '=', '?',
  };
  static int num_allowed = sizeof(allowed) / sizeof(char);
  int i;
  for (i=0; i<num_allowed; i++) {
    if (allowed[i]==c) 
      return 1;
  }
  return 0;
}

static SValue getValueInt(const char* text) {
	SValue v;
	int len = strlen(text);
	int mode = 0;
	if ((text[len-1]=='U') || (text[len-1]=='u')) {	mode |= 1;	}
	if ((text[len-1]=='L') || (text[len-1]=='l')) {	mode |= 2;	}

	if (mode) {
		if ((text[len-2]=='U') || (text[len-2]=='u')) {	mode |= 1;	}
		if ((text[len-2]=='L') || (text[len-2]=='l')) {	mode |= 2;	}
	}
		
	int hexaMode = 10;
	const char* p = text;
	if ((text[0] == '0') && (text[1] == 'x' || text[1]=='X')) {
		hexaMode = 16;
		p += 2; // Skip 0x
	}
	
	// We have a valid string anyway.
	long out = 0;
	do {
		int v = *p++;
		if (v >= '0' && v <= '9') {
			v -= '0';
		} else
		if (v >= 'A' && v <= 'F') {
			v -= 'A' - 10;
		} else
		if (v >= 'a' && v <= 'f') {
			v -= 'a' - 10;
		} else {
			// Reach end : char 0, U, L etc...
			break;
		}
		
		out = (out * hexaMode) + v;
	} while(1);
	
	switch (mode) {
	case 0:
		v.type	= TYPE_INT;
		v.v.i	= (int)out;
		break;
	case 1:
		v.type	= TYPE_UINT;
		v.v.ui	= (unsigned int)out;
		break;
	case 2:
		v.type	= TYPE_LONG;
		v.v.l	= (long)out;
		break;
	default:
	case 3:
		v.type	= TYPE_ULONG;
		v.v.ul	= (unsigned long)out;
		break;
	}
	return v;
}

static SValue getValueReal(const char* text) {
	SValue v;
	double d;
	char buff[70];	// Tmp buffer
	int strL = strlen(text);
	char c = text[strL-1];
	const char* ptrRead = text;
	int isFloat = 0;
	if ((c == 'F') || (c == 'f') || (c == 'D') || (c == 'd') || (c == 'M') || (c == 'm')) {
		if ((c == 'F') || (c == 'f')) {
			isFloat = 1;
		}
		memcpy(buff,text,strL-1);
		buff[strL] = 0;
		ptrRead = buff;
	}
	sscanf(ptrRead, "%lf", &d);
	if (!isFloat) {
		v.type	= TYPE_DOUBLE;
		v.v.d	= d;
	} else {
		v.type	= TYPE_FLOAT;
		v.v.f	= (float)d;
	}
	return v;
}

static SValue getValueChar(const char* text) {
	SValue v;
	v.type	= TYPE_CHAR;
	const char* t = &text[1];
	u16 ch = 0;
	if (*t == '\\') {
		switch (t[1]) {
		case 'U':
			v.type = TYPE_STRING;
			// TODO : reencode to utf8 !
			compilerError(ERR_NOT_SUPPORTED_YET, " Support complex unicode.");
			break;
		case 'u':
		case 'x':
		{
			int hexaMode = 16;
			// We have a valid string anyway.
			int out = 0;
			const char* p = &t[2];
			do {
				int v = *p++;
				if (v >= '0' && v <= '9') {
					v -= '0';
				} else
				if (v >= 'A' && v <= 'F') {
					v -= 'A';
				} else
				if (v >= 'a' && v <= 'f') {
					v -= 'a';
				} else {
					// Reach end : char 0, ' etc...
					break;
				}
				
				out = (out * hexaMode) + v;
			} while(1);
			// Read 4 hex char
			ch = out;
		}	break;
		case 'a':	ch = 0x0007;	break;
		case 'b':	ch = 0x0008;	break;
		case 'f':	ch = 0x000C;	break;
		case 'n':	ch = 0x000A;	break;
		case 'r':	ch = 0x000D;	break;
		case 't':	ch = 0x0009;	break;
		case 'v':	ch = 0x000B;	break;
		case '0':	ch = 0;			break;
		case '\'':	ch = 0x0027;	break;
		case '\"':	ch = 0x0022;	break;
		case '\\':	ch = 0x005C;	break;
		default:
			compilerError(ERR_USER, "Invalid Char sequence /%c .", t[1]);
		}
	} else {
		if (*t >= 128) {
			compilerError(ERR_NOT_SUPPORTED_YET, " Support UTF8 -> Unicode.");
		} else {
			ch = *t;
		}
	}
	v.v.i = ch;
	return v;
}

static SValue getValueString(const char* text) {
	SValue v;
	v.type	= TYPE_STRING;
	char* pchar = strdup(&text[1]);		// For now UTF8 as is., skip '"'
	int strl = strlen(pchar);
	if (strl) {
		pchar[strl-1] = 0; // Patch last '"'
	}
	v.v.str	= pchar;
	return v;
}

static int getRank(const char* text) {
	int res = 1;
	while (*text != 0) {
		if (*text == ',') {
			res++;
		}
		text++;
	}
	return res;
}

static SValue getValueNull() {
	SValue v;
	v.type	= TYPE_NULL;
	return v;
}


void lexical_error(const char *msg)
{
  fprintf(stderr,"%d:lexical error (%s) [%s]\n",yylineno,msg,yytext);
}


/*** Switch on/off context-sensitive "keywords" ***/
/* I don't like it any more than you do.  */
static int genCount = 0;
void lex_in_generic(void) {
	if (genCount == 0) {
		yy_push_state(IN_GENERIC);
	}
	genCount++;
}
void lex_out_generic(void) {
	genCount--;
	if (genCount == 0) {
		yy_pop_state();
	}
}
void lex_enter_attrib(void)
{
  yy_push_state(IN_ATTRIB);
}
void lex_exit_attrib(void)
{
  yy_pop_state();
}
void lex_enter_accessor(void)
{
  yy_push_state(IN_ACCESSOR);
}
void lex_exit_accessor(void)
{
  yy_pop_state();
}
void lex_enter_getset(void)
{
  yy_push_state(IN_GETSET);
}
void lex_exit_getset(void)
{
  yy_pop_state();
}
